const {describe, it, before, after} = require('mocha');

const entry = require('../../../../../../entry');
const page = require('../../../../pages');
const el = require('../../../../elements');
const dec = require('../../../../dictionaries/decorate');
const sec = require('../../../../dictionaries/section');
const sub = require('../../../../dictionaries/subsection');
const but = require('../../../../dictionaries/button-icon');
const api = require('../../../other/api');

const bef = () => before('Вход и открытие подраздела "Шаблоны доступа" вкладка "Временные критерии доступа"', async () => {
    await dec.auth(entry.customLogin, entry.customPassword);
    await dec.simple(el.section.handler, [sec.pas, entry.max], el.section);
    await dec.simple(el.subsection.handler, [sub.pas.template, entry.max], el.subsection);
    await dec.simple(el.tab.handler, ['Временные критерии доступа', entry.max], el.tab);
    await dec.simple(page.accessTemplateSchedulePage.init, [entry.max], page.accessTemplateSchedulePage);
});

const aft = () => after('Выход', async () => await dec.exit());

// Добавление временной зоны
const addTZ = (tz) => it('Добавление временной зоны', async () => {
    const cook = await page.base.getCookie('token');
    await dec.simple(api.putArrayTimeZone,
        [[tz], cook.text],
        api.putArrayTimeZone);
});

// Удаление временных зон
const removeTZ = () => it('Удаление временных зон', async () => {
    const cook = await page.base.getCookie('token');
    const tz = await api.getAccessSchedules({type: 1}, cook.text);
    const filterTZ = accessShFilter(JSON.parse(tz.text).intervals);
    await dec.simple(api.deleteAccessSchedule,
        [filterTZ, cook.text],
        api.deleteAccessSchedule);
});

// Добавление недельных графиков
const addWeek = (week) => it('Добавление недельных графиков', async () => {
    const cook = await page.base.getCookie('token');
    await dec.simple(api.putArrayWeek,
        [[week], cook.text],
        api.putArrayWeek);
});

// Удаление недельных графиков
const removeW = () =>  it('Удаление недельных графиков', async () => {
    const cook = await page.base.getCookie('token');
    const w = await api.getAccessSchedules({type: 2}, cook.text);
    const filterW = accessShFilter(JSON.parse(w.text));
    await dec.simple(api.deleteAccessSchedule,
        [filterW, cook.text],
        api.deleteAccessSchedule);
});

// Добавление скользящих посуточных графиков
const addSTZ = (stz) => it('Добавление скользящих посуточных графиков', async () => {
    const cook = await page.base.getCookie('token');
    await dec.simple(api.putArraySTZ,
        [[stz], cook.text],
        api.putArraySTZ)
});

// Удаление скользящих посуточных графиков
const removeSTZ = () => it('Удаление скользящих посуточных графиков', async () => {
    const cook = await page.base.getCookie('token');
    const stz = await api.getAccessSchedules({type: 3}, cook.text);
    const filterSTZ = accessShFilter(JSON.parse(stz.text));
    await dec.simple(api.deleteAccessSchedule,
        [filterSTZ, cook.text],
        api.deleteAccessSchedule);
});

// Добавление скользящих понедельных графиков
const addSWeek = (sw) => it('Добавление скользящих понедельных графиков', async () => {
    const cook = await page.base.getCookie('token');
    await dec.simple(api.putArraySW,
        [[sw], cook.text],
        api.putArraySW)
});

// Удаление скользящих понедельных графиков
const removeSW = () => it('Удаление скользящих понедельных графиков', async () => {
    const cook = await page.base.getCookie('token');
    const sw = await api.getAccessSchedules({type: 4}, cook.text);
    const filterSW = accessShFilter(JSON.parse(sw.text));
    await dec.simple(api.deleteAccessSchedule,
        [filterSW, cook.text],
        api.deleteAccessSchedule);
});

const accessShFilter = (event) => {
    return event.filter(item => item.is_const !== 1)
};

// Добавление временных критериев
const add = () => {

    // Отображение страницы добавления временного критерия
    const addDisplay = () => describe('Отображение страницы добавлениия "Временные критерии доступа"', () => {

        bef();

        aft();

        describe('Общее отображение', () => {

            it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                [but.add, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"', async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                [entry.max],
                page.accessTemplateScheduleChangePage));

            it('Отображение поля ввода "Название"', async () => await dec.simple(el.input.input,
                ['Название', '', entry.max],
                el.input));

            it('Отображение поля ввода "Описание"', async () => await dec.simple(el.input.input,
                ['Описание', '', entry.max],
                el.input));

            it('Отображение поля выбора "Временной критерий"', async () => await dec.simple(el.select.select,
                ['Временной критерий', '', entry.max],
                el.select));

            it('Отображение "Необходимо выбрать тип временного критерия доступа"', async () => await dec.simpleText(
                el.placeText.getText,
                [entry.max],
                'Необходимо выбрать тип временного критерия доступа',
                el.placeText));

            it('Отображение кнопки "Вернуться к списку графиков" - активна', async () => await dec.simple(
                el.button.active,
                ['Вернуться к списку графиков', entry.max],
                el.button));

            it('Отображение кнопки "Сохранить изменения" - не активна', async () => await dec.simple(el.button.disabled,
                ['Сохранить изменения', entry.max],
                el.button))
        });

        describe('Отображение - "Временные зоны"', () => {

            it('Выбор значения "Временные зоны" в поле выбора "Временной критерий"',
                async () => await dec.simple(el.select.iconXpand,
                    ['Временной критерий', '', 'Временные зоны', entry.max],
                    el.select));

            it('Отображение в поле выбора "Временной критерий" - "Временные зоны"',
                async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Временные зоны', entry.max],
                    'Временные зоны',
                    el.select));

            it('Отображение интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                [1, entry.max],
                page.accessTemplateScheduleChangePage));

            it('Отсутствие временных блоков',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage))
        });

        describe('Отображение - "Недельный график"', () => {

            describe('Общее отображение', () => {

                it('Выбор значения "Недельный график" в поле выбора "Временной критерий"', async () => await dec.simple(
                    el.select.iconXpand,
                    ['Временной критерий', 'Временные зоны', 'Недельный график', entry.max],
                    el.select));

                it('Отображение в поле выбора "Временной критерий" - "Недельный график"',
                    async () => await dec.simpleText(
                        el.select.getText,
                        ['Временной критерий', 'Недельный график', entry.max],
                        'Недельный график',
                        el.select));

                it('Отображенер кнопки "Редактировать"', async () => await dec.simple(el.button.button,
                    ['Редактировать', entry.max],
                    el.button))

            });

            describe('Модальное окно выбора временных зон', () => {

                it('Нажатие по интервалу - "Понедельник"', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.handler,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Интервал "Понедельник" - нажат', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.intervalActive,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображение модального окна выбора временной зоны', async () => await dec.simple(
                    el.modal.timeZoneModalSelect.init,
                    [entry.max],
                    el.modal.timeZoneModalSelect));

                it('Отображение интервала "Никода"', async () => await dec.simpleText(
                    el.modal.timeZoneModalSelect.intervalName,
                    [1, entry.max],
                    'Никогда',
                    el.modal.timeZoneModalSelect));

                it('Отобарежение интервала "Всегда"', async () => await dec.simpleText(
                    el.modal.timeZoneModalSelect.intervalName,
                    [2, entry.max],
                    'Всегда',
                    el.modal.timeZoneModalSelect));

                it('Отображение кнопки "Отмена"', async () => await dec.simple(
                    el.modal.timeZoneModalSelect.buttonActive,
                    ['Отмена', entry.max],
                    el.modal.timeZoneModalSelect));

                it('Отображение кнопки "Применить"', async () => await dec.simple(
                    el.modal.timeZoneModalSelect.buttonDisabled,
                    ['Применить', entry.max],
                    el.modal.timeZoneModalSelect));

                it('Отображение кнопки закрытия', async () => await dec.simple(el.modal.timeZoneModalSelect.close,
                    [entry.max],
                    el.modal.timeZoneModalSelect));

                it('Нажатие кнопки "Отмена"', async () => await dec.simple(el.modal.timeZoneModalSelect.buttonHandler,
                    ['Отмена', entry.max],
                    el.modal.timeZoneModalSelect));

                it('Отсутствие модального окна выбора временной зоны', async () => await dec.simple(
                    el.modal.timeZoneModalSelect.initClose,
                    [entry.max],
                    el.modal.timeZoneModalSelect));

                it('Нажатие по интервалу - "Понедельник"', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.handler,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Интервал "Понедельник" - нажат', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.intervalActive,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображение модального окна выбора временной зоны', async () => await dec.simple(
                    el.modal.timeZoneModalSelect.init,
                    [entry.max],
                    el.modal.timeZoneModalSelect));

                it('Нажатие  кнопки закрытия', async () => await dec.simple(el.modal.timeZoneModalSelect.closeHandler,
                    [entry.max],
                    el.modal.timeZoneModalSelect));

                it('Отсутствие модального окна выбора временной зоны', async () => await dec.simple(
                    el.modal.timeZoneModalSelect.initClose,
                    [entry.max],
                    el.modal.timeZoneModalSelect))
            });

            describe('Интервальный блок "Понедельник"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [1, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "ПН"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [1, entry.max],
                    'ПН',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage))
            });

            describe('Интервальный блок "Вторник"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [2, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "ВТ"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [2, entry.max],
                    'ВТ',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [2, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [2, entry.max],
                    page.accessTemplateScheduleChangePage))

            });

            describe('Интервальный блок "Среда"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [3, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "СР"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [3, entry.max],
                    'СР',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [3, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [3, entry.max],
                    page.accessTemplateScheduleChangePage))

            });

            describe('Интервальный блок "Четверг"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [4, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "ЧТ"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [4, entry.max],
                    'ЧТ',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [4, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [4, entry.max],
                    page.accessTemplateScheduleChangePage))

            });

            describe('Интервальный блок "Пятница"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [5, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "ПТ"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [5, entry.max],
                    'ПТ',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [5, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [5, entry.max],
                    page.accessTemplateScheduleChangePage))

            });

            describe('Интервальный блок "Суббота"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [6, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "СБ"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [6, entry.max],
                    'СБ',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [6, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [6, entry.max],
                    page.accessTemplateScheduleChangePage))

            });

            describe('Интервальный блок "Воскресенье"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [7, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "ВС"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [7, entry.max],
                    'ВС',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [7, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [7, entry.max],
                    page.accessTemplateScheduleChangePage))

            });

            describe('Интервальный блок "Тип 1"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [8, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "Тип 1"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [8, entry.max],
                    'Тип 1',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [8, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [8, entry.max],
                    page.accessTemplateScheduleChangePage))

            });

            describe('Интервальный блок "Тип 2"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [9, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "Тип 2"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [9, entry.max],
                    'Тип 2',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [9, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [9, entry.max],
                    page.accessTemplateScheduleChangePage))

            });

            describe('Интервальный блок "Тип 3"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [10, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "Тип 3"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [10, entry.max],
                    'Тип 3',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [10, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [10, entry.max],
                    page.accessTemplateScheduleChangePage))

            });

            describe('Интервальный блок "Тип 4"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [11, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "Тип 4"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [11, entry.max],
                    'Тип 4',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [11, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [11, entry.max],
                    page.accessTemplateScheduleChangePage))

            });

            describe('Интервальный блок "Тип 5"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [12, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "Тип 5"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [12, entry.max],
                    'Тип 5',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [12, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [12, entry.max],
                    page.accessTemplateScheduleChangePage))

            });

            describe('Интервальный блок "Тип 6"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [13, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "Тип 6"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [13, entry.max],
                    'Тип 6',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [13, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [13, entry.max],
                    page.accessTemplateScheduleChangePage))

            });

            describe('Интервальный блок "Тип 7"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [14, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "Тип 7"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [14, entry.max],
                    'Тип 7',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [14, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [14, entry.max],
                    page.accessTemplateScheduleChangePage))

            });

            describe('Интервальный блок "Тип 8"', () => {

                it('Назавание - "Никогда"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalName,
                    [15, entry.max],
                    'Никогда',
                    page.accessTemplateScheduleChangePage));

                it('Заглавие - "Тип 8"', async () => await dec.simpleText(
                    page.accessTemplateScheduleChangePage.intervalTitle,
                    [15, entry.max],
                    'Тип 8',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [15, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отсутствие временных блоков в интервале', async () => await dec.simple(
                    page.accessTemplateScheduleChangePage.noTimeInterval,
                    [15, entry.max],
                    page.accessTemplateScheduleChangePage))

            })
        });

        describe('Отображение - "Скользящий посуточный график"', () => {

            describe('Общее отображение', () => {

                it('Выбор значения "Скользящий посуточный график" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', 'Недельный график', 'Скользящий посуточный график', entry.max],
                        el.select));

                it('Поле выбора "Временной критерий" - "Скользящий посуточный график"',
                    async () => await dec.simpleText(el.select.getText,
                        ['Временной критерий', 'Скользящий посуточный график', entry.max],
                        'Скользящий посуточный график',
                        el.select));

                it('Отображение поля ввода "Дата начала смены"', async () => await dec.simple(el.input.input,
                    ['Дата начала смены', '', entry.max],
                    el.input));

                it('Поле выбор "Дата начала смены" - текущая дата', async () => {
                    const date = new Date().toISOString().slice(0, 10);
                    await dec.simpleText(el.input.getValue,
                        ['Дата начала смены', '', entry.max],
                        date,
                        el.input)
                });

                it('Отображение календаря', async () => {
                    await dec.simple(el.input.handler,
                        ['Дата начала смены', '', entry.max],
                        el.input);

                    await dec.simple(el.datepicker.datepicker,
                        [entry.max],
                        el.datepicker)
                });

                it('Отображение кнопки "Редактировать" - не активна', async () => await dec.simple(el.button.button,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображение кнопки "Добавить" - активна', async () => await dec.simple(el.butIcBefore.active,
                    [but.add, entry.max],
                    el.button));

                it('Отображение кнопки "Удалить" - не активна', async () => await dec.simple(el.butIcBefore.disabled,
                    [but.delete, entry.max],
                    el.button))
            });

            describe('Модальное окно выбора временных зон', () => {

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение модального окна выбора временной зоны',
                    async () => await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect));

                it('Отображение интервала "Никода"',
                    async () => await dec.simpleText(el.modal.timeZoneModalSelect.intervalName,
                        [1, entry.max],
                        'Никогда',
                        el.modal.timeZoneModalSelect));

                it('Отобарежение интервала "Всегда"',
                    async () => await dec.simpleText(el.modal.timeZoneModalSelect.intervalName,
                        [2, entry.max],
                        'Всегда',
                        el.modal.timeZoneModalSelect));

                it('Отображение кнопки "Отмена"',
                    async () => await dec.simple(el.modal.timeZoneModalSelect.buttonActive,
                        ['Отмена', entry.max],
                        el.modal.timeZoneModalSelect));

                it('Отображение кнопки "Применить"',
                    async () => await dec.simple(el.modal.timeZoneModalSelect.buttonDisabled,
                        ['Применить', entry.max],
                        el.modal.timeZoneModalSelect));

                it('Отображение кнопки закрытия', async () => await dec.simple(el.modal.timeZoneModalSelect.close,
                    [entry.max],
                    el.modal.timeZoneModalSelect));

                it('Нажатие кнопки "Отмена"', async () => await dec.simple(el.modal.timeZoneModalSelect.buttonHandler,
                    ['Отмена', entry.max],
                    el.modal.timeZoneModalSelect));

                it('Отсутствие модального окна выбора временной зоны',
                    async () => await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect));

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение модального окна выбора временной зоны',
                    async () => await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect));

                it('Нажатие  кнопки закрытия', async () => await dec.simple(el.modal.timeZoneModalSelect.closeHandler,
                    [entry.max],
                    el.modal.timeZoneModalSelect));

                it('Отсутствие модального окна выбора временной зоны',
                    async () => await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect))
            })


        });

        describe('Отображение - "Скользящий понедельный график"', () => {

            it('Выбор значения "Скользящий понедельный график" в поле выбора "Временной критерий"',
                async () => await dec.simple(el.select.iconXpand,
                    ['Временной критерий', 'Скользящий посуточный график', 'Скользящий понедельный график', entry.max],
                    el.select));

            it('Поле выбора "Временной критерий" - "Скользящий понедельный график"',
                async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Скользящий понедельный график', entry.max],
                    'Скользящий понедельный график',
                    el.select));

            it('Отображение поля ввода "Дата начала смены"', async () => await dec.simple(el.input.input,
                ['Дата начала смены', '', entry.max],
                el.input));

            it('Поле выбор "Дата начала смены" - текущая дата', async () => {
                const date = new Date().toISOString().slice(0, 10);
                await dec.simpleText(el.input.getValue,
                    ['Дата начала смены', '', entry.max],
                    date,
                    el.input)
            });

            it('Отображение календаря', async () => {
                await dec.simple(el.input.handler,
                    ['Дата начала смены', '', entry.max],
                    el.input);

                await dec.simple(el.datepicker.datepicker,
                    [entry.max],
                    el.datepicker)
            });

            it('Отображениер поля ввода "Поиск..."', async () => await dec.simple(el.input.input,
                ['', 'Поиск...', entry.max],
                el.input));

            it('Отображение "Необходимо выбрать тип временного критерия доступа"', async () => await dec.simpleText(
                el.placeText.getText,
                [entry.max],
                'Пустой список',
                el.placeText))

        })

    });

    // Временные зоны
    // Минимальное количество параметров - с минимальным отрезком времени.
    const TZMinParamsMinInterval = () =>
        describe('Временные зоны. Добавление. Минимальное количество параметров - с минимальным отрезком времени',
            () => {

            const params = {
                name: 'TomeZoneMinParamsMinInterval',
                start: '00:00',
                end: '00:30',
            };

            describe('Добавление', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввода "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.name, entry.max],
                    el.input));

                it('Выбор значения "Временные зоны" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Временные зоны', entry.max],
                        el.select));

                it('Добавление произвольного временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Отображение временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Ввод начала временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                        [1, 1, params.start, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод окончания временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                        [1, 1, params.end, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success))
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.name,
                    el.table));

                it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    '',
                    el.table));

                it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Временные зоны',
                    el.table));

            });

            describe('Проверка параметров', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    '',
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Временные зоны', entry.max],
                    'Временные зоны',
                    el.input));

                it('Отображение временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Начало временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.start,
                        page.accessTemplateScheduleChangePage));

                it('Окончание временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.end,
                        page.accessTemplateScheduleChangePage));

            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('API запрос на удаление', async () => {
                    const cook = await page.base.getCookie('token');
                    const get = await api.getAccessSchedules({type: 1}, cook.text);
                    const filter = accessShFilter(JSON.parse(get.text).intervals);
                    return await dec.simple(api.deleteAccessSchedule,
                        [filter, cook.text],
                        api.deleteAccessSchedule)
                })

            });

        });

    // Минимальное количество параметров — с  максимальным отрезком времени
    const TZMinParamsMaxInterval = () =>
        describe('Временные зоны. Добавление. Минимальное количество параметров - с максимальным отрезком времени',
            () => {

            const params = {
                name: 'TZMinParamsMaxInterval',
                start: '00:00',
                end: '23:59',
            };

            describe('Добавление', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввода "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.name, entry.max],
                    el.input));

                it('Выбор значения "Временные зоны" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Временные зоны', entry.max],
                        el.select));

                it('Добавление произвольного временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Отображение произвольного временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Ввод начала временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                        [1, 1, params.start, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод окончания временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                        [1, 1, params.end, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success))
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.name,
                    el.table));

                it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    '',
                    el.table));

                it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Временные зоны',
                    el.table));

                it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                    [],
                    page.base))

            });

            describe('Проверка параметров', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    '',
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Временные зоны', entry.max],
                    'Временные зоны',
                    el.input));

                it('Отображение интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отображение временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Начало временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.start,
                        page.accessTemplateScheduleChangePage));

                it('Окончание временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.end,
                        page.accessTemplateScheduleChangePage));

                it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                    [],
                    page.base))

            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('API запрос на удаление', async () => {
                    const cook = await page.base.getCookie('token');
                    const get = await api.getAccessSchedules({type: 1}, cook.text);
                    const filter = accessShFilter(JSON.parse(get.text).intervals);
                    return await dec.simple(api.deleteAccessSchedule,
                        [filter, cook.text],
                        api.deleteAccessSchedule)
                })

            })

        });

    // Максимальное количество параметров — с максимальным отрезком времени
    const TZMaxParamsMaxInterval = () =>
        describe('Временные зоны. Добавление. Максимальное количество параметров — с максимальным отрезком времени',
            () => {

            const params = {
                name: 'TZMaxParamsMaxIntervalName',
                description: 'TZMaxParamsMaxIntervalDescription',
                interval_1: {
                    start: '00:00',
                    end: '05:59',
                },
                interval_2: {
                    start: '06:00',
                    end: '11:59',
                },
                interval_3: {
                    start: '17:00',
                    end: '23:59',
                },
                interval_4: {
                    start: '12:00',
                    end: '16:59',
                },
            };

            describe('Добавление', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввода "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.name, entry.max],
                    el.input));

                it('Ввода "Описание"', async () => await dec.simple(el.input.sendKeys,
                    ['Описание', '', params.description, entry.max],
                    el.input));

                it('Выбор значения "Временные зоны" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Временные зоны', entry.max],
                        el.select));

                it('Добавление 1 произвольного временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Отображение 1 произвольного временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Ввод начала 1 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                        [1, 1, params.interval_1.start, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод окончания 1 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                        [1, 1, params.interval_1.end, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Добавление 2 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Отображение 2 произвольного временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                        [1, 2, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод начала 2 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                        [1, 2, params.interval_2.start, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод окончания 2 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                        [1, 2, params.interval_2.end, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Добавление 3 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Отображение 3 произвольного временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 3, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Ввод окончания 3 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                        [1, 3, params.interval_3.end, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод начала 3 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                        [1, 3, params.interval_3.start, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Добавление 4 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Отображение 4 произвольного временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 3, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Ввод начала 4 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                        [1, 3, params.interval_4.start, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод окончания 4 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                        [1, 3, params.interval_4.end, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success))
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.name,
                    el.table));

                it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    params.description,
                    el.table));

                it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Временные зоны',
                    el.table));

                it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                    [],
                    page.base))

            });

            describe('Проверка параметров', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.description,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Временные зоны', entry.max],
                    'Временные зоны',
                    el.input));

                it('Отображение интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отображение 1 временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Начало 1 временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.interval_1.start,
                        page.accessTemplateScheduleChangePage));

                it('Окончание 1 временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.interval_1.end,
                        page.accessTemplateScheduleChangePage));

                it('Отображение 2 временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 2, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Начало 2 временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 2, entry.max],
                        params.interval_2.start,
                        page.accessTemplateScheduleChangePage));

                it('Окончание 2 временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 2, entry.max],
                        params.interval_2.end,
                        page.accessTemplateScheduleChangePage));

                it('Отображение 3 временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 3, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Начало 3 временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 3, entry.max],
                        params.interval_4.start,
                        page.accessTemplateScheduleChangePage));

                it('Окончание 3 временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 3, entry.max],
                        params.interval_4.end,
                        page.accessTemplateScheduleChangePage));

                it('Отображение 4 временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 4, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Начало 4 временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 4, entry.max],
                        params.interval_3.start,
                        page.accessTemplateScheduleChangePage));

                it('Окончание 4 временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 4, entry.max],
                        params.interval_3.end,
                        page.accessTemplateScheduleChangePage));

                it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                    [],
                    page.base))

            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('API запрос на удаление', async () => {
                    const cook = await page.base.getCookie('token');
                    const get = await api.getAccessSchedules({type: 1}, cook.text);
                    const filter = accessShFilter(JSON.parse(get.text).intervals);
                    return await dec.simple(api.deleteAccessSchedule,
                        [filter, cook.text],
                        api.deleteAccessSchedule)
                })

            })

        });

    // Минимальное количество отрезков времени — попытка создания отрезка с временем меньше чем минимальное
    const TZFailedTimeMinInterval = () =>
        describe('Временные зоны. Добавление. Минимальное количество отрезков времени — попытка создания отрезка ' +
            'с временем меньше чем минимальное',
            () => {

                const params = {
                    name: 'TZFailedMinInterval',
                    start: '00:00',
                    end: '00:29',
                    error: 'Интервал не может быть меньше 30 минут'
                };

                describe('Добавление', () => {

                    bef();

                    aft();

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Ввода "Название"', async () => await dec.simple(el.input.sendKeys,
                        ['Название', '', params.name, entry.max],
                        el.input));

                    it('Выбор значения "Временные зоны" в поле выбора "Временной критерий"',
                        async () => await dec.simple(el.select.iconXpand,
                            ['Временной критерий', '', 'Временные зоны', entry.max],
                            el.select));

                    it('Добавление произвольного временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                        [1, 1, entry.max],
                        page.accessTemplateScheduleChangePage));

                    it('Ввод начала временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                            [1, 1, params.start, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Ввод окончания временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                            [1, 1, params.end, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение ошибки',
                        async () => await dec.simple(el.error.error,
                            [params.error, entry.max],
                            el.success))
                });

                describe('Проверка таблицы', () => {

                    bef();

                    aft();

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.name, entry.max],
                        el.input));

                    it('Отображение в таблице 0 строк', async () => await dec.simple(el.table.noStr,
                        [entry.max],
                        el.table));

                    it('Отображение "Нет данных для отображения."', async () => await dec.simpleText(el.rowEmpty.getText,
                        [entry.max],
                        'Нет данных для отображения.',
                        el.table));

                    it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                        [],
                        page.base))

                })

            });

    // Максимальное количество отрезков времени — попытка создания отрезка с временем меньше чем минимальное
    const TZFailedTimeMaxInterval = () =>
        describe('Временные зоны. Добавление. Максимальное количество отрезков времени, попытка создания отрезка ' +
            'с временем меньше чем минимальное', () => {

                const params = {
                    name: 'TZFailedTimeMaxInterval',
                    interval_1: {
                        start: '00:00',
                        end: '00:30',
                    },
                    interval_2: {
                        start: '01:00',
                        end: '01:29',
                    },
                    interval_3: {
                        start: '02:00',
                        end: '02:31',
                    },
                    interval_4: {
                        start: '03:00',
                        end: '03:29',
                    },
                    error: 'Интервал не может быть меньше 30 минут',
                };

                describe('Добавление', () => {

                    bef();

                    aft();

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Ввода "Название"', async () => await dec.simple(el.input.sendKeys,
                        ['Название', '', params.name, entry.max],
                        el.input));

                    it('Выбор значения "Временные зоны" в поле выбора "Временной критерий"',
                        async () => await dec.simple(el.select.iconXpand,
                            ['Временной критерий', '', 'Временные зоны', entry.max],
                            el.select));

                    it('Добавление 1 произвольного временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение 1 произвольного временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                        [1, 1, entry.max],
                        page.accessTemplateScheduleChangePage));

                    it('Ввод начала 1 временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                            [1, 1, params.interval_1.start, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Ввод окончания 1 временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                            [1, 1, params.interval_1.end, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Добавление 2 временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение 2 произвольного временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                            [1, 2, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Ввод начала 2 временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                            [1, 2, params.interval_2.start, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Ввод окончания 2 временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                            [1, 2, params.interval_2.end, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Добавление 3 временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение 3 произвольного временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                        [1, 3, entry.max],
                        page.accessTemplateScheduleChangePage));

                    it('Ввод начала 3 временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                            [1, 3, params.interval_3.start, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Ввод окончания 3 временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                            [1, 3, params.interval_3.end, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Добавление 4 временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение 4 произвольного временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                        [1, 4, entry.max],
                        page.accessTemplateScheduleChangePage));

                    it('Ввод начала 4 временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                            [1, 4, params.interval_4.start, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Ввод окончания 4 временного блока',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                            [1, 4, params.interval_4.end, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение ошибки', async () => await dec.simple(el.error.error,
                        [params.error, entry.max],
                        el.error))

                });

                describe('Проверка таблицы', () => {

                    bef();

                    aft();

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.name, entry.max],
                        el.input));

                    it('Отображение в таблице 0 строк', async () => await dec.simple(el.table.noStr,
                        [entry.max],
                        el.table));

                    it('Отображение "Нет данных для отображения."', async () => await dec.simpleText(el.rowEmpty.getText,
                        [entry.max],
                        'Нет данных для отображения.',
                        el.table));

                    it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                        [],
                        page.base))

                })

            });

    // Попытка создания создания отрезка с временем больше, чем максимальное
    const TZMaxTimeFailed = () =>
        describe('Временные зоны. Добавление. Попытка создания создания отрезка с временем больше, чем максимальное',
            () => {
            const params = {
                name: 'TZMaxTimeFailed',
                end: '24:00',
            };

            describe('Выполнение теста', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввода "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.name, entry.max],
                    el.input));

                it('Выбор значения "Временные зоны" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Временные зоны', entry.max],
                        el.select));

                it('Добавление произвольного временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Изменения времени окончания', async () =>
                    await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                        [1, 1, params.end, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Время не изменилось',
                    async () => await dec.simpleNotText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.end,
                        page.accessTemplateScheduleChangePage))
            })

        });

    // Попытка создания больше максимального количества отрезков времени
    const TZMaxIntervalFailed = () =>
        describe('Временные зоны. Добавление. Попытка создания больше максимального количества отрезков времени',
            () => {

            const params = {
                name: 'TZFailedTimeMaxInterval',
                interval_1: {
                    start: '00:00',
                    end: '00:30',
                },
                interval_2: {
                    start: '01:00',
                    end: '01:30',
                },
                interval_3: {
                    start: '02:00',
                    end: '02:30',
                },
                interval_4: {
                    start: '03:00',
                    end: '03:30',
                },
                interval_5: {
                    start: '04:00',
                    end: '04:30',
                },
                error: 'В поле items превышено количество элементов, максимально допустимое количество 4' +
                    'Лишнее поле items.type при передаче данных' +
                    'Лишнее поле items.type при передаче данных' +
                    'Лишнее поле items.type при передаче данных' +
                    'Лишнее поле items.type при передаче данных' +
                    'Лишнее поле items.type при передаче данных'
            };

            describe('Добавление', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввода "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.name, entry.max],
                    el.input));

                it('Выбор значения "Временные зоны" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Временные зоны', entry.max],
                        el.select));

                it('Добавление 1 произвольного временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Отображение 1 произвольного временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Ввод начала 1 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                        [1, 1, params.interval_1.start, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод окончания 1 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                        [1, 1, params.interval_1.end, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Добавление 2 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Отображение 2 произвольного временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                        [1, 2, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод начала 2 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                        [1, 2, params.interval_2.start, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод окончания 2 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                        [1, 2, params.interval_2.end, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Добавление 3 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Отображение 3 произвольного временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 3, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Ввод начала 3 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                        [1, 3, params.interval_3.start, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод окончания 3 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                        [1, 3, params.interval_3.end, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Добавление 4 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Отображение 4 произвольного временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 4, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Ввод начала 4 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                        [1, 4, params.interval_4.start, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод окончания 4 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                        [1, 4, params.interval_4.end, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Добавление 5 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Отображение 5 произвольного временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 5, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Ввод начала 5 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                        [1, 5, params.interval_5.start, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод окончания 5 временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                        [1, 5, params.interval_5.end, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение ошибки', async () => await dec.simple(el.error.error,
                    [params.error, entry.max],
                    el.error))

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 0 строк', async () => await dec.simple(el.table.noStr,
                    [entry.max],
                    el.table));

                it('Отображение "Нет данных для отображения."', async () => await dec.simpleText(el.rowEmpty.getText,
                    [entry.max],
                    'Нет данных для отображения.',
                    el.table));

                it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                    [],
                    page.base))

            })
        });

    // Попытка создания без всех обязательных параметров
    const TZNoParams = () => describe('Временные зоны. Добавление. Попытка создания без всех обязательных параметров',
        () => {

        const params = {
            description: 'TZNoParams',
        };

        describe('Добавление', () => {

            bef();

            aft();

            it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                [but.add, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Ввода "Описание"', async () => await dec.simple(el.input.sendKeys,
                ['Описание', '', params.description, entry.max],
                el.input));

            it('Выбор значения "Временные зоны" в поле выбора "Временной критерий"',
                async () => await dec.simple(el.select.iconXpand,
                    ['Временной критерий', '', 'Временные зоны', entry.max],
                    el.select));

            it('Отображение интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                [1, entry.max],
                page.accessTemplateScheduleChangePage));

            it('Кнопка "Сохранить изменения" - заблокирована', async () => await dec.simple(el.button.disabled,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simpleFalse(el.button.handlerNoActive,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Отображение "title", "url" не изменилось',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отобраюжение в таблице 3 строки', async () => await dec.simple(el.table.size,
                [3, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.description, entry.max],
                el.input));

            it('Отображение в таблице 0 строк', async () => await dec.simple(el.table.noStr,
                [entry.max],
                el.table));

            it('Отображение "Нет данных для отображения."', async () => await dec.simpleText(el.rowEmpty.getText,
                [entry.max],
                'Нет данных для отображения.',
                el.table));

            it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                [],
                page.base))
        })

    });

    // Попытка создания без настройки интервала
    const TZNoInterval = () => describe('Временные зоны. Добавление. Попытка создания без настройки интервала',
        () => {

        const params = {
            name: 'ZNoInterval',
            error: 'Заполните все обязательные поля'
        };

        describe('Добавление', () => {

            bef();

            aft();

            it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                [but.add, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Ввода "Название"', async () => await dec.simple(el.input.sendKeys,
                ['Название', '', params.name, entry.max],
                el.input));

            it('Выбор значения "Временные зоны" в поле выбора "Временной критерий"',
                async () => await dec.simple(el.select.iconXpand,
                    ['Временной критерий', '', 'Временные зоны', entry.max],
                    el.select));

            it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Отображение ошибки', async () => await dec.simple(el.error.error,
                [params.error, entry.max],
                el.error))

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отобраюжение в таблице 3 строки', async () => await dec.simple(el.table.size,
                [3, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 0 строк', async () => await dec.simple(el.table.noStr,
                [entry.max],
                el.table));

            it('Отображение "Нет данных для отображения."', async () => await dec.simpleText(el.rowEmpty.getText,
                [entry.max],
                'Нет данных для отображения.',
                el.table));

            it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                [],
                page.base))
        })


    });

    // Попытка создания без ввода "Название"
    const TZNoName = () => describe('Временные зоны. Добавление. Попытка создания без ввода "Название"', () => {

        const params = {
            start: '00:00',
            end: '01:00',
        };

        describe('Добавление', () => {

            bef();

            aft();

            it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                [but.add, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Выбор значения "Временные зоны" в поле выбора "Временной критерий"',
                async () => await dec.simple(el.select.iconXpand,
                    ['Временной критерий', '', 'Временные зоны', entry.max],
                    el.select));

            it('Отображение интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                [1, entry.max],
                page.accessTemplateScheduleChangePage));

            it('Добавление произвольного временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Отображение временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                [1, 1, entry.max],
                page.accessTemplateScheduleChangePage));

            it('Ввод начала временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                    [1, 1, params.start, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Ввод окончания временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                    [1, 1, params.end, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Кнопка "Сохранить изменения" - заблокирована', async () => await dec.simple(el.button.disabled,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simpleFalse(el.button.handlerNoActive,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Отображение "title", "url" не изменилось',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                    [entry.max],
                    page.accessTemplateScheduleChangePage))
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отобраюжение в таблице 3 строки', async () => await dec.simple(el.table.size,
                [3, entry.max],
                el.table));

            it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                [],
                page.base))
        })

    });

    //Попытка дублирования "Название", "Описание" и "Временной критерий" — "Временные зоны".
    const TZDuplicateTZ = () =>
        describe('Временные зоны. Добавление. Попытка дублирования "Название", "Описание" и "Временной критерий" — ' +
            '"Временные зоны"', () => {

            const params = {
                name: 'TZDuplicateTZName',
                description: 'TZDuplicateTZDescription',
                error: 'Такое название уже используется',
                start: '00:00',
                end: '00:30',
            };

            describe('API - Добавление', () => {

                bef();

                aft();

                it('Добавление временной зоны', async () => {
                    const cook = await page.base.getCookie('token');
                    const tz = {
                        name: params.name,
                        comment: params.description,
                        items: [{
                            begin: 0,
                            end: 10000
                        }]
                    };
                    await dec.simple(api.putArrayTimeZone,
                        [[tz], cook.text],
                        api.putArrayTimeZone)
                })

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                    [],
                    page.base));

            });

            describe('Добавление', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввода "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.name, entry.max],
                    el.input));

                it('Ввода "Описание"', async () => await dec.simple(el.input.sendKeys,
                    ['Описание', '', params.description, entry.max],
                    el.input));

                it('Выбор значения "Временные зоны" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Временные зоны', entry.max],
                        el.select));

                it('Отображение интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отображение интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Добавление произвольного временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Отображение временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Ввод начала временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                        [1, 1, params.start, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод окончания временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                        [1, 1, params.end, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение ошибки', async () => await dec.simple(el.error.error,
                    [params.error, entry.max],
                    el.error))
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                    [],
                    page.base))
            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('API запрос на удаление', async () => {
                    const cook = await page.base.getCookie('token');
                    const get = await api.getAccessSchedules({type: 1}, cook.text);
                    const filter = accessShFilter(JSON.parse(get.text).intervals);
                    return await dec.simple(api.deleteAccessSchedule,
                        [filter, cook.text],
                        api.deleteAccessSchedule)
                })

            })

        });

    // Попытка дублирования "Название", "Описание" и "Временной критерий" — "Недельный график",
    // "Скользящий посуточный график", "Скользящий понедельный график".
    const TZDuplicateWKsWKsTZ = () => describe('Временные зоны. Добавление. Дублирования "Название", "Описание" и ' +
        '"Временной критерий" — "Недельный график", "Скользящий посуточный график", "Скользящий понедельный график".',
        () => {

            const params = {
                name: 'TZDuplicateWKsWKsTZName',
                description: 'TZDuplicateWKsWKsTZDescription',
                start: 0,
                end: 10000,
                date: '2001-01-01',
                error: 'Такое название уже используется',
            };

            describe('API - добавление', () => {

                bef();

                aft();

                it('Добавление недельного графика', async () => {
                    const cook = await page.base.getCookie('token');
                    const week = {
                        name: params.name,
                        comment: params.description,
                        items: {
                            days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                            holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                                {dayId: 1}]
                        }
                    };
                    await dec.simple(api.putArrayWeek,
                        [[week], cook.text],
                        api.putArrayWeek)
                });

                it('Добавление скользящего посуточного график', async () => {
                    const cook = await page.base.getCookie('token');
                    const stz = {
                        name: params.name,
                        comment: params.description,
                        begin_date: params.date,
                        items: {days: [{id: 1}]}
                    };
                    await dec.simple(api.putArraySTZ,
                        [[stz], cook.text],
                        api.putArraySTZ)
                });

                it('Добавление скользящего понедельного графика', async () => {
                    const cook = await page.base.getCookie('token');
                    const get = await api.getAccessSchedules({type: 2}, cook.text);
                    const parse = JSON.parse(get.text);
                    const sw = {
                        name: params.name,
                        comment: params.description,
                        begin_date: params.date,
                        items: [parse[0]['id']]
                    };
                    await dec.simple(api.putArraySW,
                        [[sw], cook.text],
                        api.putArraySW)
                })

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 6 строки', async () => await dec.simple(el.table.size,
                    [6, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 3 строки', async () => await dec.simple(el.table.size,
                    [3, entry.max],
                    el.table));

                it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                    [],
                    page.base))

            });

            describe('Добавление', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввода "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.name, entry.max],
                    el.input));

                it('Ввода "Описание"', async () => await dec.simple(el.input.sendKeys,
                    ['Описание', '', params.description, entry.max],
                    el.input));

                it('Выбор значения "Временные зоны" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Временные зоны', entry.max],
                        el.select));

                it('Отображение интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Отображение интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Добавление произвольного временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.addInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Отображение временного блока', async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

                it('Ввод начала временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                        [1, 1, params.start, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод окончания временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                        [1, 1, params.end, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success))
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 7 строки', async () => await dec.simple(el.table.size,
                    [7, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));

                it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                    [],
                    page.base))

            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('API запрос на удаление', async () => {
                    const cook = await page.base.getCookie('token');

                    const sw = await api.getAccessSchedules({type: 4}, cook.text);
                    const filterSW = accessShFilter(JSON.parse(sw.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterSW, cook.text],
                        api.deleteAccessSchedule);

                    const stz = await api.getAccessSchedules({type: 3}, cook.text);
                    const filterSTZ = accessShFilter(JSON.parse(stz.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterSTZ, cook.text],
                        api.deleteAccessSchedule);

                    const w = await api.getAccessSchedules({type: 2}, cook.text);
                    const filterW = accessShFilter(JSON.parse(w.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterW, cook.text],
                        api.deleteAccessSchedule);

                    const tz = await api.getAccessSchedules({type: 1}, cook.text);
                    const filterTZ = accessShFilter(JSON.parse(tz.text).intervals);
                    await dec.simple(api.deleteAccessSchedule,
                        [filterTZ, cook.text],
                        api.deleteAccessSchedule)
                })

            })


        });

    // Проверки добавления временные критерии - "Временные зоны"
    const TZ = () => describe('Проверки добавления временные критерии - "Временные зоны"', () => {
        TZMinParamsMinInterval();
        TZMinParamsMaxInterval();
        TZMaxParamsMaxInterval();
        TZFailedTimeMinInterval();
        TZFailedTimeMaxInterval();
        TZMaxTimeFailed();
        TZMaxIntervalFailed();
        TZNoParams();
        TZNoInterval();
        TZNoName();
        TZDuplicateTZ();
        TZDuplicateWKsWKsTZ()
    });

    // Недельный график
    // Минимальное количество параметров
    const WMinParams = () => describe('Недельный график. Добавление. Минимальное количество параметров', () => {

        const params = {
            name: 'WMinParams',
            items: {
                days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                    {dayId: 1}]
            }
        };

        describe('Добавление', () => {

            bef();

            aft();

            it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                [but.add, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                ['Название', '', params.name, entry.max],
                el.input));

            it('Выбор значения "Недельный график" в поле выбора "Временной критерий"',
                async () => await dec.simple(el.select.iconXpand,
                    ['Временной критерий', '', 'Недельный график', entry.max],
                    el.select));

            it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                ['Сохранено успешно', entry.max],
                el.success))

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                [],
                page.base))

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    '',
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Недельный график', entry.max],
                    'Недельный график',
                    el.input))
            });

            describe('Проверка интервала "Понедельник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'ПН',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала "Вторник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [2, entry.max],
                        'ВТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Среда"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [3, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [3, entry.max],
                        'СР',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Четеверг"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [4, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [4, entry.max],
                        'ЧТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Пятница"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [5, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [5, entry.max],
                        'ПТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Суббота"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [6, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [6, entry.max],
                        'СБ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Воскресенье"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [7, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [7, entry.max],
                        'ВС',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 1"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [8, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [8, entry.max],
                        'Тип 1',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 2"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [9, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [9, entry.max],
                        'Тип 2',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 3"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [10, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [10, entry.max],
                        'Тип 3',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 4"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [11, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [11, entry.max],
                        'Тип 4',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 5"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [12, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [12, entry.max],
                        'Тип 5',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 6"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [13, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [13, entry.max],
                        'Тип 6',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 7"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [14, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [14, entry.max],
                        'Тип 7',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 8"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [15, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [15, entry.max],
                        'Тип 8',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            })

        });

        describe('Удаление тестовых данных', () => {

            bef();

            aft();

            it('API запрос на удаление', async () => {
                const cook = await page.base.getCookie('token');
                const get = await api.getAccessSchedules({type: 2}, cook.text);
                const filter = accessShFilter(JSON.parse(get.text));
                return await dec.simple(api.deleteAccessSchedule,
                    [filter, cook.text],
                    api.deleteAccessSchedule)
            });

            it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                [],
                page.base))


        })

    });

    // Минимальное количество параметров - с изменением интервального блока.
    const WMinParamsMinInterval = () =>
        describe('Недельный график. Добавление. Минимальное количество параметров - с изменением интервального блока',
            () => {

                const params = {
                    name: 'WMinParamsMinIntervalName',
                    start: '00:00',
                    end: '00:30',
                    tz: {
                        name: 'tz',
                        start: 0,
                        end: 1800,
                    }
                };

                describe('API - добавление', () => {

                    bef();

                    aft();

                    it('Добавление временной зоны', async () => {
                        const cook = await page.base.getCookie('token');
                        const tz = {
                            name: params.tz.name,
                            items: [{
                                begin: params.tz.start,
                                end: params.tz.end
                            }]
                        };
                        await dec.simple(api.putArrayTimeZone,
                            [[tz], cook.text],
                            api.putArrayTimeZone)
                    })

                });

                describe('Проверка таблицы', () => {

                    bef();

                    aft();

                    it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                        [4, entry.max],
                        el.table));

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.tz.name, entry.max],
                        el.input));

                    it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.singleSize,
                        [entry.max],
                        el.table));

                    it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                        [],
                        page.base))

                });

                describe('Добавление', () => {

                    bef();

                    aft();

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                        ['Название', '', params.name, entry.max],
                        el.input));

                    it('Выбор значения "Недельный график" в поле выбора "Временной критерий"', async () => {
                        await dec.simple(el.select.iconXpand,
                            ['Временной критерий', '', 'Недельный график', entry.max],
                            el.select)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Нажатие по первому интевалу', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.handler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                        ['Редактировать', entry.max],
                        el.button));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по временной зоне', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [3, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                        ['Сохранено успешно', entry.max],
                        el.success))

                });

                describe('Проверка таблицы', () => {

                    bef();

                    aft();

                    it('Отображение в таблице 5 строк', async () => await dec.simple(el.table.size,
                        [5, entry.max],
                        el.table));

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.name, entry.max],
                        el.input));

                    it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                        [1, entry.max],
                        el.table));

                    it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Название', 1, 1, entry.max],
                        params.name,
                        el.table));

                    it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                        [],
                        page.base))

                });

                describe('Проверка параметров', () => {

                    bef();

                    aft();

                    describe('Проверка общих праметров', () => {

                        it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                            ['', 'Поиск...', params.name, entry.max],
                            el.input));

                        it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                            [entry.max],
                            el.table));

                        it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                            [1, entry.max],
                            el.table));

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.edit, entry.max],
                            el.butIcBefore));

                        it('Отображение "title", "url"',
                            async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                                [entry.max],
                                page.accessTemplateScheduleChangePage));

                        it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                            ['Название', '', entry.max],
                            params.name,
                            el.input));

                        it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                            ['Описание', '', entry.max],
                            '',
                            el.input));

                        it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                            ['Временной критерий', 'Недельный график', entry.max],
                            'Недельный график',
                            el.input))
                    });

                    describe('Проверка интервала "Понедельник"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [1, entry.max],
                                params.tz.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [1, entry.max],
                                'ПН',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [1, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [1, 1, entry.max],
                                params.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [1, 1, entry.max],
                                params.end,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала "Вторник"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [2, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [2, entry.max],
                                'ВТ',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [2, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [2, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Среда"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [3, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [3, entry.max],
                                'СР',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [3, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [3, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Четеверг"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [4, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [4, entry.max],
                                'ЧТ',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [4, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [4, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Пятница"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [5, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [5, entry.max],
                                'ПТ',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [5, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [5, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Суббота"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [6, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [6, entry.max],
                                'СБ',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [6, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [6, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Воскресенье"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [7, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [7, entry.max],
                                'ВС',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [7, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [7, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 1"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [8, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [8, entry.max],
                                'Тип 1',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [8, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [8, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 2"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [9, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [9, entry.max],
                                'Тип 2',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [9, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [9, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 3"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [10, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [10, entry.max],
                                'Тип 3',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [10, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [10, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 4"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [11, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [11, entry.max],
                                'Тип 4',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [11, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [11, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 5"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [12, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [12, entry.max],
                                'Тип 5',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [12, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [12, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 6"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [13, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [13, entry.max],
                                'Тип 6',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [13, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [13, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 7"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [14, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [14, entry.max],
                                'Тип 7',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [14, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [14, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 8"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [15, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [15, entry.max],
                                'Тип 8',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [15, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [15, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    })

                });

                describe('Удаление тестовых данных', () => {

                    bef();

                    aft();

                    it('Удаление тестовых данных', async () => {
                        const cook = await page.base.getCookie('token');

                        const w = await api.getAccessSchedules({type: 2}, cook.text);
                        const filterW = accessShFilter(JSON.parse(w.text));
                        await dec.simple(api.deleteAccessSchedule,
                            [filterW, cook.text],
                            api.deleteAccessSchedule);

                        const tz = await api.getAccessSchedules({type: 1}, cook.text);
                        const filterTZ = accessShFilter(JSON.parse(tz.text).intervals);
                        await dec.simple(api.deleteAccessSchedule,
                            [filterTZ, cook.text],
                            api.deleteAccessSchedule)
                    });

                    it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                        [],
                        page.base))

                })

            });

    // Максимальное количество параметров — с разными интервальными блоками
    const WMaxParams = () => {
        describe('Недельный график. Добавление. Максимальное количество параметров — с разными интервальными блоками',
            () => {

                const params = {
                    name: 'WMaxParamsName',
                    description: 'WMaxParamsDescription',
                    tz1: {
                        name: 'tz1',
                        start: 0,
                        end: 1800,
                        intervals: {
                            start: '00:00',
                            end: '00:30',
                        }
                    },
                    tz2: {
                        name: 'tz2',
                        start: 0,
                        end: 86340,
                        intervals: {
                            start: '00:00',
                            end: '23:59',
                        }
                    },
                    tz3: {
                        name: 'tz3',
                        start: 0,
                        end: 21540,
                        intervals: {
                            start: '00:00',
                            end: '05:59',
                        }
                    },
                    tz4: {
                        name: 'tz4',
                        start1: 0,
                        end1: 21540,
                        start2: 21600,
                        end2: 43140,
                        intervals: {
                            start1: '00:00',
                            end1: '05:59',
                            start2: '06:00',
                            end2: '11:59',
                        }
                    },
                    tz5: {
                        name: 'tz5',
                        start1: 0,
                        end1: 21540,
                        start2: 21600,
                        end2: 43140,
                        start3: 43200,
                        end3: 64740,
                        intervals: {
                            start1: '00:00',
                            end1: '05:59',
                            start2: '06:00',
                            end2: '11:59',
                            start3: '12:00',
                            end3: '17:59',
                        }
                    },
                    tz6: {
                        name: 'tz6',
                        start1: 0,
                        end1: 21540,
                        start2: 21600,
                        end2: 43140,
                        start3: 43200,
                        end3: 64740,
                        start4: 64800,
                        end4: 86340,
                        intervals: {
                            start1: '00:00',
                            end1: '05:59',
                            start2: '06:00',
                            end2: '11:59',
                            start3: '12:00',
                            end3: '17:59',
                            start4: '18:00',
                            end4: '23:59',
                        }
                    },
                };

                describe('API - добавление', () => {

                    bef();

                    aft();

                    it('Добавление временной зоны', async () => {
                        const cook = await page.base.getCookie('token');
                        const pn = {
                            name: params.tz1.name,
                            items: [{
                                begin: params.tz1.start,
                                end: params.tz1.end
                            }]
                        };
                        const vt = {
                            name: params.tz2.name,
                            items: [{
                                begin: params.tz2.start,
                                end: params.tz2.end
                            }]
                        };
                        const cht = {
                            name: params.tz3.name,
                            items: [{
                                begin: params.tz3.start,
                                end: params.tz3.end
                            }]
                        };
                        const pt = {
                            name: params.tz4.name,
                            items: [
                                {begin: params.tz4.start1, end: params.tz4.end1},
                                {begin: params.tz4.start2, end: params.tz4.end2}]
                        };
                        const sb = {
                            name: params.tz5.name,
                            items: [
                                {begin: params.tz5.start1, end: params.tz5.end1},
                                {begin: params.tz5.start2, end: params.tz5.end2},
                                {begin: params.tz5.start3, end: params.tz5.end3}]
                        };
                        const vs = {
                            name: params.tz6.name,
                            items: [
                                {begin: params.tz6.start1, end: params.tz6.end1},
                                {begin: params.tz6.start2, end: params.tz6.end2},
                                {begin: params.tz6.start3, end: params.tz6.end3},
                                {begin: params.tz6.start4, end: params.tz6.end4}
                            ]
                        };

                        await dec.simple(api.putArrayTimeZone,
                            [[pn], cook.text],
                            api.putArrayTimeZone);

                        await dec.simple(api.putArrayTimeZone,
                            [[vt], cook.text],
                            api.putArrayTimeZone);

                        await dec.simple(api.putArrayTimeZone,
                            [[cht], cook.text],
                            api.putArrayTimeZone);

                        await dec.simple(api.putArrayTimeZone,
                            [[pt], cook.text],
                            api.putArrayTimeZone);

                        await dec.simple(api.putArrayTimeZone,
                            [[sb], cook.text],
                            api.putArrayTimeZone);

                        await dec.simple(api.putArrayTimeZone,
                            [[vs], cook.text],
                            api.putArrayTimeZone)

                    })

                });

                describe('Добавление', () => {

                    bef();

                    aft();

                    describe('Добавление общих параметров', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображение "title", "url"',
                            async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                                [entry.max],
                                page.accessTemplateScheduleChangePage));

                        it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                            ['Название', '', params.name, entry.max],
                            el.input));

                        it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                            ['Описание', '', params.description, entry.max],
                            el.input));

                        it('Выбор значения "Недельный график" в поле выбора "Временной критерий"', async () => {
                            await dec.simple(el.select.iconXpand,
                                ['Временной критерий', '', 'Недельный график', entry.max],
                                el.select)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [1, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Добавление интервала "Понедельник"', () => {

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [1, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [3, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Добавление интервала "Вторник"', () => {

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [2, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [4, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Добавление интервала "Среда"', () => {

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [3, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [2, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Добавление интервала "Четверг"', () => {

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [4, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [5, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Добавление интервала "Пятница"', () => {

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [5, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [6, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Добавление интервала "Суббота"', () => {

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [6, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [7, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Добавление интервала "Воскресенье"', () => {

                        it('Скролл интервалов', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.scrollWeekTop,
                                [],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [7, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [8, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Добавление интервала "Тип 1"', () => {

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [8, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [3, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Добавление интервала "Тип 2"', () => {

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [9, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [4, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Добавление интервала "Тип 3"', () => {

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [10, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [2, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Добавление интервала "Тип 4"', () => {

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [11, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Добавление интервала "Тип 5"', () => {

                        it('Скролл интервалов', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.scrollWeekTop,
                                [],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [12, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [5, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [5, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Добавление интервала "Тип 6"', () => {

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [13, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [6, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Добавление интервала "Тип 7"', () => {

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [14, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [7, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Добавление интервала "Тип 8"', () => {

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [15, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                            ['Редактировать', entry.max],
                            el.button));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [8, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })

                    });

                    describe('Сохранение изменений', () => {

                        it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                            ['Сохранить изменения', entry.max],
                            el.button));

                        it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                            ['Сохранено успешно', entry.max],
                            el.success))
                    })


                    /*                    it('Нажатие по первому интевалу', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.handler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)})

                    it('Интервал выделен', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)})

                    it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                        ['Редактировать', entry.max],
                        el.button))

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)})

                    it('Нажатие по временной зоне', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [3, entry.max],
                            el.modal.timeZoneModalSelect)})

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button))

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)})

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button))

                    it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                        ['Сохранено успешно', entry.max],
                        el.success))*/

                });

                describe('Проверка таблицы', () => {

                    bef();

                    aft();

                    it('Отображение в таблице 10 строк', async () => await dec.simple(el.table.size,
                        [10, entry.max],
                        el.table));

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.name, entry.max],
                        el.input));

                    it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                        [1, entry.max],
                        el.table));

                    it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Название', 1, 1, entry.max],
                        params.name,
                        el.table));

                    it('Проверка столбца "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Описание', 1, 2, entry.max],
                        params.description,
                        el.table));

                    it('Проверка столбца "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Тип', 1, 3, entry.max],
                        'Недельный график',
                        el.table));

                    it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                        [],
                        page.base))

                });

                describe('Проверка параметров', () => {

                    bef();

                    aft();

                    describe('Проверка общих праметров', () => {

                        it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                            ['', 'Поиск...', params.name, entry.max],
                            el.input));

                        it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                            [entry.max],
                            el.table));

                        it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                            [1, entry.max],
                            el.table));

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.edit, entry.max],
                            el.butIcBefore));

                        it('Отображение "title", "url"',
                            async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                                [entry.max],
                                page.accessTemplateScheduleChangePage));

                        it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                            ['Название', '', entry.max],
                            params.name,
                            el.input));

                        it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                            ['Описание', '', entry.max],
                            params.description,
                            el.input));

                        it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                            ['Временной критерий', 'Недельный график', entry.max],
                            'Недельный график',
                            el.input))
                    });

                    describe('Проверка интервала "Понедельник"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [1, entry.max],
                                params.tz1.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [1, entry.max],
                                'ПН',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [1, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [1, 1, entry.max],
                                params.tz1.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [1, 1, entry.max],
                                params.tz1.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала "Вторник"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [2, entry.max],
                                params.tz2.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [2, entry.max],
                                'ВТ',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [2, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [2, 1, entry.max],
                                params.tz2.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [2, 1, entry.max],
                                params.tz2.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Среда"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [3, entry.max],
                                'Всегда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [3, entry.max],
                                'СР',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [3, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [3, 1, entry.max],
                                '00:00',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [3, 1, entry.max],
                                '23:59',
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Четеверг"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [4, entry.max],
                                params.tz3.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [4, entry.max],
                                'ЧТ',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [4, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [4, 1, entry.max],
                                params.tz3.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [4, 1, entry.max],
                                params.tz3.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Пятница"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [5, entry.max],
                                params.tz4.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [5, entry.max],
                                'ПТ',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [5, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [5, 1, entry.max],
                                params.tz4.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [5, 1, entry.max],
                                params.tz4.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [5, 2, entry.max],
                                params.tz4.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [5, 2, entry.max],
                                params.tz4.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        })


                    });

                    describe('Проверка интервала "Суббота"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [6, entry.max],
                                params.tz5.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [6, entry.max],
                                'СБ',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [6, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [6, 1, entry.max],
                                params.tz5.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [6, 1, entry.max],
                                params.tz5.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [6, 2, entry.max],
                                params.tz5.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [6, 2, entry.max],
                                params.tz5.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [6, 3, entry.max],
                                params.tz5.intervals.start3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [6, 3, entry.max],
                                params.tz5.intervals.end3,
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Воскресенье"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [7, entry.max],
                                params.tz6.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [7, entry.max],
                                'ВС',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [7, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [7, 1, entry.max],
                                params.tz6.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [7, 1, entry.max],
                                params.tz6.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [7, 2, entry.max],
                                params.tz6.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [7, 2, entry.max],
                                params.tz6.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [7, 3, entry.max],
                                params.tz6.intervals.start3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [7, 3, entry.max],
                                params.tz6.intervals.end3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 4', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [7, 4, entry.max],
                                params.tz6.intervals.start4,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 4', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [7, 4, entry.max],
                                params.tz6.intervals.end4,
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 1"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [8, entry.max],
                                params.tz1.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [8, entry.max],
                                'Тип 1',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [8, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [8, 1, entry.max],
                                params.tz1.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [8, 1, entry.max],
                                params.tz1.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 2"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [9, entry.max],
                                params.tz2.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [9, entry.max],
                                'Тип 2',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [9, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [9, 1, entry.max],
                                params.tz2.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [9, 1, entry.max],
                                params.tz2.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 3"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [10, entry.max],
                                'Всегда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [10, entry.max],
                                'Тип 3',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [10, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [10, 1, entry.max],
                                '00:00',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [10, 1, entry.max],
                                '23:59',
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 4"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [11, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [11, entry.max],
                                'Тип 4',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [11, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временных блоков в интервале', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [11, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 5"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [12, entry.max],
                                params.tz3.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [12, entry.max],
                                'Тип 5',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [12, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });


                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [12, 1, entry.max],
                                params.tz3.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [12, 1, entry.max],
                                params.tz3.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 6"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [13, entry.max],
                                params.tz4.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [13, entry.max],
                                'Тип 6',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [13, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [13, 1, entry.max],
                                params.tz4.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [13, 1, entry.max],
                                params.tz4.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [13, 2, entry.max],
                                params.tz4.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [13, 2, entry.max],
                                params.tz4.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 7"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [14, entry.max],
                                params.tz5.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [14, entry.max],
                                'Тип 7',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [14, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [14, 1, entry.max],
                                params.tz5.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [14, 1, entry.max],
                                params.tz5.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [14, 2, entry.max],
                                params.tz5.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [14, 2, entry.max],
                                params.tz5.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [14, 3, entry.max],
                                params.tz5.intervals.start3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [14, 3, entry.max],
                                params.tz5.intervals.end3,
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала "Тип 8"', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [15, entry.max],
                                params.tz6.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                                [15, entry.max],
                                'Тип 8',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [15, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [15, 1, entry.max],
                                params.tz6.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [15, 1, entry.max],
                                params.tz6.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [15, 2, entry.max],
                                params.tz6.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [15, 2, entry.max],
                                params.tz6.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [15, 3, entry.max],
                                params.tz6.intervals.start3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [15, 3, entry.max],
                                params.tz6.intervals.end3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 4', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [15, 4, entry.max],
                                params.tz6.intervals.start4,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 4', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [15, 4, entry.max],
                                params.tz6.intervals.end4,
                                page.accessTemplateScheduleChangePage)
                        })


                    })

                });

                describe('Удаление тестовых данных', () => {

                    bef();

                    aft();

                    it('Удаление тестовых данных', async () => {
                        const cook = await page.base.getCookie('token');

                        const w = await api.getAccessSchedules({type: 2}, cook.text);
                        const filterW = accessShFilter(JSON.parse(w.text));
                        await dec.simple(api.deleteAccessSchedule,
                            [filterW, cook.text],
                            api.deleteAccessSchedule);

                        const tz = await api.getAccessSchedules({type: 1}, cook.text);
                        const filterTZ = accessShFilter(JSON.parse(tz.text).intervals);
                        await dec.simple(api.deleteAccessSchedule,
                            [filterTZ, cook.text],
                            api.deleteAccessSchedule)
                    });

                    it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                        [],
                        page.base))
                })

            })

    };

    // Попытка создания без ввода "Название"
    const WNoName = () => describe('Недельный график. Добавление. Попытка создания без ввода "Название"', () => {

        describe('Добавление', () => {

            bef();

            aft();

            it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                [but.add, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Выбор значения "Недельный график" в поле выбора "Временной критерий"', async () => {
                await dec.simple(el.select.iconXpand,
                    ['Временной критерий', '', 'Недельный график', entry.max],
                    el.select)
            });

            it('Отображение интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                [2, entry.max],
                page.accessTemplateScheduleChangePage));

            it('Кнопка "Сохранить изменения" - заблокирована', async () => await dec.simple(el.button.disabled,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simpleFalse(el.button.handlerNoActive,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Отображение "title", "url" не изменилось',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                    [entry.max],
                    page.accessTemplateScheduleChangePage))
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отобраюжение в таблице 3 строки', async () => await dec.simple(el.table.size,
                [3, entry.max],
                el.table))
        })
    });

    // Попытка дублирования "Название", "Описание" и "Временной критерий" — "Недельный график"
    const WDuplicateW = () =>
        describe('Недельный график. Добавление. Попытка дублирования "Название", "Описание" и "Временной критерий" — ' +
            '"Недельный график".', () => {

            const params = {
                name: 'WDuplicateWName',
                description: 'WDuplicateWDescription',
                error: 'Такое название уже используется',
            };

            describe('API - добавление', () => {

                bef();

                aft();

                it('Добавление', async () => {
                    const cook = await page.base.getCookie('token');
                    const week = {
                        name: params.name,
                        comment: params.description,
                        items: {
                            days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                            holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                                {dayId: 1}]
                        }
                    };
                    await dec.simple(api.putArrayWeek,
                        [[week], cook.text],
                        api.putArrayWeek)
                })

            });

            describe('Добавление', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.name, entry.max],
                    el.input));

                it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                    ['Описание', '', params.description, entry.max],
                    el.input));

                it('Выбор значения "Недельный график" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Недельный график', entry.max],
                        el.select));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение ошибки', async () => await dec.simple(el.error.error,
                    [params.error, entry.max],
                    el.error))
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                    [],
                    page.base))
            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('API запрос на удаление', async () => {
                    const cook = await page.base.getCookie('token');
                    const w = await api.getAccessSchedules({type: 2}, cook.text);
                    const filterW = accessShFilter(JSON.parse(w.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterW, cook.text],
                        api.deleteAccessSchedule)
                })

            })


        });

    // Дублирования "Название", "Описание" и "Временной критерий" — "Временные зоны", "Скользящий посуточный график",
    // "Скользящий понедельный график".
    const WDuplicateTZKsWKsTZ = () =>
        describe('Недельный график. Добавление. Дублирования "Название", "Описание" и "Временной критерий" — ' +
            'Временные зоны", "Скользящий посуточный график", "Скользящий понедельный график".', () => {

            const params = {
                name: 'WDuplicateTZKsWKsTZName',
                description: 'WDuplicateTZKsWKsTZDescription',
                date: '2001-01-01',
                error: 'Такое название уже используется',
            };

            describe('API - добавление', () => {

                bef();

                aft();

                it('Добавление временную зону', async () => {
                    const cook = await page.base.getCookie('token');
                    const tz = {
                        name: params.name,
                        comment: params.description,
                        items: [{
                            begin: 0,
                            end: 10000
                        }]
                    };
                    await dec.simple(api.putArrayTimeZone,
                        [[tz], cook.text],
                        api.putArrayTimeZone)
                });

                it('Добавление недельного расписания', async () => {
                    const cook = await page.base.getCookie('token');
                    const week = {
                        name: 'Test',
                        items: {
                            days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                            holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                                {dayId: 1}]
                        }
                    };
                    await dec.simple(api.putArrayWeek,
                        [[week], cook.text],
                        api.putArrayWeek)
                });

                it('Добавление скользящего посуточного график', async () => {
                    const cook = await page.base.getCookie('token');
                    const stz = {
                        name: params.name,
                        comment: params.description,
                        begin_date: params.date,
                        items: {days: [{id: 1}]}
                    };
                    await dec.simple(api.putArraySTZ,
                        [[stz], cook.text],
                        api.putArraySTZ)
                });

                it('Добавление скользящего понедельного графика', async () => {
                    const cook = await page.base.getCookie('token');
                    const get = await api.getAccessSchedules({type: 2}, cook.text);
                    const parse = JSON.parse(get.text);
                    const sw = {
                        name: params.name,
                        comment: params.description,
                        begin_date: params.date,
                        items: [parse[0]['id']]
                    };
                    await dec.simple(api.putArraySW,
                        [[sw], cook.text],
                        api.putArraySW)
                })

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 7 строк', async () => await dec.simple(el.table.size,
                    [7, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 3 строки', async () => await dec.simple(el.table.size,
                    [3, entry.max],
                    el.table));

                it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                    [],
                    page.base))

            });

            describe('Добавление', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.name, entry.max],
                    el.input));

                it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                    ['Описание', '', params.description, entry.max],
                    el.input));

                it('Выбор значения "Недельный график" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Недельный график', entry.max],
                        el.select));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success))

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 8 строк', async () => await dec.simple(el.table.size,
                    [8, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));

                it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                    [],
                    page.base))

            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('API запрос на удаление', async () => {
                    const cook = await page.base.getCookie('token');

                    const sw = await api.getAccessSchedules({type: 4}, cook.text);
                    const filterSW = accessShFilter(JSON.parse(sw.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterSW, cook.text],
                        api.deleteAccessSchedule);

                    const stz = await api.getAccessSchedules({type: 3}, cook.text);
                    const filterSTZ = accessShFilter(JSON.parse(stz.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterSTZ, cook.text],
                        api.deleteAccessSchedule);

                    const w = await api.getAccessSchedules({type: 2}, cook.text);
                    const filterW = accessShFilter(JSON.parse(w.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterW, cook.text],
                        api.deleteAccessSchedule);

                    const tz = await api.getAccessSchedules({type: 1}, cook.text);
                    const filterTZ = accessShFilter(JSON.parse(tz.text).intervals);
                    await dec.simple(api.deleteAccessSchedule,
                        [filterTZ, cook.text],
                        api.deleteAccessSchedule)
                })
            })
        });

    // Проверки добавления временные критерии - "Недельный график"
    const W = () => describe('Проверки добавления временные критерии - "Недельный график"', () => {
        WMinParams();
        WMinParamsMinInterval();
        WMaxParams();
        WNoName();
        WDuplicateW();
        WDuplicateW()
    });

    // Скользящий посуточный график
    // Минимальное количество параметров
    const STZMinParams = () => describe('Скользящий посуточный график. Добавление. Минимальное количество параметров',
        () => {


            const params = {
                name: 'STZMinParams',
                date: '2023',
            };

            describe('Добавление', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.name, entry.max],
                    el.input));

                it('Выбор значения "Скользящий посуточный график" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Скользящий посуточный график', entry.max],
                        el.select));

                it('Нажатие кнопки "Добавить"', async () => dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success));


            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 4 строк', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                    [1, entry.max],
                    el.table));

                it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.name,
                    el.table));

                it('Проверка столбца "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    '',
                    el.table));

                it('Проверка столбца "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Скользящий посуточный график',
                    el.table))
            });

            describe('Проверка параметров', () => {

                bef();

                aft();

                describe('Проверка общих праметров', () => {

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.name, entry.max],
                        el.input));

                    it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                        [entry.max],
                        el.table));

                    it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                        [1, entry.max],
                        el.table));

                    it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.edit, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                        ['Название', '', entry.max],
                        params.name,
                        el.input));

                    it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                        ['Описание', '', entry.max],
                        '',
                        el.input));

                    it('Проверка "Дата начала смены"', async () => {
                        const date = new Date().toISOString().slice(0, 10);
                        await dec.simpleText(el.input.getValue,
                            ['Дата начала смены', '', entry.max],
                            date,
                            el.input)
                    });

                    it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                        ['Временной критерий', 'Скользящий посуточный график', entry.max],
                        'Скользящий посуточный график',
                        el.input))
                });

                describe('Проверка интервала День 1', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [1, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'День 1',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                })

            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('Удаление тестовых данных', async () => {
                    const cook = await page.base.getCookie('token');

                    const stz = await api.getAccessSchedules({type: 3}, cook.text);
                    const filterStz = accessShFilter(JSON.parse(stz.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterStz, cook.text],
                        api.deleteAccessSchedule)
                })

            })
        });

    // Минимальное количество параметров - с изменением интервального блока
    const STZMinEditInterval = () =>
        describe('Скользящий посуточный график. Добавление.' +
            'Минимальное количество параметров - с изменением интервального блока',
            () => {

                const params = {
                    name: 'STZMinEditInterval',
                    start: '00:00',
                    end: '23:59',
                };

                describe('Добавление', () => {

                    bef();

                    aft();

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                        ['Название', '', params.name, entry.max],
                        el.input));

                    it('Выбор значения "Скользящий посуточный график" в поле выбора "Временной критерий"',
                        async () => await dec.simple(el.select.iconXpand,
                            ['Временной критерий', '', 'Скользящий посуточный график', entry.max],
                            el.select));

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                    it('Интервал выделен', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                            [entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.edit, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await page.base.loading(2000);
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [2, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                        ['Сохранено успешно', entry.max],
                        el.success))


                });

                describe('Проверка таблицы', () => {

                    bef();

                    aft();

                    it('Отображение в таблице 4 строк', async () => await dec.simple(el.table.size,
                        [4, entry.max],
                        el.table));

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.name, entry.max],
                        el.input));

                    it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                        [1, entry.max],
                        el.table));

                    it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Название', 1, 1, entry.max],
                        params.name,
                        el.table));

                    it('Проверка столбца "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Описание', 1, 2, entry.max],
                        '',
                        el.table));

                    it('Проверка столбца "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Тип', 1, 3, entry.max],
                        'Скользящий посуточный график',
                        el.table))
                });

                describe('Проверка параметров', () => {

                    bef();

                    aft();

                    describe('Проверка общих праметров', () => {

                        it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                            ['', 'Поиск...', params.name, entry.max],
                            el.input));

                        it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                            [entry.max],
                            el.table));

                        it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                            [1, entry.max],
                            el.table));

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.edit, entry.max],
                            el.butIcBefore));

                        it('Отображение "title", "url"',
                            async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                                [entry.max],
                                page.accessTemplateScheduleChangePage));

                        it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                            ['Название', '', entry.max],
                            params.name,
                            el.input));

                        it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                            ['Описание', '', entry.max],
                            '',
                            el.input));

                        it('Проверка "Дата начала смены"', async () => {
                            const date = new Date().toISOString().slice(0, 10);
                            await dec.simpleText(el.input.getValue,
                                ['Дата начала смены', '', entry.max],
                                date,
                                el.input)
                        });

                        it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                            ['Временной критерий', 'Скользящий посуточный график', entry.max],
                            'Скользящий посуточный график',
                            el.input))
                    });

                    describe('Проверка интервала День 1', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [1, entry.max],
                                'Всегда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [1, entry.max],
                            'День 1',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [1, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [1, 1, entry.max],
                                params.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [1, 1, entry.max],
                                params.end,
                                page.accessTemplateScheduleChangePage)
                        })


                    })

                });

                describe('Удаление тестовых данных', () => {

                    bef();

                    aft();

                    it('Удаление тестовых данных', async () => {
                        const cook = await page.base.getCookie('token');

                        const stz = await api.getAccessSchedules({type: 3}, cook.text);
                        const filterStz = accessShFilter(JSON.parse(stz.text));
                        await dec.simple(api.deleteAccessSchedule,
                            [filterStz, cook.text],
                            api.deleteAccessSchedule)
                    })

                })
            });

    // Минимальное количество параметров - с удалением интервального блока
    const STZMinRemoveInterval = () =>
        describe('Скользящий посуточный график. Добавление. ' +
            'Минимальное количество параметров - с удалением интервального блока',
            () => {
                const params = {
                    name: 'STZMinRemoveInterval',
                    start: '00:00',
                    end: '23:59',
                };

                describe('Добавление', () => {

                    bef();

                    aft();

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                        ['Название', '', params.name, entry.max],
                        el.input));

                    it('Выбор значения "Скользящий посуточный график" в поле выбора "Временной критерий"',
                        async () => await dec.simple(el.select.iconXpand,
                            ['Временной критерий', '', 'Скользящий посуточный график', entry.max],
                            el.select));

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                    it('Интервал выделен', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                            [entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.delete, entry.max],
                        el.butIcBefore));

                    it('Отсутствие интервалов', async () => {
                        await dec.simpleFalse(page.accessTemplateScheduleChangePage.interval,
                            [1, entry.min],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await page.base.loading(2000);
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [2, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [2, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                        ['Сохранено успешно', entry.max],
                        el.success))


                });

                describe('Проверка таблицы', () => {

                    bef();

                    aft();

                    it('Отображение в таблице 4 строк', async () => await dec.simple(el.table.size,
                        [4, entry.max],
                        el.table));

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.name, entry.max],
                        el.input));

                    it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                        [1, entry.max],
                        el.table));

                    it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Название', 1, 1, entry.max],
                        params.name,
                        el.table));

                    it('Проверка столбца "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Описание', 1, 2, entry.max],
                        '',
                        el.table));

                    it('Проверка столбца "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Тип', 1, 3, entry.max],
                        'Скользящий посуточный график',
                        el.table))
                });

                describe('Проверка параметров', () => {

                    bef();

                    aft();

                    describe('Проверка общих праметров', () => {

                        it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                            ['', 'Поиск...', params.name, entry.max],
                            el.input));

                        it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                            [entry.max],
                            el.table));

                        it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                            [1, entry.max],
                            el.table));

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.edit, entry.max],
                            el.butIcBefore));

                        it('Отображение "title", "url"',
                            async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                                [entry.max],
                                page.accessTemplateScheduleChangePage));

                        it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                            ['Название', '', entry.max],
                            params.name,
                            el.input));

                        it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                            ['Описание', '', entry.max],
                            '',
                            el.input));

                        it('Проверка "Дата начала смены"', async () => {
                            const date = new Date().toISOString().slice(0, 10);
                            await dec.simpleText(el.input.getValue,
                                ['Дата начала смены', '', entry.max],
                                date,
                                el.input)
                        });

                        it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                            ['Временной критерий', 'Скользящий посуточный график', entry.max],
                            'Скользящий посуточный график',
                            el.input))
                    });

                    describe('Проверка интервала День 1', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [1, entry.max],
                                'Всегда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [1, entry.max],
                            'День 1',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [1, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [1, 1, entry.max],
                                params.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [1, 1, entry.max],
                                params.end,
                                page.accessTemplateScheduleChangePage)
                        })


                    })

                });

                describe('Удаление тестовых данных', () => {

                    bef();

                    aft();

                    it('Удаление тестовых данных', async () => {
                        const cook = await page.base.getCookie('token');

                        const stz = await api.getAccessSchedules({type: 3}, cook.text);
                        const filterStz = accessShFilter(JSON.parse(stz.text));
                        await dec.simple(api.deleteAccessSchedule,
                            [filterStz, cook.text],
                            api.deleteAccessSchedule)
                    })

                })

            });

    // Максимальное количество параметров с разными интервальными блоками — 30 дней
    const STZMaxParams = () =>
        describe('Скользящий посуточный график. Добавление. ' +
            'Максимальное количество параметров с разными интервальными блоками — 30 дней',
            () => {

                const params = {
                    name: 'STZMaxParamsName',
                    description: 'STZMaxParamsDescription',
                    date: '2022-01-01',
                    objDate: {
                        day: '1',
                        month: 'Январь',
                        year: '2022',
                    },
                    tz1: {
                        name: 'tz1',
                        start: 0,
                        end: 1800,
                        intervals: {
                            start: '00:00',
                            end: '00:30',
                        }
                    },
                    tz2: {
                        name: 'tz2',
                        start: 0,
                        end: 86340,
                        intervals: {
                            start: '00:00',
                            end: '23:59',
                        }
                    },
                    tz3: {
                        name: 'tz3',
                        start: 0,
                        end: 21540,
                        intervals: {
                            start: '00:00',
                            end: '05:59',
                        }
                    },
                    tz4: {
                        name: 'tz4',
                        start1: 0,
                        end1: 21540,
                        start2: 21600,
                        end2: 43140,
                        intervals: {
                            start1: '00:00',
                            end1: '05:59',
                            start2: '06:00',
                            end2: '11:59',
                        }
                    },
                    tz5: {
                        name: 'tz5',
                        start1: 0,
                        end1: 21540,
                        start2: 21600,
                        end2: 43140,
                        start3: 43200,
                        end3: 64740,
                        intervals: {
                            start1: '00:00',
                            end1: '05:59',
                            start2: '06:00',
                            end2: '11:59',
                            start3: '12:00',
                            end3: '17:59',
                        }
                    },
                    tz6: {
                        name: 'tz6',
                        start1: 0,
                        end1: 21540,
                        start2: 21600,
                        end2: 43140,
                        start3: 43200,
                        end3: 64740,
                        start4: 64800,
                        end4: 86340,
                        intervals: {
                            start1: '00:00',
                            end1: '05:59',
                            start2: '06:00',
                            end2: '11:59',
                            start3: '12:00',
                            end3: '17:59',
                            start4: '18:00',
                            end4: '23:59',
                        }
                    },
                };

                describe('API - добавление', () => {

                    bef();

                    aft();

                    it('Добавление временной зоны', async () => {
                        const cook = await page.base.getCookie('token');
                        const pn = {
                            name: params.tz1.name,
                            items: [{
                                begin: params.tz1.start,
                                end: params.tz1.end
                            }]
                        };
                        const vt = {
                            name: params.tz2.name,
                            items: [{
                                begin: params.tz2.start,
                                end: params.tz2.end
                            }]
                        };
                        const cht = {
                            name: params.tz3.name,
                            items: [{
                                begin: params.tz3.start,
                                end: params.tz3.end
                            }]
                        };
                        const pt = {
                            name: params.tz4.name,
                            items: [
                                {begin: params.tz4.start1, end: params.tz4.end1},
                                {begin: params.tz4.start2, end: params.tz4.end2}]
                        };
                        const sb = {
                            name: params.tz5.name,
                            items: [
                                {begin: params.tz5.start1, end: params.tz5.end1},
                                {begin: params.tz5.start2, end: params.tz5.end2},
                                {begin: params.tz5.start3, end: params.tz5.end3}]
                        };
                        const vs = {
                            name: params.tz6.name,
                            items: [
                                {begin: params.tz6.start1, end: params.tz6.end1},
                                {begin: params.tz6.start2, end: params.tz6.end2},
                                {begin: params.tz6.start3, end: params.tz6.end3},
                                {begin: params.tz6.start4, end: params.tz6.end4}
                            ]
                        };

                        await dec.simple(api.putArrayTimeZone,
                            [[pn], cook.text],
                            api.putArrayTimeZone);

                        await dec.simple(api.putArrayTimeZone,
                            [[vt], cook.text],
                            api.putArrayTimeZone);

                        await dec.simple(api.putArrayTimeZone,
                            [[cht], cook.text],
                            api.putArrayTimeZone);

                        await dec.simple(api.putArrayTimeZone,
                            [[pt], cook.text],
                            api.putArrayTimeZone);

                        await dec.simple(api.putArrayTimeZone,
                            [[sb], cook.text],
                            api.putArrayTimeZone);

                        await dec.simple(api.putArrayTimeZone,
                            [[vs], cook.text],
                            api.putArrayTimeZone)

                    })

                });

                describe('Добавление', () => {

                    bef();

                    aft();

                    describe('Добавление общий параметров', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображение "title", "url"',
                            async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                                [entry.max],
                                page.accessTemplateScheduleChangePage));

                        it('Выбор значения "Скользящий посуточный график" в поле выбора "Временной критерий"',
                            async () => await dec.simple(el.select.iconXpand,
                                ['Временной критерий', '', 'Скользящий посуточный график', entry.max],
                                el.select));


                        it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                            ['Название', '', params.name, entry.max],
                            el.input));

                        it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                            ['Описание', '', params.description, entry.max],
                            el.input));


                        it('Выбор "Дата начала смены"', async () => {

                            await dec.simple(el.input.handler,
                                ['Дата начала смены', '', entry.max],
                                el.input);

                            await dec.simple(el.datepicker.dateParse,
                                [params.objDate, entry.max],
                                el.datepicker)

                        })
                    });

                    describe('Добавление интервала День 1', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 2', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [2, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [2, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 3', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [3, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [3, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 4', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [4, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [4, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 5', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [5, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [5, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 6', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [6, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [6, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 7', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [7, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [7, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 8', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [8, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [8, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 9', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 10', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [2, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [2, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 11', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [3, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [3, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 12', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [4, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [4, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 13', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [5, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [5, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 14', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [6, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [6, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 15', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [7, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [7, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 16', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [8, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [8, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 17', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 18', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [2, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [2, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 19', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [3, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [3, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 20', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [4, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [4, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 21', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [5, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [5, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 22', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [6, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [6, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 23', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [7, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [7, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 24', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [8, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [8, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 25', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [1, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 26', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [2, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [2, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 27', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [3, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [3, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 28', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [4, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [4, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 29', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [5, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [5, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Добавление интервала День 30', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [6, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Скролл модального окна', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                                [],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [6, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        })
                    });

                    describe('Сохранение', () => {

                        it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                            ['Сохранить изменения', entry.max],
                            el.button));

                        it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                            ['Сохранено успешно', entry.max],
                            el.success))
                    })

                });

                describe('Проверка таблицы', () => {

                    bef();

                    aft();

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.name, entry.max],
                        el.input));

                    it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                        [1, entry.max],
                        el.table));

                    it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Название', 1, 1, entry.max],
                        params.name,
                        el.table));

                    it('Проверка столбца "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Описание', 1, 2, entry.max],
                        params.description,
                        el.table));

                    it('Проверка столбца "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Тип', 1, 3, entry.max],
                        'Скользящий посуточный график',
                        el.table))
                });

                describe('Проверка параметров', () => {

                    bef();

                    aft();

                    describe('Проверка общих праметров', () => {

                        it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                            ['', 'Поиск...', params.name, entry.max],
                            el.input));

                        it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                            [entry.max],
                            el.table));

                        it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                            [1, entry.max],
                            el.table));

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.edit, entry.max],
                            el.butIcBefore));

                        it('Отображение "title", "url"',
                            async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                                [entry.max],
                                page.accessTemplateScheduleChangePage));

                        it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                            ['Название', '', entry.max],
                            params.name,
                            el.input));

                        it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                            ['Описание', '', entry.max],
                            params.description,
                            el.input));

                        it('Проверка "Дата начала смены"', async () => await dec.simpleText(el.input.getValue,
                            ['Дата начала смены', '', entry.max],
                            params.date,
                            el.input));

                        it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                            ['Временной критерий', 'Скользящий посуточный график', entry.max],
                            'Скользящий посуточный график',
                            el.input))
                    });

                    describe('Проверка интервала День 1', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [1, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [1, entry.max],
                            'День 1',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [1, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временного блока', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [1, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала День 2', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [2, entry.max],
                                'Всегда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [2, entry.max],
                            'День 2',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [2, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [2, 1, entry.max],
                                '00:00',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [2, 1, entry.max],
                                '23:59',
                                page.accessTemplateScheduleChangePage)
                        })


                    });

                    describe('Проверка интервала День 3', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [3, entry.max],
                                params.tz1.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [3, entry.max],
                            'День 3',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [3, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [3, 1, entry.max],
                                params.tz1.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [3, 1, entry.max],
                                params.tz1.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })


                    });

                    describe('Проверка интервала День 4', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [4, entry.max],
                                params.tz2.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [4, entry.max],
                            'День 4',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [4, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [4, 1, entry.max],
                                params.tz2.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [4, 1, entry.max],
                                params.tz2.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 5', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [5, entry.max],
                                params.tz3.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [5, entry.max],
                            'День 5',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [5, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [5, 1, entry.max],
                                params.tz3.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [5, 1, entry.max],
                                params.tz3.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 6', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [6, entry.max],
                                params.tz4.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [6, entry.max],
                            'День 6',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [6, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [6, 1, entry.max],
                                params.tz4.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [6, 1, entry.max],
                                params.tz4.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [6, 2, entry.max],
                                params.tz4.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [6, 2, entry.max],
                                params.tz4.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 7', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [7, entry.max],
                                params.tz5.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [7, entry.max],
                            'День 7',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [7, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [7, 1, entry.max],
                                params.tz5.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [7, 1, entry.max],
                                params.tz5.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [7, 2, entry.max],
                                params.tz5.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [7, 2, entry.max],
                                params.tz5.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [7, 3, entry.max],
                                params.tz5.intervals.start3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [7, 3, entry.max],
                                params.tz5.intervals.end3,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 8', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [8, entry.max],
                                params.tz6.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [8, entry.max],
                            'День 8',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [8, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [8, 1, entry.max],
                                params.tz6.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [8, 1, entry.max],
                                params.tz6.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [8, 2, entry.max],
                                params.tz6.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [8, 2, entry.max],
                                params.tz6.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [8, 3, entry.max],
                                params.tz6.intervals.start3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [8, 3, entry.max],
                                params.tz6.intervals.end3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 4', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [8, 4, entry.max],
                                params.tz6.intervals.start4,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 4', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [8, 4, entry.max],
                                params.tz6.intervals.end4,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 9', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [9, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [9, entry.max],
                            'День 9',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [9, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временного блока', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [9, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала День 10', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [10, entry.max],
                                'Всегда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [10, entry.max],
                            'День 10',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [10, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [10, 1, entry.max],
                                '00:00',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [10, 1, entry.max],
                                '23:59',
                                page.accessTemplateScheduleChangePage)
                        })


                    });

                    describe('Проверка интервала День 11', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [11, entry.max],
                                params.tz1.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [11, entry.max],
                            'День 11',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [11, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [11, 1, entry.max],
                                params.tz1.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [11, 1, entry.max],
                                params.tz1.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 12', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [12, entry.max],
                                params.tz2.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [12, entry.max],
                            'День 12',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [12, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [12, 1, entry.max],
                                params.tz2.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [12, 1, entry.max],
                                params.tz2.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 13', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [13, entry.max],
                                params.tz3.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [13, entry.max],
                            'День 13',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [13, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [13, 1, entry.max],
                                params.tz3.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [13, 1, entry.max],
                                params.tz3.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 14', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [14, entry.max],
                                params.tz4.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [14, entry.max],
                            'День 14',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [14, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [14, 1, entry.max],
                                params.tz4.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [14, 1, entry.max],
                                params.tz4.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [14, 2, entry.max],
                                params.tz4.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [14, 2, entry.max],
                                params.tz4.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 15', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [15, entry.max],
                                params.tz5.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [15, entry.max],
                            'День 15',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [15, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [15, 1, entry.max],
                                params.tz5.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [15, 1, entry.max],
                                params.tz5.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [15, 2, entry.max],
                                params.tz5.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [15, 2, entry.max],
                                params.tz5.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [15, 3, entry.max],
                                params.tz5.intervals.start3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [15, 3, entry.max],
                                params.tz5.intervals.end3,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 16', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [16, entry.max],
                                params.tz6.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [16, entry.max],
                            'День 16',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [16, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [16, 1, entry.max],
                                params.tz6.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [16, 1, entry.max],
                                params.tz6.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [16, 2, entry.max],
                                params.tz6.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [16, 2, entry.max],
                                params.tz6.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [16, 3, entry.max],
                                params.tz6.intervals.start3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [16, 3, entry.max],
                                params.tz6.intervals.end3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 4', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [16, 4, entry.max],
                                params.tz6.intervals.start4,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 4', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [16, 4, entry.max],
                                params.tz6.intervals.end4,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 17', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [17, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [17, entry.max],
                            'День 17',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [17, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временного блока', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [17, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала День 18', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [18, entry.max],
                                'Всегда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [18, entry.max],
                            'День 18',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [18, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [18, 1, entry.max],
                                '00:00',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [18, 1, entry.max],
                                '23:59',
                                page.accessTemplateScheduleChangePage)
                        })


                    });

                    describe('Проверка интервала День 19', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [19, entry.max],
                                params.tz1.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [19, entry.max],
                            'День 19',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [19, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [19, 1, entry.max],
                                params.tz1.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [19, 1, entry.max],
                                params.tz1.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 20', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [20, entry.max],
                                params.tz2.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [20, entry.max],
                            'День 20',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [20, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [20, 1, entry.max],
                                params.tz2.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [20, 1, entry.max],
                                params.tz2.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 21', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [21, entry.max],
                                params.tz3.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [21, entry.max],
                            'День 21',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [21, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [21, 1, entry.max],
                                params.tz3.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [21, 1, entry.max],
                                params.tz3.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 22', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [22, entry.max],
                                params.tz4.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [22, entry.max],
                            'День 22',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [22, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [22, 1, entry.max],
                                params.tz4.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [22, 1, entry.max],
                                params.tz4.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [22, 2, entry.max],
                                params.tz4.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [22, 2, entry.max],
                                params.tz4.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 23', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [23, entry.max],
                                params.tz5.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [23, entry.max],
                            'День 23',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [23, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [23, 1, entry.max],
                                params.tz5.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [23, 1, entry.max],
                                params.tz5.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [23, 2, entry.max],
                                params.tz5.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [23, 2, entry.max],
                                params.tz5.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [23, 3, entry.max],
                                params.tz5.intervals.start3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [23, 3, entry.max],
                                params.tz5.intervals.end3,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 24', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [24, entry.max],
                                params.tz6.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [24, entry.max],
                            'День 24',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [24, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [24, 1, entry.max],
                                params.tz6.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [24, 1, entry.max],
                                params.tz6.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [24, 2, entry.max],
                                params.tz6.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [24, 2, entry.max],
                                params.tz6.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [24, 3, entry.max],
                                params.tz6.intervals.start3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 3', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [24, 3, entry.max],
                                params.tz6.intervals.end3,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 4', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [24, 4, entry.max],
                                params.tz6.intervals.start4,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 4', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [24, 4, entry.max],
                                params.tz6.intervals.end4,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 25', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [25, entry.max],
                                'Никогда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [25, entry.max],
                            'День 25',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [25, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие временного блока', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                                [25, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала День 26', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [26, entry.max],
                                'Всегда',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [26, entry.max],
                            'День 26',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [26, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [26, 1, entry.max],
                                '00:00',
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [26, 1, entry.max],
                                '23:59',
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала День 27', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [27, entry.max],
                                params.tz1.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [27, entry.max],
                            'День 27',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [27, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [27, 1, entry.max],
                                params.tz1.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [27, 1, entry.max],
                                params.tz1.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })

                    });

                    describe('Проверка интервала День 28', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [28, entry.max],
                                params.tz2.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [28, entry.max],
                            'День 28',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [28, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [28, 1, entry.max],
                                params.tz2.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [28, 1, entry.max],
                                params.tz2.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 29', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [29, entry.max],
                                params.tz3.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [29, entry.max],
                            'День 29',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [29, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [29, 1, entry.max],
                                params.tz3.intervals.start,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [29, 1, entry.max],
                                params.tz3.intervals.end,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Проверка интервала День 30', () => {

                        it('Назавание', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [30, entry.max],
                                params.tz4.name,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [30, entry.max],
                            'День 30',
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.interval,
                                [30, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [30, 1, entry.max],
                                params.tz4.intervals.start1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 1', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [30, 1, entry.max],
                                params.tz4.intervals.end1,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Начало временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [30, 2, entry.max],
                                params.tz4.intervals.start2,
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Окончание временного блока 2', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [30, 2, entry.max],
                                params.tz4.intervals.end2,
                                page.accessTemplateScheduleChangePage)
                        })
                    })

                });

                describe('Удаление тестовых данных', () => {

                    bef();

                    aft();

                    it('Удаление тестовых данных', async () => {
                        const cook = await page.base.getCookie('token');

                        const stz = await api.getAccessSchedules({type: 3}, cook.text);
                        const filterStz = accessShFilter(JSON.parse(stz.text));
                        await dec.simple(api.deleteAccessSchedule,
                            [filterStz, cook.text],
                            api.deleteAccessSchedule);

                        const tz = await api.getAccessSchedules({type: 1}, cook.text);
                        const filterTZ = accessShFilter(JSON.parse(tz.text).intervals);
                        await dec.simple(api.deleteAccessSchedule,
                            [filterTZ, cook.text],
                            api.deleteAccessSchedule)
                    })

                });

            });

    // Попытка добавления без всех обязательных параметров.
    const STZNoParams = () =>

        describe('Скользящий посуточный график. Добавление. Попытка добавления без всех обязательных параметров',
            () => {

            describe('Добавление', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Выбор значения "Скользящий посуточный график" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Скользящий посуточный график', entry.max],
                        el.select));

                it('Кнопка "Сохранить изменения" - заблокирована', async () => await dec.simple(el.button.disabled,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simpleFalse(el.button.handlerNoActive,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение "title", "url" не изменилось',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage))

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отобраюжение в таблице 3 строки', async () => await dec.simple(el.table.size,
                    [3, entry.max],
                    el.table))
            })

        });

    // Попытка добавления без названия.
    const STZNoName = () =>
        describe('Скользящий посуточный график. Добавление. Попытка добавления без "Название"', () => {

            describe('Добавление', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Выбор значения "Скользящий посуточный график" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Скользящий посуточный график', entry.max],
                        el.select));

                it('Нажатие кнопки "Добавить"', async () => dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Кнопка "Сохранить изменения" - заблокирована', async () => await dec.simple(el.button.disabled,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simpleFalse(el.button.handlerNoActive,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение "title", "url" не изменилось',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage))

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отобраюжение в таблице 3 строки', async () => await dec.simple(el.table.size,
                    [3, entry.max],
                    el.table))
            })
        });

    // Попытка добавления без интервала.
    const STZNoInterval = () => describe('Скользящий посуточный график. Добавление. Попытка добавления без интервала.',
        () => {
            const params = {
                name: 'STZNoInterval',
                error: 'Не указано ни одного суточного графика'
            };

            describe('Добавление', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Выбор значения "Скользящий посуточный график" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Скользящий посуточный график', entry.max],
                        el.select));

                it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.name, entry.max],
                    el.input));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображене ошибки', async () => await dec.simple(el.error.error,
                    [params.error, entry.max],
                    el.error))
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отобраюжение в таблице 3 строки', async () => await dec.simple(el.table.size,
                    [3, entry.max],
                    el.table))
            })
        });

    // Попытка добавить 31 день.
    const STZFailedInterval = () => describe('Скользящий посуточный график. Добавление. Попытка добавить 31 день.',
        () => {
            const params = {
                name: 'STZFailedInterval',
            };

            describe('Добавление', () => {

                bef();

                aft();

                describe('Добавление общий параметров', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Выбор значения "Скользящий посуточный график" в поле выбора "Временной критерий"',
                        async () => await dec.simple(el.select.iconXpand,
                            ['Временной критерий', '', 'Скользящий посуточный график', entry.max],
                            el.select));

                    it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                        ['Название', '', params.name, entry.max],
                        el.input))
                });

                describe('Добавление интервала День 1', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })

                });

                describe('Добавление интервала День 2', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 3', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 4', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 5', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 6', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 7', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 8', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 9', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 10', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 11', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 12', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 13', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 14', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 15', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 16', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 17', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 18', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 19', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 20', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 21', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 22', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 23', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 24', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 25', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 26', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 27', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 28', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 29', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавление интервала День 30', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Добавлние интервала День 31', () => {

                    it('Кнопка "Добавить" - заблокирована', async () => await dec.simple(el.butIcBefore.disabled,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Нажатие кнопки "Добавить"', async () => await dec.simpleFalse(el.butIcBefore.handler,
                        [but.add, entry.min],
                        el.butIcBefore));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })
                });

                describe('Сохранение', () => {

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                        ['Сохранено успешно', entry.max],
                        el.success))
                });

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                    [1, entry.max],
                    el.table));

                it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.name,
                    el.table));

                it('Проверка столбца "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Скользящий посуточный график',
                    el.table))
            });

            describe('Проверка параметров', () => {

                bef();

                aft();

                describe('Проверка общих праметров', () => {

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.name, entry.max],
                        el.input));

                    it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                        [entry.max],
                        el.table));

                    it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                        [1, entry.max],
                        el.table));

                    it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.edit, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                        ['Название', '', entry.max],
                        params.name,
                        el.input));

                    it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                        ['Описание', '', entry.max],
                        '',
                        el.input));

                    it('Проверка "Дата начала смены"', async () => {
                        const date = new Date().toISOString().slice(0, 10);
                        await dec.simpleText(el.input.getValue,
                            ['Дата начала смены', '', entry.max],
                            date,
                            el.input)
                    });

                    it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                        ['Временной критерий', 'Скользящий посуточный график', entry.max],
                        'Скользящий посуточный график',
                        el.input))
                });

                describe('Проверка интервала День 1', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [1, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'День 1',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала День 2', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [2, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [2, entry.max],
                        'День 2',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [2, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [2, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала День 3', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [3, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [3, entry.max],
                        'День 3',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [3, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [3, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала День 4', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [4, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [4, entry.max],
                        'День 4',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [4, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [4, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 5', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [5, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [5, entry.max],
                        'День 5',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [5, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [5, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 6', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [6, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [6, entry.max],
                        'День 6',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [6, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [6, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 7', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [7, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [7, entry.max],
                        'День 7',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [7, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [7, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 8', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [8, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [8, entry.max],
                        'День 8',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [8, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [4, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала День 9', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [9, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [9, entry.max],
                        'День 9',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [9, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [9, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала День 10', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [10, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [10, entry.max],
                        'День 10',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [10, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [10, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала День 11', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [11, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [11, entry.max],
                        'День 11',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [11, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [11, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 12', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [12, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [12, entry.max],
                        'День 12',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [12, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [12, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 13', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [13, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [13, entry.max],
                        'День 13',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [13, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [13, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 14', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [14, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [14, entry.max],
                        'День 14',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [14, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [14, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 15', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [15, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [15, entry.max],
                        'День 15',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [15, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [15, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 16', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [16, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [16, entry.max],
                        'День 16',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [16, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [15, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала День 17', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [17, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [17, entry.max],
                        'День 17',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [17, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [17, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала День 18', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [18, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [18, entry.max],
                        'День 18',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [18, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [18, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала День 19', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [19, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [19, entry.max],
                        'День 19',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [19, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [19, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 20', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [20, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [20, entry.max],
                        'День 20',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [20, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [20, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 21', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [21, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [21, entry.max],
                        'День 21',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [21, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [21, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 22', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [22, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [22, entry.max],
                        'День 22',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [22, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [22, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 23', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [23, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [23, entry.max],
                        'День 23',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [23, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [23, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 24', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [24, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [24, entry.max],
                        'День 24',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [24, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [24, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 25', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [25, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [25, entry.max],
                        'День 25',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [25, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [25, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала День 26', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [26, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [26, entry.max],
                        'День 26',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [26, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [26, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала День 27', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [27, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [27, entry.max],
                        'День 27',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [27, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [27, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 28', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [28, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [28, entry.max],
                        'День 28',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [28, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [28, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 29', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [29, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [29, entry.max],
                        'День 29',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [29, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [29, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала День 30', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [30, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [30, entry.max],
                        'День 30',
                        page.accessTemplateScheduleChangePage));

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [30, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временного блока', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [30, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка отсутствия интервала День 31', () => {

                    it('Отсутствие интервала', async () => {
                        await dec.simpleFalse(page.accessTemplateScheduleChangePage.interval,
                            [31, entry.min],
                            page.accessTemplateScheduleChangePage)
                    })
                })

            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('Удаление тестовых данных', async () => {
                    const cook = await page.base.getCookie('token');

                    const stz = await api.getAccessSchedules({type: 3}, cook.text);
                    const filterStz = accessShFilter(JSON.parse(stz.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterStz, cook.text],
                        api.deleteAccessSchedule)
                })

            });
        });

    // Попытка дублирования "Название", "Описание" и "Временной критерий" — "Недельный график"
    const STZDuplicateSTZ = () =>
        describe('Скользящий посуточный график. Добавление. Попытка дублирования "Название", "Описание" и ' +
            '"Временной критерий" — "Скользящий посуточный график".', () => {

            const params = {
                name: 'STZDuplicateSTZName',
                description: 'STZDuplicateSTZDescription',
                date: '2001-01-01',
                error: 'Такое название уже используется',
            };

            describe('API - добавление', () => {

                bef();

                aft();

                it('Добавление скользящего посуточного графика', async () => {
                    const cook = await page.base.getCookie('token');
                    const stz = {
                        name: params.name,
                        comment: params.description,
                        begin_date: params.date,
                        items: {days: [{id: 1}]}
                    };
                    await dec.simple(api.putArraySTZ,
                        [[stz], cook.text],
                        api.putArraySTZ)
                })

            });

            describe('Добавление', () => {

                bef();

                aft();

                describe('Добавление общий параметров', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Выбор значения "Скользящий посуточный график" в поле выбора "Временной критерий"',
                        async () => await dec.simple(el.select.iconXpand,
                            ['Временной критерий', '', 'Скользящий посуточный график', entry.max],
                            el.select));

                    it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                        ['Название', '', params.name, entry.max],
                        el.input));

                    it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                        ['Описание', '', params.description, entry.max],
                        el.input))
                });

                describe('Добавление интервала День 1', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })

                });

                describe('Сохранение', () => {

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение ошибки', async () => await dec.simple(el.error.error,
                        [params.error, entry.max],
                        el.error))
                })

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table))

            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('Удаление тестовых данных', async () => {
                    const cook = await page.base.getCookie('token');

                    const stz = await api.getAccessSchedules({type: 3}, cook.text);
                    const filterStz = accessShFilter(JSON.parse(stz.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterStz, cook.text],
                        api.deleteAccessSchedule)
                })

            });

        });

    // Дублирования "Название", "Описание" и "Временной критерий" — "Временные зоны", "Недельный график",
    // "Скользящий понедельный график".
    const STZDuplicateTZKsWsWK = () =>
        describe('Скользящий посуточный график. Добавление. Дублирования "Название", "Описание" и ' +
            '"Временной критерий" —Временные зоны", "Недельный график", "Скользящий понедельный график".', () => {

            const params = {
                name: 'STZDuplicateTZKsWsWKName',
                description: 'STZDuplicateTZKsWsWKDescription',
                date: '2001-01-01',
                error: 'Такое название уже используется',
            };

            describe('API - добавление', () => {

                bef();

                aft();

                it('Добавление временную зону', async () => {
                    const cook = await page.base.getCookie('token');
                    const tz = {
                        name: params.name,
                        comment: params.description,
                        items: [{
                            begin: 0,
                            end: 10000
                        }]
                    };
                    await dec.simple(api.putArrayTimeZone,
                        [[tz], cook.text],
                        api.putArrayTimeZone)
                });

                it('Добавление недельного графика', async () => {
                    const cook = await page.base.getCookie('token');
                    const week = {
                        name: params.name,
                        comment: params.description,
                        items: {
                            days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                            holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                                {dayId: 1}]
                        }
                    };
                    await dec.simple(api.putArrayWeek,
                        [[week], cook.text],
                        api.putArrayWeek)
                });

                it('Добавление скользящего понедельного графика', async () => {
                    const cook = await page.base.getCookie('token');
                    const get = await api.getAccessSchedules({type: 2}, cook.text);
                    const parse = JSON.parse(get.text);
                    const sw = {
                        name: params.name,
                        comment: params.description,
                        begin_date: params.date,
                        items: [parse[0]['id']]
                    };
                    await dec.simple(api.putArraySW,
                        [[sw], cook.text],
                        api.putArraySW)
                })

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 6 строк', async () => await dec.simple(el.table.size,
                    [6, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 3 строки', async () => await dec.simple(el.table.size,
                    [3, entry.max],
                    el.table))

            });

            describe('Добавление', () => {

                bef();

                aft();

                describe('Добавление общий параметров', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Выбор значения "Скользящий посуточный график" в поле выбора "Временной критерий"',
                        async () => await dec.simple(el.select.iconXpand,
                            ['Временной критерий', '', 'Скользящий посуточный график', entry.max],
                            el.select));

                    it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                        ['Название', '', params.name, entry.max],
                        el.input));

                    it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                        ['Описание', '', params.description, entry.max],
                        el.input))
                });

                describe('Добавление интервала День 1', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображенение модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.init,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Отображение интервала', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.interval,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие по интервалу', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                            [1, entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Интервал выделен', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    });

                    it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                        ['Применить', entry.max],
                        el.button));

                    it('Отсутствие модального окна выборы временной зоны', async () => {
                        await dec.simple(el.modal.timeZoneModalSelect.initClose,
                            [entry.max],
                            el.modal.timeZoneModalSelect)
                    })

                });

                describe('Сохранение', () => {

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                        ['Сохранено успешно', entry.max],
                        el.success))
                })

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 7 строк', async () => await dec.simple(el.table.size,
                    [7, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));

                it('Удаление LocalStorage', async () => await dec.simple(page.base.clearLocalStorage,
                    [],
                    page.base))

            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('API запрос на удаление', async () => {
                    const cook = await page.base.getCookie('token');

                    const sw = await api.getAccessSchedules({type: 4}, cook.text);
                    const filterSW = accessShFilter(JSON.parse(sw.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterSW, cook.text],
                        api.deleteAccessSchedule);

                    const stz = await api.getAccessSchedules({type: 3}, cook.text);
                    const filterSTZ = accessShFilter(JSON.parse(stz.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterSTZ, cook.text],
                        api.deleteAccessSchedule);

                    const w = await api.getAccessSchedules({type: 2}, cook.text);
                    const filterW = accessShFilter(JSON.parse(w.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterW, cook.text],
                        api.deleteAccessSchedule);

                    const tz = await api.getAccessSchedules({type: 1}, cook.text);
                    const filterTZ = accessShFilter(JSON.parse(tz.text).intervals);
                    await dec.simple(api.deleteAccessSchedule,
                        [filterTZ, cook.text],
                        api.deleteAccessSchedule)
                })
            })
        });

    // Проверки добавления временные критерии - "Скользящий посуточный график"
    const STZ = () => describe('Проверки добавления временные критерии - "Скользящий посуточный график"', () => {
        STZMinParams();
        STZMinEditInterval();
        STZMinRemoveInterval();
        STZMaxParams();
        STZNoParams();
        STZNoName();
        STZNoInterval();
        STZFailedInterval();
        STZDuplicateSTZ();
        STZDuplicateTZKsWsWK();
    });

    // Скользящий понедельный график
    // Минимальное количество параметров.
    const SWMinParams = () =>
        describe('Скользящий понедельный график. Добавление. Минимальное количество параметров.', () => {

            const params = {
                name: 'SWMinParams',
                nameWeek: 'week',
            };

            describe('API - добавление', () => {

                bef();

                aft();

                it('Добавление недельного графика', async () => {
                    const cook = await page.base.getCookie('token');
                    const w = {
                        name: params.nameWeek,
                        items: {
                            days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                            holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                                {dayId: 1}]
                        }
                    };
                    await dec.simple(api.putArrayWeek,
                        [[w], cook.text],
                        api.putArrayWeek)
                })

            });

            describe('Добавление', () => {

                bef();

                aft();

                describe('Добавление общий параметров', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Выбор значения "Скользящий понедельный график" в поле выбора "Временной критерий"',
                        async () => await dec.simple(el.select.iconXpand,
                            ['Временной критерий', '', 'Скользящий понедельный график', entry.max],
                            el.select));

                    it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                        ['Название', '', params.name, entry.max],
                        el.input))
                });

                describe('Добавление недели', () => {

                    it('Нажатие кнопки "Добавить"', async () => {

                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [1, entry.max],
                            params.nameWeek,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Сохранение', () => {

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                        ['Сохранено успешно', entry.max],
                        el.success))
                });
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 5 строк', async () => await dec.simple(el.table.size,
                    [5, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                    [1, entry.max],
                    el.table));

                it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.name,
                    el.table));

                it('Проверка столбца "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    '',
                    el.table));

                it('Проверка столбца "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Скользящий понедельный график',
                    el.table))
            });

            describe('Проверка параметров', () => {

                bef();

                aft();

                describe('Проверка общих праметров', () => {

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.name, entry.max],
                        el.input));

                    it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                        [entry.max],
                        el.table));

                    it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                        [1, entry.max],
                        el.table));

                    it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.edit, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                        ['Название', '', entry.max],
                        params.name,
                        el.input));

                    it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                        ['Описание', '', entry.max],
                        '',
                        el.input));

                    it('Проверка "Дата начала смены"', async () => {
                        const date = new Date().toISOString().slice(0, 10);
                        await dec.simpleText(el.input.getValue,
                            ['Дата начала смены', '', entry.max],
                            date,
                            el.input)
                    });

                    it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                        ['Временной критерий', 'Скользящий понедельный график', entry.max],
                        'Скользящий понедельный график',
                        el.input))
                });

                describe('Проверка списка недель для выбора', () => {

                    it('Отображение 1 недели в списке',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.sWeekList,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Имя недели 1', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekName,
                        [1, entry.max],
                        params.nameWeek,
                        page.accessTemplateScheduleChangePage))

                });

                describe('Проверка списка выбранных недель', () => {

                    it('Отображение 1 недели в списке',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.sWeekSelectedList,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Имя недели 1',
                        async () => await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [1, entry.max],
                            params.nameWeek,
                            page.accessTemplateScheduleChangePage))
                })

            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('Удаление скользящих понедельных данных', async () => {
                    const cook = await page.base.getCookie('token');
                    const sw = await api.getAccessSchedules({type: 4}, cook.text);
                    const filterSW = accessShFilter(JSON.parse(sw.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterSW, cook.text],
                        api.deleteAccessSchedule)
                });

                it('Удаление недельных графиков', async () => {
                    const cook = await page.base.getCookie('token');
                    const w = await api.getAccessSchedules({type: 2}, cook.text);
                    const filterW = accessShFilter(JSON.parse(w.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterW, cook.text],
                        api.deleteAccessSchedule)
                })

            });

        });

    // Минимальное количество параметров -  с удалением недели.
    const SWMinParamsDeleteWeek = () =>
        describe('Скользящий понедельный график. Добавление. Минимальное количество параметров - с удалением недели.',
            () => {

                const params = {
                    name: 'SWMinParamsDeleteWeek',
                    week1: 'week1',
                    week2: 'week2',
                };

                describe('API - добавление', () => {

                    bef();

                    aft();

                    it('Добавление недельных графиков', async () => {
                        const cook = await page.base.getCookie('token');
                        const w1 = {
                            name: params.week1,
                            items: {
                                days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                                holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                                    {dayId: 1}]
                            }
                        };

                        const w2 = {
                            name: params.week2,
                            items: {
                                days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                                holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                                    {dayId: 1}]
                            }
                        };

                        await dec.simple(api.putArrayWeek,
                            [[w1], cook.text],
                            api.putArrayWeek);

                        await dec.simple(api.putArrayWeek,
                            [[w2], cook.text],
                            api.putArrayWeek)
                    })

                });

                describe('Добавление', () => {

                    bef();

                    aft();

                    describe('Добавление общий параметров', () => {

                        it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.add, entry.max],
                            el.butIcBefore));

                        it('Отображение "title", "url"',
                            async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                                [entry.max],
                                page.accessTemplateScheduleChangePage));

                        it('Выбор значения "Скользящий понедельный график" в поле выбора "Временной критерий"',
                            async () => await dec.simple(el.select.iconXpand,
                                ['Временной критерий', '', 'Скользящий понедельный график', entry.max],
                                el.select));

                        it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                            ['Название', '', params.name, entry.max],
                            el.input))
                    });

                    describe('Добавление недели 1', () => {

                        it('Нажатие кнопки "Добавить" неделю 1', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                                [1, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображение недели в списки выбранных', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                                [1, entry.max],
                                params.week1,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Добавление недели 2', () => {

                        it('Нажатие кнопки "Добавить" неделю 2', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                                [2, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отображение недели в списки выбранных', async () => {
                            await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                                [2, entry.max],
                                params.week2,
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Удаление недели 2', () => {

                        it('Нажатие кнопки "Удалить" неделю 2', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.sWeekSelectedHandler,
                                [2, entry.max],
                                page.accessTemplateScheduleChangePage)
                        });

                        it('Отсутствие недели в списки выбранных', async () => {
                            await dec.simple(page.accessTemplateScheduleChangePage.sWeekSelectedList,
                                [1, entry.max],
                                page.accessTemplateScheduleChangePage)
                        })
                    });

                    describe('Сохранение', () => {

                        it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                            ['Сохранить изменения', entry.max],
                            el.button));

                        it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                            ['Сохранено успешно', entry.max],
                            el.success))
                    })
                });

                describe('Проверка таблицы', () => {

                    bef();

                    aft();

                    it('Отображение в таблице 6 строк', async () => await dec.simple(el.table.size,
                        [6, entry.max],
                        el.table));

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.name, entry.max],
                        el.input));

                    it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                        [1, entry.max],
                        el.table));

                    it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Название', 1, 1, entry.max],
                        params.name,
                        el.table));

                    it('Проверка столбца "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Описание', 1, 2, entry.max],
                        '',
                        el.table));

                    it('Проверка столбца "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                        ['Тип', 1, 3, entry.max],
                        'Скользящий понедельный график',
                        el.table))
                });

                describe('Проверка параметров', () => {

                    bef();

                    aft();

                    describe('Проверка общих праметров', () => {

                        it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                            ['', 'Поиск...', params.name, entry.max],
                            el.input));

                        it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                            [entry.max],
                            el.table));

                        it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                            [1, entry.max],
                            el.table));

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.edit, entry.max],
                            el.butIcBefore));

                        it('Отображение "title", "url"',
                            async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                                [entry.max],
                                page.accessTemplateScheduleChangePage));

                        it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                            ['Название', '', entry.max],
                            params.name,
                            el.input));

                        it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                            ['Описание', '', entry.max],
                            '',
                            el.input));

                        it('Проверка "Дата начала смены"', async () => {
                            const date = new Date().toISOString().slice(0, 10);
                            await dec.simpleText(el.input.getValue,
                                ['Дата начала смены', '', entry.max],
                                date,
                                el.input)
                        });

                        it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                            ['Временной критерий', 'Скользящий понедельный график', entry.max],
                            'Скользящий понедельный график',
                            el.input))
                    });

                    describe('Проверка списка недель для выбора', () => {

                        it('Отображение 2 недели в списке',
                            async () => await dec.simple(page.accessTemplateScheduleChangePage.sWeekList,
                                [2, entry.max],
                                page.accessTemplateScheduleChangePage));

                        it('Имя недели 1',
                            async () => await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekName,
                                [1, entry.max],
                                params.week1,
                                page.accessTemplateScheduleChangePage));

                        it('Имя недели 2',
                            async () => await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekName,
                                [2, entry.max],
                                params.week2,
                                page.accessTemplateScheduleChangePage))

                    });

                    describe('Проверка списка выбранных недель', () => {

                        it('Отображение 1 недели в списке',
                            async () => await dec.simple(page.accessTemplateScheduleChangePage.sWeekSelectedList,
                                [1, entry.max],
                                page.accessTemplateScheduleChangePage));

                        it('Имя недели 1',
                            async () => await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                                [1, entry.max],
                                params.week1,
                                page.accessTemplateScheduleChangePage))

                    });

                });

                describe('Удаление тестовых данных', () => {

                    bef();

                    aft();

                    it('Удаление скользящих понедельных данных', async () => {
                        const cook = await page.base.getCookie('token');
                        const sw = await api.getAccessSchedules({type: 4}, cook.text);
                        const filterSW = accessShFilter(JSON.parse(sw.text));
                        await dec.simple(api.deleteAccessSchedule,
                            [filterSW, cook.text],
                            api.deleteAccessSchedule)
                    });

                    it('Удаление недельных графиков', async () => {
                        const cook = await page.base.getCookie('token');
                        const w = await api.getAccessSchedules({type: 2}, cook.text);
                        const filterW = accessShFilter(JSON.parse(w.text));
                        await dec.simple(api.deleteAccessSchedule,
                            [filterW, cook.text],
                            api.deleteAccessSchedule)
                    })

                });

            });

    // Максимальное количество параметров.
    const SWMaxParams = () => describe('Скользящий понедельный график. Добавление. Максимальное количество параметров.',
        () => {

            const params = {
                name: 'SWMaxParamsName',
                description: 'SWMaxParamsDescription',
                date: '2022-01-01',
                objDate: {
                    day: '1',
                    month: 'Январь',
                    year: '2022',
                },
                tz: {
                    name: 'tz',
                    items: [{begin: 0, end: 86340}]
                },
            };

            describe('API - добавление', () => {

                bef();

                aft();

                it('Добавление временной зоны', async () => {
                    const cook = await page.base.getCookie('token');

                    await dec.simple(api.putArrayTimeZone,
                        [[params.tz], cook.text],
                        api.putArrayTimeZone)
                });

                it('Добавление недельных графиков', async () => {
                    const cook = await page.base.getCookie('token');
                    const get = await api.getAccessSchedules({type: 1}, cook.text);
                    const tz = JSON.parse(get.text).intervals;
                    const items = {
                        days: [{id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']}],
                        holidays: [{dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']}]
                    };

                    const weeks = [...Array(52).keys()].map(item => {
                        return {
                            name: 'week' + (item + 1),
                            items
                        }
                    });

                    await dec.simple(api.putArrayWeek,
                        [weeks, cook.text],
                        api.putArrayWeek)
                });

            });

            describe('Добавление', () => {

                bef();

                aft();

                describe('Добавление общий параметров', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Выбор значения "Скользящий понедельный график" в поле выбора "Временной критерий"',
                        async () => await dec.simple(el.select.iconXpand,
                            ['Временной критерий', '', 'Скользящий понедельный график', entry.max],
                            el.select));

                    it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                        ['Название', '', params.name, entry.max],
                        el.input));

                    it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                        ['Описание', '', params.description, entry.max],
                        el.input));

                    it('Выбор "Дата начала смены"', async () => {

                        await dec.simple(el.input.handler,
                            ['Дата начала смены', '', entry.max],
                            el.input);

                        await dec.simple(el.datepicker.dateParse,
                            [params.objDate, entry.max],
                            el.datepicker)

                    })
                });

                describe('Добавление недели 1', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(1, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [1, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 2', () => {

                    it('Нажатие кнопки "Добавить" неделю 2', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [2, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(2, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [2, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 3', () => {

                    it('Нажатие кнопки "Добавить" неделю 3', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [3, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(3, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [3, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 4', () => {

                    it('Нажатие кнопки "Добавить" неделю 4', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [4, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(4, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [4, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 5', () => {

                    it('Нажатие кнопки "Добавить" неделю 5', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [5, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(5, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [5, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 6', () => {

                    it('Нажатие кнопки "Добавить" неделю 6', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [6, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(6, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [6, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 7', () => {

                    it('Нажатие кнопки "Добавить" неделю 7', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [7, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(7, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [7, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 8', () => {

                    it('Нажатие кнопки "Добавить" неделю 8', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [8, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(8, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [8, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 9', () => {

                    it('Нажатие кнопки "Добавить" неделю 9', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [9, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(9, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [9, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 10', () => {

                    it('Нажатие кнопки "Добавить" неделю 10', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [10, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(10, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [10, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 11', () => {

                    it('Нажатие кнопки "Добавить" неделю 11', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [11, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(11, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [11, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 12', () => {

                    it('Нажатие кнопки "Добавить" неделю 12', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [12, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(12, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [12, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 13', () => {

                    it('Нажатие кнопки "Добавить" неделю 13', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [13, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(13, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [13, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 14', () => {

                    it('Нажатие кнопки "Добавить" неделю 14', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [14, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(14, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [14, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 15', () => {

                    it('Нажатие кнопки "Добавить" неделю 15', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [15, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(15, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [15, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 16', () => {

                    it('Скролл списка недель для выбора', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekScroll,
                            [],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Нажатие кнопки "Добавить" неделю 16', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [16, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(16, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [16, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 17', () => {

                    it('Нажатие кнопки "Добавить" неделю 17', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [17, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(17, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [17, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 18', () => {

                    it('Нажатие кнопки "Добавить" неделю 18', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [18, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(18, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [18, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 19', () => {

                    it('Нажатие кнопки "Добавить" неделю 19', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [19, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(19, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [19, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 20', () => {

                    it('Нажатие кнопки "Добавить" неделю 20', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [20, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(20, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [20, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 21', () => {

                    it('Нажатие кнопки "Добавить" неделю 21', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [21, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(21, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [21, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 22', () => {

                    it('Нажатие кнопки "Добавить" неделю 22', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [22, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(22, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [22, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 23', () => {

                    it('Нажатие кнопки "Добавить" неделю 23', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [23, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(23, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [23, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 24', () => {

                    it('Нажатие кнопки "Добавить" неделю 24', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [24, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(24, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [24, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 25', () => {

                    it('Нажатие кнопки "Добавить" неделю 25', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [25, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(25, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [25, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 26', () => {

                    it('Нажатие кнопки "Добавить" неделю 26', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [26, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(26, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [26, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 27', () => {

                    it('Нажатие кнопки "Добавить" неделю 27', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [27, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(27, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [27, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 28', () => {

                    it('Нажатие кнопки "Добавить" неделю 28', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [28, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(28, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [28, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 29', () => {

                    it('Нажатие кнопки "Добавить" неделю 29', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [29, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(29, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [29, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 30', () => {

                    it('Нажатие кнопки "Добавить" неделю 30', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [30, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(30, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [30, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 31', () => {

                    it('Скролл списка недель для выбора', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekScroll,
                            [],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Нажатие кнопки "Добавить" неделю 31', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [31, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(31, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [31, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 32', () => {

                    it('Нажатие кнопки "Добавить" неделю 32', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [32, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(32, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [32, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 33', () => {

                    it('Нажатие кнопки "Добавить" неделю 33', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [33, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(33, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [33, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 34', () => {

                    it('Нажатие кнопки "Добавить" неделю 34', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [34, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(34, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [34, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 35', () => {

                    it('Нажатие кнопки "Добавить" неделю 35', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [35, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(35, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [35, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 36', () => {

                    it('Нажатие кнопки "Добавить" неделю 36', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [36, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(36, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [36, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 37', () => {

                    it('Нажатие кнопки "Добавить" неделю 37', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [37, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(37, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [37, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 38', () => {

                    it('Нажатие кнопки "Добавить" неделю 38', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [38, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(38, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [38, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 39', () => {

                    it('Нажатие кнопки "Добавить" неделю 39', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [39, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(39, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [39, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 40', () => {

                    it('Нажатие кнопки "Добавить" неделю 40', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [40, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(40, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [40, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 41', () => {

                    it('Нажатие кнопки "Добавить" неделю 41', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [41, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(41, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [41, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 42', () => {

                    it('Нажатие кнопки "Добавить" неделю 42', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [42, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(42, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [42, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 43', () => {

                    it('Нажатие кнопки "Добавить" неделю 43', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [43, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(43, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [43, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 44', () => {

                    it('Нажатие кнопки "Добавить" неделю 44', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [44, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(44, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [44, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 45', () => {

                    it('Нажатие кнопки "Добавить" неделю 45', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [45, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(45, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [45, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 46', () => {

                    it('Скролл списка недель для выбора', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekScroll,
                            [],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Нажатие кнопки "Добавить" неделю 46', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [46, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(46, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [46, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 47', () => {

                    it('Нажатие кнопки "Добавить" неделю 47', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [47, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(47, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [47, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 48', () => {

                    it('Нажатие кнопки "Добавить" неделю 48', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [48, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(48, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [48, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 49', () => {

                    it('Нажатие кнопки "Добавить" неделю 49', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [49, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(49, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [49, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 50', () => {

                    it('Нажатие кнопки "Добавить" неделю 50', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [50, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(50, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [50, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 51', () => {

                    it('Нажатие кнопки "Добавить" неделю 51', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [51, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(51, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [51, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Добавление недели 52', () => {

                    it('Нажатие кнопки "Добавить" неделю 52', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [52, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(52, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [52, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Сохранение', () => {

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                        ['Сохранено успешно', entry.max],
                        el.success))
                })
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                    [1, entry.max],
                    el.table));

                it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.name,
                    el.table));

                it('Проверка столбца "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    params.description,
                    el.table));

                it('Проверка столбца "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Скользящий понедельный график',
                    el.table))
            });

            describe('Проверка параметров', () => {

                bef();

                aft();

                describe('Проверка общих праметров', () => {

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.name, entry.max],
                        el.input));

                    it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                        [entry.max],
                        el.table));

                    it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                        [1, entry.max],
                        el.table));

                    it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.edit, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                        ['Название', '', entry.max],
                        params.name,
                        el.input));

                    it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                        ['Описание', '', entry.max],
                        params.description,
                        el.input));

                    it('Проверка "Дата начала смены"', async () => await dec.simpleText(el.input.getValue,
                        ['Дата начала смены', '', entry.max],
                        params.date,
                        el.input));

                    it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                        ['Временной критерий', 'Скользящий понедельный график', entry.max],
                        'Скользящий понедельный график',
                        el.input))
                });

                describe('Проверка списка недель для выбора', () => {

                    it('Отображение 52 недели в списке',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.sWeekList,
                            [52, entry.max],
                            page.accessTemplateScheduleChangePage))
                });

                describe('Проверка списка выбранных недель', () => {

                    it('Отображение 52 недели в списке',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.sWeekSelectedList,
                            [52, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Название недели 1', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(1, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [1, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 2', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(2, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [2, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 3', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(3, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [3, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 4', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(4, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [4, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 5', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(5, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [5, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 6', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(6, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [6, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 7', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(7, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [7, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 8', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(8, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [8, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 9', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(9, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [9, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 10', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(10, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [10, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 11', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(11, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [11, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 12', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(12, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [12, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 13', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(13, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [13, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 14', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(14, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [14, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 15', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(15, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [15, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 16', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(16, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [16, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 17', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(17, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [17, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 18', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(18, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [18, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 19', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(19, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [19, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 20', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(20, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [20, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 21', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(21, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [21, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 22', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(22, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [22, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 23', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(23, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [23, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 24', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(24, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [24, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 25', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(25, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [25, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 26', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(26, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [26, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 27', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(27, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [27, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 28', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(28, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [28, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 29', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(29, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [29, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 30', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(30, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [30, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 31', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(31, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [31, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 32', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(32, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [32, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 33', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(33, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [33, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 34', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(34, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [34, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 35', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(35, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [35, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 36', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(36, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [36, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 37', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(37, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [37, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 38', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(38, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [38, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 39', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(39, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [39, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 41', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(41, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [41, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 42', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(42, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [42, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 43', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(43, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [43, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 44', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(44, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [44, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 45', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(45, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [45, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 46', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(46, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [46, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 47', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(47, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [47, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 48', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(48, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [48, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 49', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(49, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [49, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 50', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(50, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [50, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 50', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(50, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [50, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 51', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(51, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [51, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Название недели 52', async () => {
                        const week = await page.accessTemplateScheduleChangePage.sWeekName(52, entry.max);
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [52, entry.max],
                            week.text,
                            page.accessTemplateScheduleChangePage)
                    })

                });

            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('Удаление скользящих понедельных данных', async () => {
                    const cook = await page.base.getCookie('token');
                    const sw = await api.getAccessSchedules({type: 4}, cook.text);
                    const filterSW = accessShFilter(JSON.parse(sw.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterSW, cook.text],
                        api.deleteAccessSchedule)
                });

                it('Удаление недельных графиков', async () => {
                    const cook = await page.base.getCookie('token');
                    const w = await api.getAccessSchedules({type: 2}, cook.text);
                    const filterW = accessShFilter(JSON.parse(w.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterW, cook.text],
                        api.deleteAccessSchedule)
                });

                it('Удаление временных зон', async () => {
                    const cook = await page.base.getCookie('token');
                    const tz = await api.getAccessSchedules({type: 1}, cook.text);
                    const filterTZ = accessShFilter(JSON.parse(tz.text).intervals);
                    await dec.simple(api.deleteAccessSchedule,
                        [filterTZ, cook.text],
                        api.deleteAccessSchedule)
                })

            });

        });

    // Проверка "Поиск...".
    const SWSearch = () => describe('Скользящий понедельный график. Добавление. Проверка "Поиск...".', () => {

        const params = {
            name: 'SWSearch',
            week1: 'week1',
            week2: 'week2',
            week22: 'week22',
        };

        describe('API - добавление', () => {

            bef();

            aft();

            it('Добавление недельных графиков', async () => {
                const cook = await page.base.getCookie('token');

                const w1 = {
                    name: params.week1,
                    items: {
                        days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                        holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                            {dayId: 1}]
                    }
                };
                await dec.simple(api.putArrayWeek,
                    [[w1], cook.text],
                    api.putArrayWeek);

                const w2 = {
                    name: params.week2,
                    items: {
                        days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                        holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                            {dayId: 1}]
                    }
                };
                await dec.simple(api.putArrayWeek,
                    [[w2], cook.text],
                    api.putArrayWeek);

                const w3 = {
                    name: params.week22,
                    items: {
                        days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                        holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                            {dayId: 1}]
                    }
                };
                await dec.simple(api.putArrayWeek,
                    [[w3], cook.text],
                    api.putArrayWeek);

            });

        });

        describe('Добавление', () => {

            bef();

            aft();

            describe('Добавление общий параметров', () => {

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Выбор значения "Скользящий понедельный график" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Скользящий понедельный график', entry.max],
                        el.select));

                it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.name, entry.max],
                    el.input));
            });

            describe('Проверка недель в списке выбора недель', () => {

                it('Название неделя 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekName,
                        [1, entry.max],
                        params.week1,
                        page.accessTemplateScheduleChangePage);
                });

                it('Название неделя 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekName,
                        [2, entry.max],
                        params.week2,
                        page.accessTemplateScheduleChangePage);
                });

                it('Название неделя 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekName,
                        [3, entry.max],
                        params.week22,
                        page.accessTemplateScheduleChangePage);
                });
            });

            describe('Добавление недели с проверкой "Поиск..." c полным совпадением', () => {

                it('Отображение 3 недели в списке выбора недель', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.sWeekList,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.week1, entry.max],
                    el.input));

                it('Отображение 1 недели в списке выбора недель', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.sWeekList,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Название неделя 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekName,
                        [1, entry.max],
                        params.week1,
                        page.accessTemplateScheduleChangePage);
                });

                it('Нажатие кнопки "Добавить" неделю 1', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage);
                });

                it('Отображение 1 недели в списке выбранных недель', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.sWeekSelectedList,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage);
                });

                it('Название выбранной неделя 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                        [1, entry.max],
                        params.week1,
                        page.accessTemplateScheduleChangePage);
                });

                it('Удаление "Поиск..."', async () => await dec.simple(el.input.iconClear,
                    ['', 'Поиск...', entry.max],
                    el.input));

            });

            describe('Добавление недели с проверкой "Поиск..." c частичным совпадением', () => {

                it('Отображение 3 недели в списке выбора недель', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.sWeekList,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.week2, entry.max],
                    el.input));

                it('Отображение 2 недели в списке выбора недель', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.sWeekList,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Название неделя 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekName,
                        [1, entry.max],
                        params.week2,
                        page.accessTemplateScheduleChangePage);
                });

                it('Название неделя 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekName,
                        [2, entry.max],
                        params.week22,
                        page.accessTemplateScheduleChangePage);
                });

                it('Нажатие кнопки "Добавить" неделю 2', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage);
                });

                it('Отображение 2 недели в списке выбранных недель', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.sWeekSelectedList,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage);
                });

                it('Название выбранной неделя 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                        [2, entry.max],
                        params.week22,
                        page.accessTemplateScheduleChangePage);
                });

            });

            describe('Сохранение', () => {

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success));
            });

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 7 строк', async () => await dec.simple(el.table.size,
                [7, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Проверка столбца "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                '',
                el.table));

            it('Проверка столбца "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Скользящий понедельный график',
                el.table));
        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    '',
                    el.input));

                it('Проверка "Дата начала смены"', async () => {
                    const date = new Date().toISOString().slice(0, 10);
                    await dec.simpleText(el.input.getValue,
                        ['Дата начала смены', '', entry.max],
                        date,
                        el.input)
                });

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Скользящий понедельный график', entry.max],
                    'Скользящий понедельный график',
                    el.input));
            });

            describe('Проверка списка недель для выбора', () => {

                it('Отображение 3 недели в списке',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.sWeekList,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Название недели 1',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekName,
                        [1, entry.max],
                        params.week1,
                        page.accessTemplateScheduleChangePage));

                it('Название недели 2',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekName,
                        [2, entry.max],
                        params.week2,
                        page.accessTemplateScheduleChangePage));

                it('Название недели 3',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekName,
                        [3, entry.max],
                        params.week22,
                        page.accessTemplateScheduleChangePage));

            });

            describe('Проверка списка выбранных недель', () => {

                it('Отображение 2 недели в списке',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.sWeekSelectedList,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Название недели 1',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                        [1, entry.max],
                        params.week1,
                        page.accessTemplateScheduleChangePage));

                it('Название недели 2',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                        [2, entry.max],
                        params.week22,
                        page.accessTemplateScheduleChangePage));

            });

        });

        describe('Удаление тестовых данных', () => {

            bef();

            aft();

            it('Удаление скользящих понедельных данных', async () => {
                const cook = await page.base.getCookie('token');
                const sw = await api.getAccessSchedules({type: 4}, cook.text);
                const filterSW = accessShFilter(JSON.parse(sw.text));
                await dec.simple(api.deleteAccessSchedule,
                    [filterSW, cook.text],
                    api.deleteAccessSchedule);
            });

            it('Удаление недельных графиков', async () => {
                const cook = await page.base.getCookie('token');
                const w = await api.getAccessSchedules({type: 2}, cook.text);
                const filterW = accessShFilter(JSON.parse(w.text));
                await dec.simple(api.deleteAccessSchedule,
                    [filterW, cook.text],
                    api.deleteAccessSchedule);
            });

        });

    });

    // Попытка добавления без всех обязательных параметров.
    const SWNoParams = () =>
        describe('Скользящий понедельный график. Добавление. Попытка добавления без всех обязательных параметров.',
            () => {
                const params = {
                    week: 'week'
                };

                describe('API - добавление', () => {

                    bef();

                    aft();

                    it('Добавление недельного графика', async () => {
                        const cook = await page.base.getCookie('token');

                        const w = {
                            name: params.week,
                            items: {
                                days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                                holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                                    {dayId: 1}]
                            }
                        };
                        await dec.simple(api.putArrayWeek,
                            [[w], cook.text],
                            api.putArrayWeek);
                    });

                });

                describe('Проверка таблицы', () => {

                    bef();

                    aft();

                    it('Отобраюжение в таблице 4 строки', async () => await dec.simple(el.table.size,
                        [4, entry.max],
                        el.table));
                });

                describe('Добавление', () => {

                    bef();

                    aft();

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Выбор значения "Скользящий понедельный график" в поле выбора "Временной критерий"',
                        async () => await dec.simple(el.select.iconXpand,
                            ['Временной критерий', '', 'Скользящий понедельный график', entry.max],
                            el.select));

                    it('Кнопка "Сохранить изменения" - заблокирована', async () => await dec.simple(el.button.disabled,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simpleFalse(el.button.handlerNoActive,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение "title", "url" не изменилось',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                });

                describe('Проверка таблицы', () => {

                    bef();

                    aft();

                    it('Отобраюжение в таблице 4 строки', async () => await dec.simple(el.table.size,
                        [4, entry.max],
                        el.table));
                });

                describe('Удаление тестовых данных', () => {

                    bef();

                    aft();

                    it('Удаление недельных графиков', async () => {
                        const cook = await page.base.getCookie('token');
                        const w = await api.getAccessSchedules({type: 2}, cook.text);
                        const filterW = accessShFilter(JSON.parse(w.text));
                        await dec.simple(api.deleteAccessSchedule,
                            [filterW, cook.text],
                            api.deleteAccessSchedule);
                    });

                });

            });

    // Попытка создания без интервального блока.
    const SWNoInterval = () =>
        describe('Скользящий понедельный график. Добавление. Попытка добавления без интервального блока.', () => {

            const params = {
                name: 'SWNoInterval',
                error: 'Request validation failed: Parameter (body) failed schema validation'
            };

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отобраюжение в таблице 3 строки', async () => await dec.simple(el.table.size,
                    [3, entry.max],
                    el.table));
            });

            describe('Добавление', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.name, entry.max],
                    el.input));

                it('Выбор значения "Скользящий понедельный график" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Скользящий понедельный график', entry.max],
                        el.select));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение ошибки', async () => await dec.simple(el.error.error,
                    [params.error, entry.max],
                    el.error));

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отобраюжение в таблице 3 строки', async () => await dec.simple(el.table.size,
                    [3, entry.max],
                    el.table));
            });

        });

    // Попытка создания без ввода "Название".
    const SWNoName = () =>
        describe('Скользящий понедельный график. Добавление. Попытка создания без ввода "Название".', () => {

            const params = {
                week: 'week'
            };

            describe('API - добавление', () => {

                bef();

                aft();

                it('Добавление недельного графика', async () => {
                    const cook = await page.base.getCookie('token');

                    const w = {
                        name: params.week,
                        items: {
                            days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                            holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                                {dayId: 1}]
                        }
                    };
                    await dec.simple(api.putArrayWeek,
                        [[w], cook.text],
                        api.putArrayWeek);
                });

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отобраюжение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));
            });

            describe('Добавление', () => {

                bef();

                aft();

                it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Выбор значения "Скользящий понедельный график" в поле выбора "Временной критерий"',
                    async () => await dec.simple(el.select.iconXpand,
                        ['Временной критерий', '', 'Скользящий понедельный график', entry.max],
                        el.select));

                it('Отображение 1 недели в списке выбора недель',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.sWeekList,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка название недели 1 в списке выбора недель',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekName,
                        [1, entry.max],
                        params.week,
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Добавить" неделю 1',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                    [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Отображение 1 недели в списке выбранных недель',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.sWeekSelectedList,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка название выбранной недели 1',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                        [1, entry.max],
                        params.week,
                        page.accessTemplateScheduleChangePage));

                it('Кнопка "Сохранить изменения" - заблокирована', async () => await dec.simple(el.button.disabled,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simpleFalse(el.button.handlerNoActive,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение "title", "url" не изменилось',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отобраюжение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));
            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('Удаление недельных графиков', async () => {
                    const cook = await page.base.getCookie('token');
                    const w = await api.getAccessSchedules({type: 2}, cook.text);
                    const filterW = accessShFilter(JSON.parse(w.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterW, cook.text],
                        api.deleteAccessSchedule);
                });

            });

        });

    // Попытка добавления с 53 неделями.
    const SWFailedInterval = () =>
        describe('Скользящий понедельный график. Добавление. Попытка добавления с 53 неделями.', () => {

            const params = {
                name: 'SWFailedInterval',
                week: 'week',
                error: 'В поле items превышено количество элементов, максимально допустимое количество 52',
            };

            describe('API - добавление', () => {

                bef();

                aft();

                it('Добавление недельного графика', async () => {
                    const cook = await page.base.getCookie('token');

                    const w = {
                        name: params.week,
                        items: {
                            days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                            holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                                {dayId: 1}]
                        }
                    };
                    await dec.simple(api.putArrayWeek,
                        [[w], cook.text],
                        api.putArrayWeek);
                });

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отобраюжение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));
            });

            describe('Добавление', () => {

                bef();

                aft();

                describe('Добавление общий параметров', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Выбор значения "Скользящий понедельный график" в поле выбора "Временной критерий"',
                        async () => await dec.simple(el.select.iconXpand,
                            ['Временной критерий', '', 'Скользящий понедельный график', entry.max],
                            el.select));

                    it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                        ['Название', '', params.name, entry.max],
                        el.input));

                    it('Отображение 1 недели в списке выбора недель',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.sWeekList,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Проверка названия недели 1 в списке выбора недель',
                        async () => await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekName,
                            [1, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 1', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [1, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 2', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [2, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 3', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [3, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 4', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [4, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 5', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [5, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 6', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [6, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 7', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [7, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 8', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [8, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 9', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [9, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 10', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [10, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 11', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [11, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 12', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [12, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 13', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [13, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 14', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [14, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 15', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [15, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 16', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [16, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 17', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [17, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 18', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [18, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 19', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [19, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 20', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [20, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 21', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [21, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 22', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [22, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 23', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [23, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 24', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [24, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 25', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [25, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 26', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [26, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 27', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [27, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 28', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [28, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 29', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [29, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 30', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [30, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 31', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [31, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 32', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [32, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 33', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [33, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 34', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [34, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 35', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [35, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 36', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [36, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 37', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [37, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 38', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [38, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 39', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [39, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 40', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [40, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 41', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [41, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 42', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [42, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 43', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [43, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 44', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [44, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 45', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [45, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 46', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [46, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 47', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [47, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 48', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [48, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 49', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [49, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 50', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [50, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 51', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [51, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 52', () => {

                    it('Нажатие кнопки "Добавить" неделю 1', async () =>
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [52, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Добавление недели 53', () => {

                    it('Двойное нажатие кнопки "Добавить" неделю 1', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekDBHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage);

                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekDBHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage);

                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekDBHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage);
                    });

                    it('Отображение недели в списки выбранных', async () =>
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [53, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage));
                });

                describe('Сохранение', () => {

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение ошибки', async () => await dec.simple(el.error.error,
                        [params.error, entry.max],
                        el.error))
                })
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отобраюжение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));
            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('Удаление недельных графиков', async () => {
                    const cook = await page.base.getCookie('token');
                    const w = await api.getAccessSchedules({type: 2}, cook.text);
                    const filterW = accessShFilter(JSON.parse(w.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterW, cook.text],
                        api.deleteAccessSchedule);
                });

            });

        });

    // Попытка дублирования "Название", "Описание" и "Временной критерий" — "Скользящий понедельный график".
    const SWDuplicateSW = () =>
        describe('Скользящий понедельный график. Добавление. Попытка дублирования "Название", "Описание" и '+
            '"Временной критерий" — "Скользящий понедельный график".', () => {

            const params = {
                name: 'SWDuplicateSWName',
                description: 'SWDuplicateSWDescription',
                week: 'week',
                date: '2001-01-01',
                error: 'Такое название уже используется',
            };

            describe('API - добавление', () => {

                bef();

                aft();

                it('Добавление недельного графика', async () => {
                    const cook = await page.base.getCookie('token');

                    const w = {
                        name: params.week,
                        items: {
                            days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                            holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                                {dayId: 1}]
                        }
                    };
                    await dec.simple(api.putArrayWeek,
                        [[w], cook.text],
                        api.putArrayWeek);
                });

                it('Добавление скользящего понедельного графика', async () => {
                    const cook = await page.base.getCookie('token');
                    const get = await api.getAccessSchedules({type: 2}, cook.text);
                    const parse = JSON.parse(get.text);
                    const sw = {
                        name: params.name,
                        comment: params.description,
                        begin_date: params.date,
                        items: [parse[0]['id']]
                    };
                    await dec.simple(api.putArraySW,
                        [[sw], cook.text],
                        api.putArraySW)
                })

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отобраюжение в таблице 5 строки', async () => await dec.simple(el.table.size,
                    [5, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table))
            });

            describe('Добавление', () => {

                bef();

                aft();

                describe('Добавление общий параметров', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Выбор значения "Скользящий понедельный график" в поле выбора "Временной критерий"',
                        async () => await dec.simple(el.select.iconXpand,
                            ['Временной критерий', '', 'Скользящий понедельный график', entry.max],
                            el.select));

                    it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                        ['Название', '', params.name, entry.max],
                        el.input))

                    it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                        ['Описание', '', params.description, entry.max],
                        el.input))
                });

                describe('Добавление недели', () => {

                    it('Нажатие кнопки "Добавить"', async () => {

                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [1, entry.max],
                            params.week,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Сохранение', () => {

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение ошибки', async () => await dec.simple(el.error.error,
                        [params.error, entry.max],
                        el.error))
                })
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отобраюжение в таблице 5 строки', async () => await dec.simple(el.table.size,
                    [5, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table))
            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('Удаление скользящих недельных графиков', async () => {
                    const cook = await page.base.getCookie('token');

                    const sw = await api.getAccessSchedules({type: 4}, cook.text);
                    const filterSW = accessShFilter(JSON.parse(sw.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterSW, cook.text],
                        api.deleteAccessSchedule);
                });

                it('Удаление недельных графиков', async () => {
                    const cook = await page.base.getCookie('token');
                    const w = await api.getAccessSchedules({type: 2}, cook.text);
                    const filterW = accessShFilter(JSON.parse(w.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterW, cook.text],
                        api.deleteAccessSchedule);
                });

            });

        });

    // Дублирования "Название", "Описание" и '
    // '"Временной критерий" — Временные зоны", "Недельный график", "Скользящий посуточный график".
    const SWDuplicateTZWSTZ = () =>
        describe('Скользящий понедельный график. Добавление. Дублирования "Название", "Описание" и ' +
            '"Временной критерий" — Временные зоны", "Недельный график", "Скользящий посуточный график".', () => {

            const params = {
                name: 'SWDuplicateTZWSTZName',
                description: 'SWDuplicateTZWSTZDescription',
                date: '2001-01-01',
            };

            describe('API - добавление', () => {

                bef();

                aft();

                it('Добавление временную зону', async () => {
                    const cook = await page.base.getCookie('token');
                    const tz = {
                        name: params.name,
                        comment: params.description,
                        items: [{
                            begin: 0,
                            end: 10000
                        }]
                    };
                    await dec.simple(api.putArrayTimeZone,
                        [[tz], cook.text],
                        api.putArrayTimeZone)
                });

                it('Добавление недельного графика', async () => {
                    const cook = await page.base.getCookie('token');
                    const week = {
                        name: params.name,
                        comment: params.description,
                        items: {
                            days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                            holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                                {dayId: 1}]
                        }
                    };
                    await dec.simple(api.putArrayWeek,
                        [[week], cook.text],
                        api.putArrayWeek)
                });

                it('Добавление скользящего посуточного график', async () => {
                    const cook = await page.base.getCookie('token');
                    const stz = {
                        name: params.name,
                        comment: params.description,
                        begin_date: params.date,
                        items: {days: [{id: 1}]}
                    };
                    await dec.simple(api.putArraySTZ,
                        [[stz], cook.text],
                        api.putArraySTZ)
                });

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отобраюжение в таблице 6 строки', async () => await dec.simple(el.table.size,
                    [6, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 3 строки', async () => await dec.simple(el.table.size,
                    [3, entry.max],
                    el.table))
            });

            describe('Добавление', () => {

                bef();

                aft();

                describe('Добавление общий параметров', () => {

                    it('Нажатие кнопки "Добавить"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.add, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initAdd,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Выбор значения "Скользящий понедельный график" в поле выбора "Временной критерий"',
                        async () => await dec.simple(el.select.iconXpand,
                            ['Временной критерий', '', 'Скользящий понедельный график', entry.max],
                            el.select));

                    it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                        ['Название', '', params.name, entry.max],
                        el.input))

                    it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                        ['Описание', '', params.description, entry.max],
                        el.input))
                });

                describe('Добавление недели', () => {

                    it('Нажатие кнопки "Добавить"', async () => {

                        await dec.simple(page.accessTemplateScheduleChangePage.sWeekHandler,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображение недели в списки выбранных', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.sWeekSelectedName,
                            [1, entry.max],
                            params.name,
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Сохранение', () => {

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                        ['Сохранено успешно', entry.max],
                        el.success))
                })
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отобраюжение в таблице 7 строки', async () => await dec.simple(el.table.size,
                    [7, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table))
            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                it('Удаление скользящих недельных графиков', async () => {
                    const cook = await page.base.getCookie('token');
                    const sw = await api.getAccessSchedules({type: 4}, cook.text);
                    const filterSW = accessShFilter(JSON.parse(sw.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterSW, cook.text],
                        api.deleteAccessSchedule);
                });

                it('Удаление скользящих посуточных графиков', async () => {
                    const cook = await page.base.getCookie('token');
                    const stz = await api.getAccessSchedules({type: 3}, cook.text);
                    const filterSTZ = accessShFilter(JSON.parse(stz.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterSTZ, cook.text],
                        api.deleteAccessSchedule);
                });

                it('Удаление недельных графиков', async () => {
                    const cook = await page.base.getCookie('token');
                    const w = await api.getAccessSchedules({type: 2}, cook.text);
                    const filterW = accessShFilter(JSON.parse(w.text));
                    await dec.simple(api.deleteAccessSchedule,
                        [filterW, cook.text],
                        api.deleteAccessSchedule);
                });

                it('Удаление временных зон', async () => {
                    const cook = await page.base.getCookie('token');
                    const tz = await api.getAccessSchedules({type: 1}, cook.text);
                    const filterTZ = accessShFilter(JSON.parse(tz.text).intervals);
                    await dec.simple(api.deleteAccessSchedule,
                        [filterTZ, cook.text],
                        api.deleteAccessSchedule);
                });

            });


        });

    const SW = () => describe('Проверки добавления временные критерии - "Скользящий понедельный график"', () => {
        SWMinParams();
        SWMinParamsDeleteWeek();
        SWMaxParams();
        SWSearch();
        SWNoParams();
        SWNoInterval();
        SWNoName();
        SWFailedInterval();
        SWDuplicateSW();
        SWDuplicateTZWSTZ();
    });

    const add = () => describe('Проверки добавления временных критериев.', () => {
        TZ();
        W();
        STZ();
        SW();
    });


    return {
        addDisplay,
        TZMinParamsMinInterval,
        TZMinParamsMaxInterval,
        TZMaxParamsMaxInterval,
        TZFailedTimeMinInterval,
        TZFailedTimeMaxInterval,
        TZMaxTimeFailed,
        TZMaxIntervalFailed,
        TZNoParams,
        TZNoInterval,
        TZNoName,
        TZDuplicateTZ,
        TZDuplicateWKsWKsTZ,
        TZ,
        WMinParams,
        WMinParamsMinInterval,
        WMaxParams,
        WNoName,
        WDuplicateW,
        WDuplicateTZKsWKsTZ,
        W,
        STZMinParams,
        STZMinEditInterval,
        STZMinRemoveInterval,
        STZMaxParams,
        STZNoParams,
        STZNoName,
        STZNoInterval,
        STZFailedInterval,
        STZDuplicateSTZ,
        STZDuplicateTZKsWsWK,
        STZ,
        SWMinParams,
        SWMinParamsDeleteWeek,
        SWMaxParams,
        SWSearch,
        SWNoParams,
        SWNoInterval,
        SWNoName,
        SWFailedInterval,
        SWDuplicateSW,
        SWDuplicateTZWSTZ,
        SW,
        add,
    };

};

// Редактирование временных критериев
const edit = () => {

    // Временные зоны
    // Добавление необязательных параметров с минимальным количеством параметров
    const TZAddParamsMinParams = () =>
        describe('Временные зоны. Редактирование. ' +
            'Добавление необязательных параметров с минимальным количеством параметров.', () => {

            const params = {
                name: 'TZAddParamsMinParamsName',
                description: 'TZAddParamsMinParamsDescription',
                time: {
                    start1: '00:00',
                    end1: '00:30',
                    valueStart1: 0,
                    valueEnd1: 1800
                },
            };

            describe('API - Добавление', () => {

                bef();

                aft();

                const tz = {
                    name: params.name,
                    items: [{
                        begin: params.time.valueStart1,
                        end: params.time.valueEnd1
                    }]
                };
                addTZ(tz)

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.name,
                    el.table));

                it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    '',
                    el.table));

                it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Временные зоны',
                    el.table));

            });

            describe('Проверка параметров', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    '',
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Временные зоны', entry.max],
                    'Временные зоны',
                    el.input));

                it('Отображение временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                        [1, 1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Начало временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.time.start1,
                        page.accessTemplateScheduleChangePage));

                it('Окончание временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.time.end1,
                        page.accessTemplateScheduleChangePage));

            });

            describe('Редактирование', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                    ['Описание', '', params.description, entry.max],
                    el.input));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success));
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.name,
                    el.table));

                it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    params.description,
                    el.table));

                it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Временные зоны',
                    el.table));

            });

            describe('Проверка параметров', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.description,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Временные зоны', entry.max],
                    'Временные зоны',
                    el.input));

                it('Отображение временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                        [1, 1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Начало временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.time.start1,
                        page.accessTemplateScheduleChangePage));

                it('Окончание временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.time.end1,
                        page.accessTemplateScheduleChangePage));

            });

            describe('Удаление тестовых данных', () => {

                bef();

                aft();

                removeTZ();

            });

        });

    // Удаление необязательных параметров с максимальным количеством параметров.
    const TZRemoveParamsMaxParams = () => describe('Временные зоны. Редактирование. ' +
        'Удаление необязательных параметров с максимальным количеством параметров.', () => {

        const params = {
            name: 'TZRemoveParamsMaxParamsName',
            description: 'TZRemoveParamsMaxParamsDescription',
            time: {
                start1: '00:00',
                end1: '23:59',
                valueStart1: 0,
                valueEnd1:  86340,
            },
        };

        describe('API - Добавление', () => {

            bef();

            aft();

            it('Добавление временной зоны', async () => {
                const cook = await page.base.getCookie('token');
                const tz = {
                    name: params.name,
                    comment: params.description,
                    items: [{
                        begin: params.time.valueStart1,
                        end: params.time.valueEnd1
                    }]
                };
                await dec.simple(api.putArrayTimeZone,
                    [[tz], cook.text],
                    api.putArrayTimeZone)
            })

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Временные зоны',
                el.table));

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                ['Название', '', entry.max],
                params.name,
                el.input));

            it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                ['Описание', '', entry.max],
                params.description,
                el.input));

            it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                ['Временной критерий', 'Временные зоны', entry.max],
                'Временные зоны',
                el.input));

            it('Отображение временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Начало временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                    [1, 1, entry.max],
                    params.time.start1,
                    page.accessTemplateScheduleChangePage));

            it('Окончание временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                    [1, 1, entry.max],
                    params.time.end1,
                    page.accessTemplateScheduleChangePage));

        });

        describe('Редактирование', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Удаление "Описание"', async () => await dec.simple(el.input.backSpace,
                ['Описание', '', entry.max],
                el.input));

            it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                ['Сохранено успешно', entry.max],
                el.success));
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                '',
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Временные зоны',
                el.table));

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                ['Название', '', entry.max],
                params.name,
                el.input));

            it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                ['Описание', '', entry.max],
                '',
                el.input));

            it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                ['Временной критерий', 'Временные зоны', entry.max],
                'Временные зоны',
                el.input));

            it('Отображение временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Начало временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                    [1, 1, entry.max],
                    params.time.start1,
                    page.accessTemplateScheduleChangePage));

            it('Окончание временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                    [1, 1, entry.max],
                    params.time.end1,
                    page.accessTemplateScheduleChangePage));

        });

        describe('Удаление тестовых данных', () => {

            bef();

            aft();

            removeTZ();

        });

    });

    // Редактирование всех параметров с максимальным количеством параметров.
    const TZEditAllMaxParams = () => describe('Временные зоны. Редактирование. ' +
        'Редактирование всех параметров с максимальным количеством параметров.', () => {

        const params = {
            name: 'TZEditAllMaxParamsName',
            nameUpdate: 'TZEditAllMaxParamsNameUpdate',
            description: 'TZEditAllMaxParamsDescription',
            descriptionUpdate :'TZEditAllMaxParamsDescriptionUpdate',
            time: {
                start1: '02:00',
                end1: '02:30',
                valueStart1: 7200,
                valueEnd1: 9000,
            },
            timeUpdate: {
                start1: '00:00',
                end1: '23:59',
                valueStart1: 0,
                valueEnd1:  86340,
            },
        };

        describe('API - Добавление', () => {

            bef();

            aft();

            it('Добавление временной зоны', async () => {
                const cook = await page.base.getCookie('token');
                const tz = {
                    name: params.name,
                    comment: params.description,
                    items: [{
                        begin: params.time.valueStart1,
                        end: params.time.valueEnd1
                    }]
                };
                await dec.simple(api.putArrayTimeZone,
                    [[tz], cook.text],
                    api.putArrayTimeZone)
            });

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Временные зоны',
                el.table));

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                ['Название', '', entry.max],
                params.name,
                el.input));

            it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                ['Описание', '', entry.max],
                params.description,
                el.input));

            it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                ['Временной критерий', 'Временные зоны', entry.max],
                'Временные зоны',
                el.input));

            it('Отображение временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Начало временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                    [1, 1, entry.max],
                    params.time.start1,
                    page.accessTemplateScheduleChangePage));

            it('Окончание временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                    [1, 1, entry.max],
                    params.time.end1,
                    page.accessTemplateScheduleChangePage));

        });

        describe('Редактирование', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Удаление "Название"', async () => await dec.simple(el.input.backSpace,
                ['Название', '', entry.max],
                el.input));

            it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                ['Название', '', params.nameUpdate, entry.max],
                el.input));

            it('Удаление "Описание"', async () => await dec.simple(el.input.backSpace,
                ['Описание', '', entry.max],
                el.input));

            it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                ['Описание', '', params.descriptionUpdate, entry.max],
                el.input));

            it('Ввод начала временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.startTimeSendKeys,
                    [1, 1, params.timeUpdate.start1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Ввод окончания временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.endTimeSendKeys,
                    [1, 1, params.timeUpdate.end1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                ['Сохранено успешно', entry.max],
                el.success));
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.nameUpdate, entry.max],
                el.input));

            it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.nameUpdate,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.descriptionUpdate,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Временные зоны',
                el.table));

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                ['Название', '', entry.max],
                params.nameUpdate,
                el.input));

            it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                ['Описание', '', entry.max],
                params.descriptionUpdate,
                el.input));

            it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                ['Временной критерий', 'Временные зоны', entry.max],
                'Временные зоны',
                el.input));

            it('Отображение временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Начало временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                    [1, 1, entry.max],
                    params.timeUpdate.start1,
                    page.accessTemplateScheduleChangePage));

            it('Окончание временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                    [1, 1, entry.max],
                    params.timeUpdate.end1,
                    page.accessTemplateScheduleChangePage));

        });

        describe('Удаление тестовых данных', () => {

            bef();

            aft();

            removeTZ();

        });

    });

    // Попытка редактирования с удалением всех параметров с максимальным количеством параметров.
    const TZRemoveAllMaxParams = () => describe('Временные зоны. Редактирование. ' +
        'Попытка редактирования с удалением всех параметров с максимальным количеством параметров.', () =>  {

        const params = {
            name: 'TZRemoveAllMaxParamsName',
            description: 'TZRemoveAllMaxParamsDescription',
            time: {
                start1: '00:00',
                end1: '23:59',
                valueStart1: 0,
                valueEnd1:  86340,
            },
        };

        describe('API - Добавление', () => {

            bef();

            aft();

            it('Добавление временной зоны', async () => {
                const cook = await page.base.getCookie('token');
                const tz = {
                    name: params.name,
                    comment: params.description,
                    items: [{
                        begin: params.time.valueStart1,
                        end: params.time.valueEnd1
                    }]
                };
                await dec.simple(api.putArrayTimeZone,
                    [[tz], cook.text],
                    api.putArrayTimeZone)
            });

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Временные зоны',
                el.table));

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                ['Название', '', entry.max],
                params.name,
                el.input));

            it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                ['Описание', '', entry.max],
                params.description,
                el.input));

            it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                ['Временной критерий', 'Временные зоны', entry.max],
                'Временные зоны',
                el.input));

            it('Отображение временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Начало временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                    [1, 1, entry.max],
                    params.time.start1,
                    page.accessTemplateScheduleChangePage));

            it('Окончание временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                    [1, 1, entry.max],
                    params.time.end1,
                    page.accessTemplateScheduleChangePage));

        });

        describe('Редактирование', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Удаление "Название"', async () => await dec.simple(el.input.backSpace,
                ['Название', '', entry.max],
                el.input));

            it('Удаление "Описание"', async () => await dec.simple(el.input.backSpace,
                ['Описание', '', entry.max],
                el.input));

            it('Удаление временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.timeRemove,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Отсутствие временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Кнопка "Сохранить изменения" - заблокирована', async () => await dec.simple(el.button.disabled,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simpleFalse(el.button.handlerNoActive,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Отображение "title", "url" не изменилось',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage))
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Временные зоны',
                el.table));

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                ['Название', '', entry.max],
                params.name,
                el.input));

            it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                ['Описание', '', entry.max],
                params.description,
                el.input));

            it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                ['Временной критерий', 'Временные зоны', entry.max],
                'Временные зоны',
                el.input));

            it('Отображение временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Начало временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                    [1, 1, entry.max],
                    params.time.start1,
                    page.accessTemplateScheduleChangePage));

            it('Окончание временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                    [1, 1, entry.max],
                    params.time.end1,
                    page.accessTemplateScheduleChangePage));

        });

        describe('Удаление тестовых данных', () => {

            bef();

            aft();

            removeTZ();

        });

    });

    // Попытка редактирования с удалением параметра "Название".
    const TZRemoveName = () => describe('Временные зоны. Редактирование.' +
        'Попытка редактирования с удалением параметра "Название".', () => {

        const params = {
            name: 'TZRemoveNameName',
            description: 'TZRemoveNameDescription',
            time: {
                start1: '00:00',
                end1: '23:59',
                valueStart1: 0,
                valueEnd1:  86340,
            },
        };

        describe('API - Добавление', () => {

            bef();

            aft();

            const tz = {
                name: params.name,
                comment: params.description,
                items: [{
                    begin: params.time.valueStart1,
                    end: params.time.valueEnd1
                }]
            };
            addTZ(tz);

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Временные зоны',
                el.table));

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                ['Название', '', entry.max],
                params.name,
                el.input));

            it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                ['Описание', '', entry.max],
                params.description,
                el.input));

            it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                ['Временной критерий', 'Временные зоны', entry.max],
                'Временные зоны',
                el.input));

            it('Отображение временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Начало временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                    [1, 1, entry.max],
                    params.time.start1,
                    page.accessTemplateScheduleChangePage));

            it('Окончание временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                    [1, 1, entry.max],
                    params.time.end1,
                    page.accessTemplateScheduleChangePage));

        });

        describe('Редактирование', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Удаление "Название"', async () => await dec.simple(el.input.backSpace,
                ['Название', '', entry.max],
                el.input));

            it('Кнопка "Сохранить изменения" - заблокирована', async () => await dec.simple(el.button.disabled,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simpleFalse(el.button.handlerNoActive,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Отображение "title", "url" не изменилось',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Временные зоны',
                el.table));

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                ['Название', '', entry.max],
                params.name,
                el.input));

            it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                ['Описание', '', entry.max],
                params.description,
                el.input));

            it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                ['Временной критерий', 'Временные зоны', entry.max],
                'Временные зоны',
                el.input));

            it('Отображение временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Начало временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                    [1, 1, entry.max],
                    params.time.start1,
                    page.accessTemplateScheduleChangePage));

            it('Окончание временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                    [1, 1, entry.max],
                    params.time.end1,
                    page.accessTemplateScheduleChangePage));

        });

        describe('Удаление тестовых данных', () => {

            bef();

            aft();

            removeTZ();

        });


    });

    // Попытка редактирования с удалением параметра временного блока.
    const TZRemoveInterval = () => describe('Временные зоны. Редактирование. ' +
        'Попытка редактирования с удалением параметра временного блока.', () => {

        const params = {
            name: 'TZRemoveIntervalName',
            description: 'TZRemoveIntervalDescription',
            time: {
                start1: '00:00',
                end1: '23:59',
                valueStart1: 0,
                valueEnd1:  86340,
            },
            error: 'Заполните все обязательные поля',
        };

        describe('API - Добавление', () => {

            bef();

            aft();

            const tz = {
                name: params.name,
                comment: params.description,
                items: [{
                    begin: params.time.valueStart1,
                    end: params.time.valueEnd1
                }]
            };
            addTZ(tz);

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Временные зоны',
                el.table));

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                ['Название', '', entry.max],
                params.name,
                el.input));

            it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                ['Описание', '', entry.max],
                params.description,
                el.input));

            it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                ['Временной критерий', 'Временные зоны', entry.max],
                'Временные зоны',
                el.input));

            it('Отображение временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Начало временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                    [1, 1, entry.max],
                    params.time.start1,
                    page.accessTemplateScheduleChangePage));

            it('Окончание временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                    [1, 1, entry.max],
                    params.time.end1,
                    page.accessTemplateScheduleChangePage));

        });

        describe('Редактирование', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Удаление временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.timeRemove,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Отсутствие временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                    [1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Отображение ошибки', async () => await dec.simple(el.error.error,
                [params.error, entry.max],
                el.error));

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Временные зоны',
                el.table));

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                ['Название', '', entry.max],
                params.name,
                el.input));

            it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                ['Описание', '', entry.max],
                params.description,
                el.input));

            it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                ['Временной критерий', 'Временные зоны', entry.max],
                'Временные зоны',
                el.input));

            it('Отображение временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Начало временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                    [1, 1, entry.max],
                    params.time.start1,
                    page.accessTemplateScheduleChangePage));

            it('Окончание временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                    [1, 1, entry.max],
                    params.time.end1,
                    page.accessTemplateScheduleChangePage));

        });

        describe('Удаление тестовых данных', () => {

            bef();

            aft();

            removeTZ();

        });

    });

    // Попытка редактирования с дублированием "Название", "Описание" и "Временной критерий" — "Временные зоны".
    const TZDuplicateTZ = () => describe('Временные зоны. Редактирование. Попытка редактирования с дублированием ' +
        '"Название", "Описание" и "Временной критерий" — "Временные зоны".', () => {

        const params = {
            tz1: {
                name: 'TZDuplicateTZName',
                description: 'TZDuplicateTZDescription',
                time: {
                    start1: '00:00',
                    end1: '23:59',
                    valueStart1: 0,
                    valueEnd1:  86340,
                },
            },
            tz2: {
                name: 'Test',
                description: 'Test',
                time: {
                    start1: '00:00',
                    end1: '23:59',
                    valueStart1: 0,
                    valueEnd1:  86340,
                },
            },
            error: 'Такое название уже используется',
        };

        describe('API - Добавление', () => {

            bef();

            aft();

            const tz1 = {
                name: params.tz1.name,
                comment: params.tz1.description,
                items: [{
                    begin: params.tz1.time.valueStart1,
                    end: params.tz1.time.valueEnd1
                }]
            };
            addTZ(tz1);

            const tz2 = {
                name: params.tz2.name,
                comment: params.tz2.description,
                items: [{
                    begin: params.tz2.time.valueStart1,
                    end: params.tz2.time.valueEnd1
                }]
            };
            addTZ(tz2);

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            describe('Общая проверка', () => {
                it('Отображение в таблице 5 строк', async () => await dec.simple(el.table.size,
                    [5, entry.max],
                    el.table));
            });

            describe('Проверка временной зоны 1', () =>  {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.tz1.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.tz1.name,
                    el.table));

                it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    params.tz1.description,
                    el.table));

                it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Временные зоны',
                    el.table));

                it('Удаление поиск', async () => await dec.simple(el.input.iconClear,
                    ['', 'Поиск...',  entry.max],
                    el.input));

                it('Отображение в таблице 5 строк', async () => await dec.simple(el.table.size,
                    [5, entry.max],
                    el.table));
            });

            describe('Проверка временной зоны 1', () =>  {


            });

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.tz2.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                ['Название', '', entry.max],
                params.tz2.name,
                el.input));

            it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                ['Описание', '', entry.max],
                params.tz2.description,
                el.input));

            it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                ['Временной критерий', 'Временные зоны', entry.max],
                'Временные зоны',
                el.input));

            it('Отображение временного блока',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                    [1, 1, entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Начало временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                    [1, 1, entry.max],
                    params.tz2.time.start1,
                    page.accessTemplateScheduleChangePage));

            it('Окончание временного блока',
                async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                    [1, 1, entry.max],
                    params.tz2.time.end1,
                    page.accessTemplateScheduleChangePage));

        });

        describe('Редактирование временной зоны 2', () => {

            bef();

            aft();

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.tz2.name, entry.max],
                el.input));

            it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                [entry.max],
                el.table));

            it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                [1, entry.max],
                el.table));

            it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                [but.edit, entry.max],
                el.butIcBefore));

            it('Отображение "title", "url"',
                async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                    [entry.max],
                    page.accessTemplateScheduleChangePage));

            it('Удаление "Название"', async () => await dec.simple(el.input.backSpace,
                ['Название', '', entry.max],
                el.input));

            it('Ввод "Название" временной зоны 1', async () => await dec.simple(el.input.sendKeys,
                ['Название', '', params.tz1.name, entry.max],
                el.input));

            it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                ['Сохранить изменения', entry.max],
                el.button));

            it('Отображение ошибки', async () => await dec.simple(el.error.error,
                [params.error, entry.max],
                el.error));
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            describe('Общая проверка', () => {
                it('Отображение в таблице 5 строк', async () => await dec.simple(el.table.size,
                    [5, entry.max],
                    el.table));
            });

            describe('Проверка временной зоны 1', () =>  {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.tz1.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.tz1.name,
                    el.table));

                it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    params.tz1.description,
                    el.table));

                it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Временные зоны',
                    el.table));

                it('Удаление поиск', async () => await dec.simple(el.input.iconClear,
                    ['', 'Поиск...',  entry.max],
                    el.input));

                it('Отображение в таблице 5 строк', async () => await dec.simple(el.table.size,
                    [5, entry.max],
                    el.table));
            });

            describe('Проверка временной зоны 2', () =>  {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.tz2.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.tz2.name,
                    el.table));

                it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    params.tz2.description,
                    el.table));

                it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Временные зоны',
                    el.table));
            });


        });

        describe('Проверка параметров', () => {

            describe('Проверка параметров', () => {
                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.tz2.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.tz2.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.tz2.description,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Временные зоны', entry.max],
                    'Временные зоны',
                    el.input));

                it('Отображение временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                        [1, 1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Начало временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.tz2.time.start1,
                        page.accessTemplateScheduleChangePage));

                it('Окончание временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.tz2.time.end1,
                        page.accessTemplateScheduleChangePage));
            });

        });

        describe('Удаление тестовых данных', () => {

            bef();

            aft();

            removeTZ();

        });

    });

    // Временные зоны. Редактирование. Дублирования "Название", "Описание" и
    // '"Временной критерий" — "Недельный график", "Скользящий посуточный график", "Скользящий понедельный график".
    const TZDuplicateWSTZSW = () => describe('Временные зоны. Редактирование. Дублирования "Название", "Описание" и ' +
        '"Временной критерий" — "Недельный график", "Скользящий посуточный график", "Скользящий понедельный график".',
        () => {

            const params = {
                name: 'TZDuplicateWKsWKsTZName',
                description: 'TZDuplicateWKsWKsTZDescription',
                start: 0,
                end: 10000,
                date: '2001-01-01',
                error: 'Такое название уже используется',
                tz: {
                    name: 'Test',
                    description: 'Test',
                    time: {
                        start1: '00:00',
                        end1: '23:59',
                        valueStart1: 0,
                        valueEnd1:  86340,
                    },
                },
            };

            describe('API - добавление', () => {

                bef();

                aft();

                const tz = {
                    name: params.tz.name,
                    comment: params.tz.description,
                    items: [{
                        begin: params.tz.time.valueStart1,
                        end: params.tz.time.valueEnd1
                    }]
                };
                addTZ(tz);

                const week = {
                    name: params.name,
                    comment: params.description,
                    items: {
                        days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                        holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                            {dayId: 1}]
                    }
                };
                addWeek(week);

                const stz = {
                    name: params.name,
                    comment: params.description,
                    begin_date: params.date,
                    items: {days: [{id: 1}]}
                };
                addSTZ(stz);

                it('Добавление скользящего понедельного графика', async () => {
                    const cook = await page.base.getCookie('token');
                    const get = await api.getAccessSchedules({type: 2}, cook.text);
                    const parse = JSON.parse(get.text);
                    const sw = {
                        name: params.name,
                        comment: params.description,
                        begin_date: params.date,
                        items: [parse[0]['id']]
                    };
                    await dec.simple(api.putArraySW,
                        [[sw], cook.text],
                        api.putArraySW)
                });

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 7 строки', async () => await dec.simple(el.table.size,
                    [7, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 3 строки', async () => await dec.simple(el.table.size,
                    [3, entry.max],
                    el.table));

            });

            describe('Проверка параметров', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.tz.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.tz.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.tz.description,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Временные зоны', entry.max],
                    'Временные зоны',
                    el.input));

                it('Отображение временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                        [1, 1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Начало временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.tz.time.start1,
                        page.accessTemplateScheduleChangePage));

                it('Окончание временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.tz.time.end1,
                        page.accessTemplateScheduleChangePage));

            });

            describe('Редактирование временной зоны', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.tz.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Удаление "Название"', async () => await dec.simple(el.input.backSpace,
                    ['Название', '', entry.max],
                    el.input));

                it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.name, entry.max],
                    el.input));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success))
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 7 строки', async () => await dec.simple(el.table.size,
                    [7, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));

            });

            describe('Проверка параметров', () => {

                bef();

                aft();

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.tz.description, entry.max],
                    el.input));

                it('Отображение в таблице одной строки в таблице', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.tz.description,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Временные зоны', entry.max],
                    'Временные зоны',
                    el.input));

                it('Отображение временного блока',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.time,
                        [1, 1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Начало временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.tz.time.start1,
                        page.accessTemplateScheduleChangePage));

                it('Окончание временного блока',
                    async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.tz.time.end1,
                        page.accessTemplateScheduleChangePage));

            });

            describe('Удаление тестовых данных', () => {
                bef();
                aft();
                removeSW();
                removeSTZ();
                removeW();
                removeTZ();
            });

        });

    // Проверки редактирования временного критерия доступа
    const TZ = () => describe('Проверки редактирования временного критерия доступа', () => {
        TZAddParamsMinParams();
        TZRemoveParamsMaxParams();
        TZEditAllMaxParams();
        TZRemoveAllMaxParams();
        TZRemoveAllMaxParams();
        TZRemoveName();
        TZRemoveInterval();
        TZDuplicateTZ();
        TZDuplicateWSTZSW();
    });

    // Недельный график
    // Добавление необязательных параметров с минимальным количеством параметров.
    const WAddParamsMinParams = () => describe('Недельный график. Редактирование. ' +
        'Добавление необязательных параметров с минимальным количеством параметров.', () => {

        const params = {
            name: 'WAddParamsMinParamsName',
            description: 'WAddParamsMinParamsDescription',
            tz: {
                name: 'tz',
                start1: 0,
                end1: 21540,
                start2: 21600,
                end2: 43140,
                start3: 43200,
                end3: 64740,
                start4: 64800,
                end4: 86340,
                intervals: {
                    start1: '00:00',
                    end1: '05:59',
                    start2: '06:00',
                    end2: '11:59',
                    start3: '12:00',
                    end3: '17:59',
                    start4: '18:00',
                    end4: '23:59',
                }
            },
        };

        describe('API - добавление', () => {

            bef();

            aft();

            const tz = {
                name: params.tz.name,
                items: [
                    {begin: params.tz.start1, end: params.tz.end1},
                    {begin: params.tz.start2, end: params.tz.end2},
                    {begin: params.tz.start3, end: params.tz.end3},
                    {begin: params.tz.start4, end: params.tz.end4}]
            };
            addTZ(tz);

            const week = {
                name: params.name,
                items: {
                    days: [
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1}],
                    holidays: [
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1}]
                }
            };
            addWeek(week);

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 5 строк', async () => await dec.simple(el.table.size,
                [5, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                '',
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Недельный график',
                el.table));



        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    '',
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Недельный график', entry.max],
                    'Недельный график',
                    el.input))
            });

            describe('Проверка интервала "Понедельник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'ПН',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала "Вторник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [2, entry.max],
                        'ВТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Среда"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [3, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [3, entry.max],
                        'СР',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Четеверг"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [4, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [4, entry.max],
                        'ЧТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Пятница"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [5, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [5, entry.max],
                        'ПТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Суббота"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [6, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [6, entry.max],
                        'СБ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Воскресенье"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [7, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [7, entry.max],
                        'ВС',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 1"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [8, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [8, entry.max],
                        'Тип 1',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 2"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [9, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [9, entry.max],
                        'Тип 2',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 3"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [10, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [10, entry.max],
                        'Тип 3',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 4"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [11, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [11, entry.max],
                        'Тип 4',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 5"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [12, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [12, entry.max],
                        'Тип 5',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 6"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [13, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [13, entry.max],
                        'Тип 6',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 7"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [14, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [14, entry.max],
                        'Тип 7',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 8"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [15, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [15, entry.max],
                        'Тип 8',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            })

        });

        describe('Редактирование', () => {

            bef();

            aft();

            describe('Добавление общих параметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                    ['Описание', '', params.description, entry.max],
                    el.input));

            });

            describe('Изменение интервала "Понедельник"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Изменение интервала "Вторник"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Изменение интервала "Среда"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Четверг"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Пятница"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Скролл модального окна', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                        [],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Суббота"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Скролл модального окна', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                        [],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Воскресенье"', () => {

                it('Скролл интервалов', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.scrollWeekTop,
                        [],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Скролл модального окна', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                        [],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 1"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 2"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 3"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 4"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 5"', () => {

                it('Скролл интервалов', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.scrollWeekTop,
                        [],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 6"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Скролл модального окна', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                        [],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 7"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Скролл модального окна', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                        [],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 8"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Скролл модального окна', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.scrollTop,
                        [],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Сохранение изменений', () => {

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success))
            })
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 5 строк', async () => await dec.simple(el.table.size,
                [5, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Недельный график',
                el.table));



        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.description,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Недельный график', entry.max],
                    'Недельный график',
                    el.input))
            });

            describe('Проверка интервала "Понедельник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'ПН',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });
            });

            describe('Проверка интервала "Вторник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [2, entry.max],
                        'ВТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Среда"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [3, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [3, entry.max],
                        'СР',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Четеверг"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [4, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [4, entry.max],
                        'ЧТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Пятница"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [5, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [5, entry.max],
                        'ПТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });


            });

            describe('Проверка интервала "Суббота"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [6, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [6, entry.max],
                        'СБ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Воскресенье"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [7, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [7, entry.max],
                        'ВС',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 1"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [8, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [8, entry.max],
                        'Тип 1',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 2"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [9, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [9, entry.max],
                        'Тип 2',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 3"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [10, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [10, entry.max],
                        'Тип 3',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 4"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [11, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [11, entry.max],
                        'Тип 4',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 5"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [12, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [12, entry.max],
                        'Тип 5',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 6"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [13, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [13, entry.max],
                        'Тип 6',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 7"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [14, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [14, entry.max],
                        'Тип 7',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 8"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [15, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [15, entry.max],
                        'Тип 8',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                })

            })

        });

        describe('Удаление тестовых данных', () => {
            bef();
            aft();
            removeW();
            removeTZ();
        });

    });

    // Удаление необязательных параметров с максимальным количеством параметров.
    const WRemoveParamsMaxParams = () => describe('Недельный график. Редактирование. ' +
        'Удаление необязательных параметров с максимальным количеством параметров.', () => {

        const params = {
            name: 'WRemoveParamsMaxParamsName',
            description: 'WRemoveParamsMaxParams',
            tz: {
                name: 'tz',
                start1: 0,
                end1: 21540,
                start2: 21600,
                end2: 43140,
                start3: 43200,
                end3: 64740,
                start4: 64800,
                end4: 86340,
                intervals: {
                    start1: '00:00',
                    end1: '05:59',
                    start2: '06:00',
                    end2: '11:59',
                    start3: '12:00',
                    end3: '17:59',
                    start4: '18:00',
                    end4: '23:59',
                }
            }
        };

        describe('API - добавление', () => {

            bef();

            aft();

            const tz = {
                name: params.tz.name,
                items: [
                    {begin: params.tz.start1, end: params.tz.end1},
                    {begin: params.tz.start2, end: params.tz.end2},
                    {begin: params.tz.start3, end: params.tz.end3},
                    {begin: params.tz.start4, end: params.tz.end4}]
            };
            addTZ(tz);

            it('Добавление недельного графика', async () => {
                const cook = await page.base.getCookie('token');
                const get = await api.getAccessSchedules({type: 1}, cook.text);
                const tz = JSON.parse(get.text).intervals;
                const week = {
                    name: params.name,
                    comment: params.description,
                    items: {
                        days: [
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']}],
                        holidays: [
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']}]
                    }
                };
                await dec.simple(api.putArrayWeek,
                    [[week], cook.text],
                    api.putArrayWeek);
            });

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 5 строк', async () => await dec.simple(el.table.size,
                [5, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Недельный график',
                el.table));



        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.description,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Недельный график', entry.max],
                    'Недельный график',
                    el.input))
            });

            describe('Проверка интервала "Понедельник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'ПН',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });
            });

            describe('Проверка интервала "Вторник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [2, entry.max],
                        'ВТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Среда"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [3, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [3, entry.max],
                        'СР',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Четеверг"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [4, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [4, entry.max],
                        'ЧТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Пятница"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [5, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [5, entry.max],
                        'ПТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });


            });

            describe('Проверка интервала "Суббота"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [6, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [6, entry.max],
                        'СБ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Воскресенье"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [7, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [7, entry.max],
                        'ВС',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 1"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [8, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [8, entry.max],
                        'Тип 1',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 2"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [9, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [9, entry.max],
                        'Тип 2',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 3"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [10, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [10, entry.max],
                        'Тип 3',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 4"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [11, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [11, entry.max],
                        'Тип 4',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 5"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [12, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [12, entry.max],
                        'Тип 5',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 6"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [13, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [13, entry.max],
                        'Тип 6',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 7"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [14, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [14, entry.max],
                        'Тип 7',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 8"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [15, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [15, entry.max],
                        'Тип 8',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                })

            })

        });

        describe('Редактирование', () => {

            bef();

            aft();

            describe('Удаление общих параметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Удаление "Описание"', async () => await dec.simple(el.input.backSpace,
                    ['Описание', '', entry.max],
                    el.input));

            });

            describe('Изменение интервала "Понедельник"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Изменение интервала "Вторник"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Изменение интервала "Среда"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Четверг"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Пятница"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Суббота"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Воскресенье"', () => {

                it('Скролл интервалов', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.scrollWeekTop,
                        [],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 1"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 2"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 3"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 4"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 5"', () => {

                it('Скролл интервалов', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.scrollWeekTop,
                        [],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 6"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 7"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 8"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Сохранение изменений', () => {

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success))
            })
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 5 строк', async () => await dec.simple(el.table.size,
                [5, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                '',
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Недельный график',
                el.table));



        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    '',
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Недельный график', entry.max],
                    'Недельный график',
                    el.input))
            });

            describe('Проверка интервала "Понедельник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'ПН',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала "Вторник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [2, entry.max],
                        'ВТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Среда"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [3, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [3, entry.max],
                        'СР',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Четеверг"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [4, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [4, entry.max],
                        'ЧТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Пятница"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [5, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [5, entry.max],
                        'ПТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Суббота"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [6, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [6, entry.max],
                        'СБ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Воскресенье"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [7, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [7, entry.max],
                        'ВС',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 1"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [8, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [8, entry.max],
                        'Тип 1',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 2"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [9, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [9, entry.max],
                        'Тип 2',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 3"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [10, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [10, entry.max],
                        'Тип 3',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 4"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [11, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [11, entry.max],
                        'Тип 4',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 5"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [12, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [12, entry.max],
                        'Тип 5',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 6"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [13, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [13, entry.max],
                        'Тип 6',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 7"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [14, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [14, entry.max],
                        'Тип 7',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 8"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [15, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [15, entry.max],
                        'Тип 8',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            })

        });

        describe('Удаление тестовых данных', () => {
            bef();
            aft();
            removeW();
            removeTZ();
        });
    });

    // Редактирование всех параметров с максимальным количеством параметров.
    const WEditMaxParams = () => describe('Недельный график. Редактирование. ' +
        'Редактирование всех параметров с максимальным количеством параметров.', () => {

        const params = {
            name: 'WEditMaxParamsName',
            description: 'WEditMaxParamsDescription',
            nameUpdate: 'WEditMaxParamsNameUpdate',
            descriptionUpdate: 'WEditMaxParamsDescriptionUpdate',
            tz1: {
                name: 'tz1',
                start1: 0,
                end1: 21540,
                start2: 21600,
                end2: 43140,
                start3: 43200,
                end3: 64740,
                start4: 64800,
                end4: 86340,
                intervals: {
                    start1: '00:00',
                    end1: '05:59',
                    start2: '06:00',
                    end2: '11:59',
                    start3: '12:00',
                    end3: '17:59',
                    start4: '18:00',
                    end4: '23:59',
                }
            },
            tz2: {
                name: 'tz2',
                start1: 0,
                end1: 1800,
                intervals: {
                    start1: '00:00',
                    end1: '00:30',
                }
            }
        };

        describe('API - добавление', () => {

            bef();

            aft();

            const tz1 = {
                name: params.tz1.name,
                items: [
                    {begin: params.tz1.start1, end: params.tz1.end1},
                    {begin: params.tz1.start2, end: params.tz1.end2},
                    {begin: params.tz1.start3, end: params.tz1.end3},
                    {begin: params.tz1.start4, end: params.tz1.end4}]
            };
            addTZ(tz1);

            const tz2 = {
                name: params.tz2.name,
                items: [{begin: params.tz2.start1, end: params.tz2.end1}]
            };
            addTZ(tz2);

            it('Добавление недельного графика', async () => {
                const cook = await page.base.getCookie('token');
                const get = await api.getAccessSchedules({type: 1}, cook.text);
                const tz = JSON.parse(get.text).intervals;
                const week = {
                    name: params.name,
                    comment: params.description,
                    items: {
                        days: [
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']}],
                        holidays: [
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']}]
                    }
                };
                await dec.simple(api.putArrayWeek,
                    [[week], cook.text],
                    api.putArrayWeek);
            });

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 6 строк', async () => await dec.simple(el.table.size,
                [6, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Недельный график',
                el.table));
        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.description,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Недельный график', entry.max],
                    'Недельный график',
                    el.input))
            });

            describe('Проверка интервала "Понедельник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'ПН',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });
            });

            describe('Проверка интервала "Вторник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [2, entry.max],
                        'ВТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Среда"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [3, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [3, entry.max],
                        'СР',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Четеверг"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [4, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [4, entry.max],
                        'ЧТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Пятница"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [5, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [5, entry.max],
                        'ПТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });


            });

            describe('Проверка интервала "Суббота"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [6, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [6, entry.max],
                        'СБ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Воскресенье"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [7, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [7, entry.max],
                        'ВС',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 1"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [8, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [8, entry.max],
                        'Тип 1',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 2"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [9, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [9, entry.max],
                        'Тип 2',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 3"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [10, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [10, entry.max],
                        'Тип 3',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 4"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [11, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [11, entry.max],
                        'Тип 4',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 5"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [12, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [12, entry.max],
                        'Тип 5',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 6"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [13, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [13, entry.max],
                        'Тип 6',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 7"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [14, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [14, entry.max],
                        'Тип 7',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 8"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [15, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [15, entry.max],
                        'Тип 8',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 1, entry.max],
                        params.tz1.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 2, entry.max],
                        params.tz1.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 2, entry.max],
                        params.tz1.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 3, entry.max],
                        params.tz1.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 3, entry.max],
                        params.tz1.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 4, entry.max],
                        params.tz1.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 4, entry.max],
                        params.tz1.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                })

            })

        });

        describe('Редактирование', () => {

            bef();

            aft();

            describe('Редактирование общих параметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Удаление "Название"', async () => await dec.simple(el.input.backSpace,
                    ['Название', '', entry.max],
                    el.input));

                it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.nameUpdate, entry.max],
                    el.input));

                it('Удаление "Описание"', async () => await dec.simple(el.input.backSpace,
                    ['Описание', '', entry.max],
                    el.input));

                it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                    ['Описание', '', params.descriptionUpdate, entry.max],
                    el.input));

            });

            describe('Изменение интервала "Понедельник"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Изменение интервала "Вторник"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Изменение интервала "Среда"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Четверг"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Пятница"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Суббота"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Воскресенье"', () => {

                it('Скролл интервалов', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.scrollWeekTop,
                        [],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 1"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 2"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 3"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 4"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 5"', () => {

                it('Скролл интервалов', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.scrollWeekTop,
                        [],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 6"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 7"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 8"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [4, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Сохранение изменений', () => {

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success))
            })
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 6 строк', async () => await dec.simple(el.table.size,
                [6, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.nameUpdate, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.nameUpdate,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.descriptionUpdate,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Недельный график',
                el.table));
        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.nameUpdate,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.descriptionUpdate,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Недельный график', entry.max],
                    'Недельный график',
                    el.input))
            });

            describe('Проверка интервала "Понедельник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'ПН',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.tz2.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Вторник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [2, entry.max],
                        'ВТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 1, entry.max],
                        params.tz2.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Среда"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [3, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [3, entry.max],
                        'СР',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 1, entry.max],
                        params.tz2.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Четеверг"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [4, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [4, entry.max],
                        'ЧТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 1, entry.max],
                        params.tz2.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Пятница"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [5, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [5, entry.max],
                        'ПТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 1, entry.max],
                        params.tz2.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Суббота"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [6, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [6, entry.max],
                        'СБ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 1, entry.max],
                        params.tz2.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Воскресенье"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [7, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [7, entry.max],
                        'ВС',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 1, entry.max],
                        params.tz2.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 1"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [8, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [8, entry.max],
                        'Тип 1',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 1, entry.max],
                        params.tz2.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 2"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [9, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [9, entry.max],
                        'Тип 2',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 1, entry.max],
                        params.tz2.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 3"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [10, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [10, entry.max],
                        'Тип 3',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 1, entry.max],
                        params.tz2.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 4"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [11, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [11, entry.max],
                        'Тип 4',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 1, entry.max],
                        params.tz2.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 5"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [12, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [12, entry.max],
                        'Тип 5',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 1, entry.max],
                        params.tz2.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 6"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [13, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [13, entry.max],
                        'Тип 6',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 1, entry.max],
                        params.tz1.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 7"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [14, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [14, entry.max],
                        'Тип 7',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 1, entry.max],
                        params.tz2.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 8"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [15, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [15, entry.max],
                        'Тип 8',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 1, entry.max],
                        params.tz2.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 1, entry.max],
                        params.tz2.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

            });

        });

        describe('Удаление тестовых данных', () => {
            bef();
            aft();
            removeW();
            removeTZ();
        });

    });

    // Попытка редактирования с удалением всех параметров с максимальным количеством параметров.
    const WRemoveMaxParams = () => describe('Недельный график. Редактирование. ' +
        'Редактирование всех параметров с максимальным количеством параметров.', () => {

        const params = {
            name: 'WEditMaxParamsFailedName',
            description: 'WEditMaxParamsFailedDescription',
            tz: {
                name: 'tz',
                start1: 0,
                end1: 21540,
                start2: 21600,
                end2: 43140,
                start3: 43200,
                end3: 64740,
                start4: 64800,
                end4: 86340,
                intervals: {
                    start1: '00:00',
                    end1: '05:59',
                    start2: '06:00',
                    end2: '11:59',
                    start3: '12:00',
                    end3: '17:59',
                    start4: '18:00',
                    end4: '23:59',
                }
            }
        }

        describe('API - добавление', () => {

            bef();

            aft();

            const tz = {
                name: params.tz.name,
                items: [
                    {begin: params.tz.start1, end: params.tz.end1},
                    {begin: params.tz.start2, end: params.tz.end2},
                    {begin: params.tz.start3, end: params.tz.end3},
                    {begin: params.tz.start4, end: params.tz.end4}]
            };
            addTZ(tz);

            it('Добавление недельного графика', async () => {
                const cook = await page.base.getCookie('token');
                const get = await api.getAccessSchedules({type: 1}, cook.text);
                const tz = JSON.parse(get.text).intervals;
                const week = {
                    name: params.name,
                    comment: params.description,
                    items: {
                        days: [
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']},
                            {id: tz[2]['id']}],
                        holidays: [
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']},
                            {dayId: tz[2]['id']}]
                    }
                };
                await dec.simple(api.putArrayWeek,
                    [[week], cook.text],
                    api.putArrayWeek);
            });

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 5 строк', async () => await dec.simple(el.table.size,
                [5, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Недельный график',
                el.table));



        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.description,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Недельный график', entry.max],
                    'Недельный график',
                    el.input))
            });

            describe('Проверка интервала "Понедельник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'ПН',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });
            });

            describe('Проверка интервала "Вторник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [2, entry.max],
                        'ВТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Среда"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [3, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [3, entry.max],
                        'СР',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Четеверг"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [4, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [4, entry.max],
                        'ЧТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Пятница"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [5, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [5, entry.max],
                        'ПТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });


            });

            describe('Проверка интервала "Суббота"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [6, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [6, entry.max],
                        'СБ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Воскресенье"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [7, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [7, entry.max],
                        'ВС',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 1"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [8, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [8, entry.max],
                        'Тип 1',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 2"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [9, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [9, entry.max],
                        'Тип 2',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 3"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [10, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [10, entry.max],
                        'Тип 3',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 4"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [11, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [11, entry.max],
                        'Тип 4',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 5"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [12, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [12, entry.max],
                        'Тип 5',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 6"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [13, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [13, entry.max],
                        'Тип 6',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 7"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [14, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [14, entry.max],
                        'Тип 7',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 8"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [15, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [15, entry.max],
                        'Тип 8',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                })

            })

        });

        describe('Редактирование', () => {

            bef();

            aft();

            describe('Удаление общих параметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Удаление "Название"', async () => await dec.simple(el.input.backSpace,
                    ['Название', '', entry.max],
                    el.input));

                it('Удаление "Описание"', async () => await dec.simple(el.input.backSpace,
                    ['Описание', '', entry.max],
                    el.input));

            });

            describe('Изменение интервала "Понедельник"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Изменение интервала "Вторник"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Изменение интервала "Среда"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Четверг"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Пятница"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Суббота"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Воскресенье"', () => {

                it('Скролл интервалов', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.scrollWeekTop,
                        [],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 1"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 2"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 3"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 4"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 5"', () => {

                it('Скролл интервалов', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.scrollWeekTop,
                        [],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 6"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 7"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Добавление интервала "Тип 8"', () => {

                it('Нажатие по интервалу', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.button.handler,
                    ['Редактировать', entry.max],
                    el.button));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [3, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [1, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                })

            });

            describe('Сохранение изменений', () => {

                it('Кнопка "Сохранить изменения" - заблокирована', async () => await dec.simple(el.button.disabled,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simpleFalse(el.button.handlerNoActive,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение "title", "url" не изменилось',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));
            })
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 5 строк', async () => await dec.simple(el.table.size,
                [5, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Недельный график',
                el.table));



        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.description,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Недельный график', entry.max],
                    'Недельный график',
                    el.input))
            });

            describe('Проверка интервала "Понедельник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'ПН',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });
            });

            describe('Проверка интервала "Вторник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [2, entry.max],
                        'ВТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Среда"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [3, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [3, entry.max],
                        'СР',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Четеверг"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [4, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [4, entry.max],
                        'ЧТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Пятница"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [5, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [5, entry.max],
                        'ПТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });


            });

            describe('Проверка интервала "Суббота"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [6, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [6, entry.max],
                        'СБ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Воскресенье"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [7, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [7, entry.max],
                        'ВС',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 1"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [8, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [8, entry.max],
                        'Тип 1',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 2"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [9, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [9, entry.max],
                        'Тип 2',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [9, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [9, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 3"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [10, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [10, entry.max],
                        'Тип 3',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 4"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [11, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [11, entry.max],
                        'Тип 4',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 5"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [12, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [12, entry.max],
                        'Тип 5',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 6"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [13, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [13, entry.max],
                        'Тип 6',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 7"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [14, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [14, entry.max],
                        'Тип 7',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                });

            });

            describe('Проверка интервала "Тип 8"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [15, entry.max],
                        params.tz.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [15, entry.max],
                        'Тип 8',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 1, entry.max],
                        params.tz.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 1, entry.max],
                        params.tz.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 2, entry.max],
                        params.tz.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 2, entry.max],
                        params.tz.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 3, entry.max],
                        params.tz.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 3, entry.max],
                        params.tz.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 4, entry.max],
                        params.tz.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 4, entry.max],
                        params.tz.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                })

            })

        });

        describe('Удаление тестовых данных', () => {
            bef();
            aft();
            removeW();
            removeTZ();
        });

    });

    // Попытка редактирования с удалением параметра  "Название".
    const WRemoveName = () => describe('Недельный график. Редактирование. ' +
        'Попытка редактирования с удалением параметра  "Название".', () => {

        const params = {
            name: 'WRemoveName'
        }

        describe('API - добавление', () => {

            bef();

            aft();

            const week = {
                name: params.name,
                items: {
                    days: [
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1}],
                    holidays: [
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1}]
                }
            };
            addWeek(week);

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строк', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                '',
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Недельный график',
                el.table));

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    '',
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Недельный график', entry.max],
                    'Недельный график',
                    el.input))
            });

            describe('Проверка интервала "Понедельник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'ПН',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала "Вторник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [2, entry.max],
                        'ВТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Среда"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [3, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [3, entry.max],
                        'СР',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Четеверг"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [4, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [4, entry.max],
                        'ЧТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Пятница"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [5, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [5, entry.max],
                        'ПТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Суббота"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [6, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [6, entry.max],
                        'СБ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Воскресенье"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [7, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [7, entry.max],
                        'ВС',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 1"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [8, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [8, entry.max],
                        'Тип 1',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 2"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [9, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [9, entry.max],
                        'Тип 2',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 3"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [10, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [10, entry.max],
                        'Тип 3',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 4"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [11, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [11, entry.max],
                        'Тип 4',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 5"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [12, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [12, entry.max],
                        'Тип 5',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 6"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [13, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [13, entry.max],
                        'Тип 6',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 7"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [14, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [14, entry.max],
                        'Тип 7',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 8"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [15, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [15, entry.max],
                        'Тип 8',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            })

        });

        describe('Редактирование', () => {

            bef();

            aft();

            describe('Удаление "Название"', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Удаление "Название"', async () => await dec.simple(el.input.backSpace,
                    ['Название', '', entry.max],
                    el.input));

            });

            describe('Сохранение изменений', () => {

                it('Кнопка "Сохранить изменения" - заблокирована', async () => await dec.simple(el.button.disabled,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simpleFalse(el.button.handlerNoActive,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение "title", "url" не изменилось',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));
            })
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строк', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                '',
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Недельный график',
                el.table));



        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    '',
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Недельный график', entry.max],
                    'Недельный график',
                    el.input))
            });

            describe('Проверка интервала "Понедельник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'ПН',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала "Вторник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [2, entry.max],
                        'ВТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Среда"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [3, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [3, entry.max],
                        'СР',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Четеверг"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [4, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [4, entry.max],
                        'ЧТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Пятница"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [5, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [5, entry.max],
                        'ПТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Суббота"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [6, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [6, entry.max],
                        'СБ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Воскресенье"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [7, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [7, entry.max],
                        'ВС',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 1"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [8, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [8, entry.max],
                        'Тип 1',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 2"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [9, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [9, entry.max],
                        'Тип 2',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 3"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [10, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [10, entry.max],
                        'Тип 3',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 4"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [11, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [11, entry.max],
                        'Тип 4',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 5"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [12, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [12, entry.max],
                        'Тип 5',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 6"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [13, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [13, entry.max],
                        'Тип 6',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 7"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [14, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [14, entry.max],
                        'Тип 7',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 8"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [15, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [15, entry.max],
                        'Тип 8',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            })

        });

        describe('Удаление тестовых данных', () => {
            bef();
            aft();
            removeW();
            removeTZ();
        });

    });

    // Попытка редактирования с дублированием "Название", "Описание" и "Временной критерий" — "Недельный график".
    const WDuplicateW = () => describe('Недельный график. Редактирование. Попытка редактирования с дублированием ' +
        '"Название", "Описание" и "Временной критерий" — "Недельный график".', () => {

        const params = {
            week1: {
                name: 'WDuplicateWName',
                description: 'WDuplicateWDescription',
            },
            week2: {
                name: 'TestName',
                description: 'TestDescription'
            },
            error: 'Такое название уже используется',
        };

        describe('API - добавление', () => {

            bef();

            aft();

            const week1 = {
                name: params.week1.name,
                comment: params.week1.description,
                items: {
                    days: [
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1}],
                    holidays: [
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1}]
                }
            };
            addWeek(week1);

            const week2 = {
                name: params.week2.name,
                comment: params.week2.description,
                items: {
                    days: [
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1},
                        {id: 1}],
                    holidays: [
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1},
                        {dayId: 1}]
                }
            };
            addWeek(week2);

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            describe('Общая проверка', () => {
                it('Отображение в таблице 5строк', async () => await dec.simple(el.table.size,
                    [5, entry.max],
                    el.table));
            });

            describe('Проверка недели 1', () => {
                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.week1.name, entry.max],
                    el.input));

                it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                    [1, entry.max],
                    el.table));

                it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.week1.name,
                    el.table));

                it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    params.week1.description,
                    el.table));

                it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Недельный график',
                    el.table));

                it('Удаление поиск', async () => await dec.simple(el.input.iconClear,
                    ['', 'Поиск...',  entry.max],
                    el.input));

                it('Отображение в таблице 5 строк', async () => await dec.simple(el.table.size,
                    [5, entry.max],
                    el.table));
            });

            describe('Проверка недели 2', () => {
                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.week2.name, entry.max],
                    el.input));

                it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                    [1, entry.max],
                    el.table));

                it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.week2.name,
                    el.table));

                it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    params.week2.description,
                    el.table));

                it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Недельный график',
                    el.table));
            });


        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.week2.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.week2.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.week2.description,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Недельный график', entry.max],
                    'Недельный график',
                    el.input))
            });

            describe('Проверка интервала "Понедельник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'ПН',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала "Вторник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [2, entry.max],
                        'ВТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Среда"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [3, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [3, entry.max],
                        'СР',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Четеверг"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [4, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [4, entry.max],
                        'ЧТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Пятница"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [5, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [5, entry.max],
                        'ПТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Суббота"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [6, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [6, entry.max],
                        'СБ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Воскресенье"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [7, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [7, entry.max],
                        'ВС',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 1"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [8, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [8, entry.max],
                        'Тип 1',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 2"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [9, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [9, entry.max],
                        'Тип 2',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 3"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [10, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [10, entry.max],
                        'Тип 3',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 4"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [11, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [11, entry.max],
                        'Тип 4',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 5"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [12, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [12, entry.max],
                        'Тип 5',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 6"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [13, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [13, entry.max],
                        'Тип 6',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 7"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [14, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [14, entry.max],
                        'Тип 7',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 8"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [15, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [15, entry.max],
                        'Тип 8',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            })

        });

        describe('Редактирование второй недели', () => {

            bef();

            aft();

            describe('Редактирование общих параметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.week2.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Удаление "Название"', async () => await dec.simple(el.input.backSpace,
                    ['Название', '', entry.max],
                    el.input));

                it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.week1.name, entry.max],
                    el.input));

                it('Удаление "Описание"', async () => await dec.simple(el.input.backSpace,
                    ['Описание', '', entry.max],
                    el.input));

                it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                    ['Описание', '', params.week1.description, entry.max],
                    el.input));

            });

            describe('Сохранение изменений', () => {

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение ошибки', async () => await dec.simple(el.error.error,
                    [params.error, entry.max],
                    el.error));
            });


        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            describe('Общая проверка', () => {
                it('Отображение в таблице 5строк', async () => await dec.simple(el.table.size,
                    [5, entry.max],
                    el.table));
            });

            describe('Проверка недели 1', () => {
                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.week1.name, entry.max],
                    el.input));

                it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                    [1, entry.max],
                    el.table));

                it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.week1.name,
                    el.table));

                it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    params.week1.description,
                    el.table));

                it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Недельный график',
                    el.table));

                it('Удаление поиск', async () => await dec.simple(el.input.iconClear,
                    ['', 'Поиск...',  entry.max],
                    el.input));

                it('Отображение в таблице 5 строк', async () => await dec.simple(el.table.size,
                    [5, entry.max],
                    el.table));
            });

            describe('Проверка недели 2', () => {
                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.week2.name, entry.max],
                    el.input));

                it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                    [1, entry.max],
                    el.table));

                it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Название', 1, 1, entry.max],
                    params.week2.name,
                    el.table));

                it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Описание', 1, 2, entry.max],
                    params.week2.description,
                    el.table));

                it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                    ['Тип', 1, 3, entry.max],
                    'Недельный график',
                    el.table));
            });


        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.week2.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.week2.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.week2.description,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Недельный график', entry.max],
                    'Недельный график',
                    el.input))
            });

            describe('Проверка интервала "Понедельник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [1, entry.max],
                        'ПН',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала "Вторник"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [2, entry.max],
                        'ВТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Среда"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [3, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [3, entry.max],
                        'СР',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Четеверг"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [4, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [4, entry.max],
                        'ЧТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Пятница"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [5, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [5, entry.max],
                        'ПТ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Суббота"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [6, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [6, entry.max],
                        'СБ',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Воскресенье"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [7, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [7, entry.max],
                        'ВС',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 1"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [8, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [8, entry.max],
                        'Тип 1',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 2"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [9, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [9, entry.max],
                        'Тип 2',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 3"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [10, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [10, entry.max],
                        'Тип 3',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 4"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [11, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [11, entry.max],
                        'Тип 4',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 5"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [12, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [12, entry.max],
                        'Тип 5',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 6"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [13, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [13, entry.max],
                        'Тип 6',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 7"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [14, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [14, entry.max],
                        'Тип 7',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала "Тип 8"', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [15, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                        [15, entry.max],
                        'Тип 8',
                        page.accessTemplateScheduleChangePage)
                });

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временных блоков в интервале', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            })

        });

        describe('Удаление тестовых данных', () => {
            bef();
            aft();
            removeW();
            removeTZ();
        });

    });

    // Недельный график. Редактирование. Дублирования "Название", "Описание" и
    // '"Временной критерий" — "Временные зоны", "Скользящий посуточный график", "Скользящий понедельный график".
    const WDuplicateTZSTZSW = () => describe('Недельный график. Редактирование. Дублирования "Название", "Описание" и '+
        '"Временной критерий" — "Временные зоны", "Скользящий посуточный график", "Скользящий понедельный график"',
        () => {

        const params = {
            name: 'WDuplicateTZSTZSWName',
            description: 'WDuplicateTZSTZSWDescription',
            start: 0,
            end: 10000,
            date: '2001-01-01',
            error: 'Такое название уже используется',
            week: {
                name: 'TestName',
                description: 'TestDescription'
            }
        };

            describe('API - добавление', () => {

                bef();

                aft();

                const tz = {
                    name: params.name,
                    comment: params.description,
                    items: [{
                        begin: params.start,
                        end: params.end
                    }]
                };
                addTZ(tz);

                const week = {
                    name: params.week.name,
                    comment: params.week.description,
                    items: {
                        days: [{id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}, {id: 1}],
                        holidays: [{dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1}, {dayId: 1},
                            {dayId: 1}]
                    }
                };
                addWeek(week);

                const stz = {
                    name: params.name,
                    comment: params.description,
                    begin_date: params.date,
                    items: {days: [{id: 1}]}
                };
                addSTZ(stz);

                it('Добавление скользящего понедельного графика', async () => {
                    const cook = await page.base.getCookie('token');
                    const get = await api.getAccessSchedules({type: 2}, cook.text);
                    const parse = JSON.parse(get.text);
                    const sw = {
                        name: params.name,
                        comment: params.description,
                        begin_date: params.date,
                        items: [parse[0]['id']]
                    };
                    await dec.simple(api.putArraySW,
                        [[sw], cook.text],
                        api.putArraySW)
                })

            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 7 строки', async () => await dec.simple(el.table.size,
                    [7, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 3 строки', async () => await dec.simple(el.table.size,
                    [3, entry.max],
                    el.table));

            });

            describe('Проверка параметров', () => {

                bef();

                aft();

                describe('Проверка общих праметров', () => {

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.week.name, entry.max],
                        el.input));

                    it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                        [entry.max],
                        el.table));

                    it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                        [1, entry.max],
                        el.table));

                    it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.edit, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                        ['Название', '', entry.max],
                        params.week.name,
                        el.input));

                    it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                        ['Описание', '', entry.max],
                        params.week.description,
                        el.input));

                    it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                        ['Временной критерий', 'Недельный график', entry.max],
                        'Недельный график',
                        el.input))
                });

                describe('Проверка интервала "Понедельник"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [1, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [1, entry.max],
                            'ПН',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала "Вторник"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [2, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [2, entry.max],
                            'ВТ',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [2, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [2, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Среда"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [3, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [3, entry.max],
                            'СР',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [3, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [3, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Четеверг"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [4, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [4, entry.max],
                            'ЧТ',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [4, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [4, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Пятница"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [5, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [5, entry.max],
                            'ПТ',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [5, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [5, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Суббота"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [6, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [6, entry.max],
                            'СБ',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [6, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [6, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Воскресенье"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [7, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [7, entry.max],
                            'ВС',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [7, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [7, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 1"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [8, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [8, entry.max],
                            'Тип 1',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [8, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [8, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 2"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [9, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [9, entry.max],
                            'Тип 2',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [9, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [9, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 3"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [10, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [10, entry.max],
                            'Тип 3',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [10, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [10, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 4"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [11, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [11, entry.max],
                            'Тип 4',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [11, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [11, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 5"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [12, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [12, entry.max],
                            'Тип 5',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [12, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [12, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 6"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [13, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [13, entry.max],
                            'Тип 6',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [13, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [13, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 7"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [14, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [14, entry.max],
                            'Тип 7',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [14, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [14, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 8"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [15, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [15, entry.max],
                            'Тип 8',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [15, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [15, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                })

            });

            describe('Редактирование недельного графика', () => {

                bef();

                aft();

                describe('Добавление общих параметров', () => {

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.week.name, entry.max],
                        el.input));

                    it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                        [entry.max],
                        el.table));

                    it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                        [1, entry.max],
                        el.table));

                    it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.edit, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Удаление "Название"', async () => await dec.simple(el.input.backSpace,
                        ['Название', '', entry.max],
                        el.input));

                    it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                        ['Название', '', params.name, entry.max],
                        el.input));

                });

                describe('Сохранение изменений', () => {

                    it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                        ['Сохранить изменения', entry.max],
                        el.button));

                    it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                        ['Сохранено успешно', entry.max],
                        el.success));
                })
            });

            describe('Проверка таблицы', () => {

                bef();

                aft();

                it('Отображение в таблице 7 строки', async () => await dec.simple(el.table.size,
                    [7, entry.max],
                    el.table));

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                    [4, entry.max],
                    el.table));

            });

            describe('Проверка параметров', () => {

                bef();

                aft();

                describe('Проверка общих праметров', () => {

                    it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                        ['', 'Поиск...', params.week.description, entry.max],
                        el.input));

                    it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                        [entry.max],
                        el.table));

                    it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                        [1, entry.max],
                        el.table));

                    it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                        [but.edit, entry.max],
                        el.butIcBefore));

                    it('Отображение "title", "url"',
                        async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                            [entry.max],
                            page.accessTemplateScheduleChangePage));

                    it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                        ['Название', '', entry.max],
                        params.name,
                        el.input));

                    it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                        ['Описание', '', entry.max],
                        params.week.description,
                        el.input));

                    it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                        ['Временной критерий', 'Недельный график', entry.max],
                        'Недельный график',
                        el.input))
                });

                describe('Проверка интервала "Понедельник"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [1, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [1, entry.max],
                            'ПН',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [1, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })
                });

                describe('Проверка интервала "Вторник"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [2, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [2, entry.max],
                            'ВТ',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [2, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [2, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Среда"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [3, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [3, entry.max],
                            'СР',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [3, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [3, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Четеверг"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [4, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [4, entry.max],
                            'ЧТ',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [4, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [4, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Пятница"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [5, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [5, entry.max],
                            'ПТ',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [5, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [5, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Суббота"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [6, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [6, entry.max],
                            'СБ',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [6, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [6, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Воскресенье"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [7, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [7, entry.max],
                            'ВС',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [7, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [7, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 1"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [8, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [8, entry.max],
                            'Тип 1',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [8, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [8, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 2"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [9, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [9, entry.max],
                            'Тип 2',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [9, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [9, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 3"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [10, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [10, entry.max],
                            'Тип 3',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [10, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [10, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 4"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [11, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [11, entry.max],
                            'Тип 4',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [11, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [11, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 5"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [12, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [12, entry.max],
                            'Тип 5',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [12, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [12, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 6"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [13, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [13, entry.max],
                            'Тип 6',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [13, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [13, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 7"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [14, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [14, entry.max],
                            'Тип 7',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [14, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [14, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                });

                describe('Проверка интервала "Тип 8"', () => {

                    it('Назавание', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                            [15, entry.max],
                            'Никогда',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Заглавие', async () => {
                        await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [15, entry.max],
                            'Тип 8',
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отображения интервала', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [15, entry.max],
                            page.accessTemplateScheduleChangePage)
                    });

                    it('Отсутствие временных блоков в интервале', async () => {
                        await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                            [15, entry.max],
                            page.accessTemplateScheduleChangePage)
                    })

                })

            });

            describe('Удаление тестовых данных', () => {
                bef();
                aft();
                removeSW();
                removeSTZ();
                removeW();
                removeTZ();
            });

        });
    
    // Скользящий посуточный график
    // Добавление необязательных параметров с минимальным количеством параметров.
    const STZAddParamsMinParams = () => describe('Скользящий посуточный график. Редактирование. ' +
        'Добавление необязательных параметров с минимальным количеством параметров.', () => {

        const params = {
            name: 'STZAddParamsMinParamsName',
            description: 'STZAddParamsMinParamsDescription',
            date: '2001-01-01'
        }

        describe('API - добавление', () => {

            bef();

            aft();

            const stz = {
                name: params.name,
                begin_date: params.date,
                items: {days: [{id: 1}]}
            };
            addSTZ(stz);

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                '',
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Скользящий посуточный график',
                el.table));

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    '',
                    el.input));

                it('Проверка "Дата начала смены"', async () => {
                    await dec.simpleText(el.input.getValue,
                        ['Дата начала смены', '', entry.max],
                        params.date,
                        el.input)
                });

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Скользящий посуточный график', entry.max],
                    'Скользящий посуточный график',
                    el.input));
            });

            describe('Проверка интервала День 1', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [1, entry.max],
                    'День 1',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временного блока', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                })
            })

        });

        describe('Редактирование', () => {

            bef();

            aft();

            describe('Редактирование общих параметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                    ['Описание', '', params.description, entry.max],
                    el.input));

            });

            describe('Добавление "День 2"', () => {
                it('Нажатие кнопки "Добавить"', async () => dec.simple(el.butIcBefore.handler,
                    [but.add, entry.max],
                    el.butIcBefore));

                it('Отображенение модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.init,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Отображение интервала', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.interval,
                        [2, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие по интервалу', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                        [2, entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Интервал выделен', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });

                it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                    ['Применить', entry.max],
                    el.button));

                it('Отсутствие модального окна выборы временной зоны', async () => {
                    await dec.simple(el.modal.timeZoneModalSelect.initClose,
                        [entry.max],
                        el.modal.timeZoneModalSelect)
                });
            });

            describe('Сохранение изменений', () => {

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success));
            });
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 4 строки', async () => await dec.simple(el.table.size,
                [4, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Поле "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Поле "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Поле "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Скользящий посуточный график',
                el.table));

        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.description,
                    el.input));

                it('Проверка "Дата начала смены"', async () => {
                    await dec.simpleText(el.input.getValue,
                        ['Дата начала смены', '', entry.max],
                        params.date,
                        el.input)
                });

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Скользящий посуточный график', entry.max],
                    'Скользящий посуточный график',
                    el.input));
            });

            describe('Проверка интервала День 1', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [1, entry.max],
                    'День 1',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временного блока', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 2', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        'Всегда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [2, entry.max],
                    'День 2',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 1, entry.max],
                        '00:00',
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 1, entry.max],
                        '23:59',
                        page.accessTemplateScheduleChangePage)
                });
            });

        });

        describe('Удаление тестовых данных', () => {
            bef();
            aft();
            removeSW();
            removeSTZ();
            removeW();
            removeTZ();
        });

    });

    // Удаление необязательных параметров с максимальным количеством параметров.
    const STZRemoveParamsMaxParams = () => describe('Скользящий посуточный график. Редактирование. ' +
        'Удаление необязательных параметров с максимальным количеством параметров.', () => {

        const params = {
            name: 'STZRemoveParamsMaxParamsName',
            description: 'STZRemoveParamsMaxParamsDescription',
            date: '2022-01-01',
            tz1: {
                name: 'tz1',
                start: 0,
                end: 1800,
                intervals: {
                    start: '00:00',
                    end: '00:30',
                }
            },
            tz2: {
                name: 'tz2',
                start: 0,
                end: 86340,
                intervals: {
                    start: '00:00',
                    end: '23:59',
                }
            },
            tz3: {
                name: 'tz3',
                start: 0,
                end: 21540,
                intervals: {
                    start: '00:00',
                    end: '05:59',
                }
            },
            tz4: {
                name: 'tz4',
                start1: 0,
                end1: 21540,
                start2: 21600,
                end2: 43140,
                intervals: {
                    start1: '00:00',
                    end1: '05:59',
                    start2: '06:00',
                    end2: '11:59',
                }
            },
            tz5: {
                name: 'tz5',
                start1: 0,
                end1: 21540,
                start2: 21600,
                end2: 43140,
                start3: 43200,
                end3: 64740,
                intervals: {
                    start1: '00:00',
                    end1: '05:59',
                    start2: '06:00',
                    end2: '11:59',
                    start3: '12:00',
                    end3: '17:59',
                }
            },
            tz6: {
                name: 'tz6',
                start1: 0,
                end1: 21540,
                start2: 21600,
                end2: 43140,
                start3: 43200,
                end3: 64740,
                start4: 64800,
                end4: 86340,
                intervals: {
                    start1: '00:00',
                    end1: '05:59',
                    start2: '06:00',
                    end2: '11:59',
                    start3: '12:00',
                    end3: '17:59',
                    start4: '18:00',
                    end4: '23:59',
                }
            },
        };

        describe('API - добавление', () => {

            bef();

            aft();

            const pn = {
                name: params.tz1.name,
                items: [{
                    begin: params.tz1.start,
                    end: params.tz1.end
                }]
            };
            addTZ(pn);

            const vt = {
                name: params.tz2.name,
                items: [{
                    begin: params.tz2.start,
                    end: params.tz2.end
                }]
            };
            addTZ(vt);

            const cht = {
                name: params.tz3.name,
                items: [{
                    begin: params.tz3.start,
                    end: params.tz3.end
                }]
            };
            addTZ(cht);

            const pt = {
                name: params.tz4.name,
                items: [
                    {begin: params.tz4.start1, end: params.tz4.end1},
                    {begin: params.tz4.start2, end: params.tz4.end2}]
            };
            addTZ(pt);

            const sb = {
                name: params.tz5.name,
                items: [
                    {begin: params.tz5.start1, end: params.tz5.end1},
                    {begin: params.tz5.start2, end: params.tz5.end2},
                    {begin: params.tz5.start3, end: params.tz5.end3}]
            };
            addTZ(sb);

            const vs = {
                name: params.tz6.name,
                items: [
                    {begin: params.tz6.start1, end: params.tz6.end1},
                    {begin: params.tz6.start2, end: params.tz6.end2},
                    {begin: params.tz6.start3, end: params.tz6.end3},
                    {begin: params.tz6.start4, end: params.tz6.end4}
                ]
            };
            addTZ(vs);

            it('Добавление скользящего посуточного графика', async () => {
                const cook = await page.base.getCookie('token');
                const get = await api.getAccessSchedules({type: 1}, cook.text);
                const tz = JSON.parse(get.text).intervals;
                const stz = {
                    name: params.name,
                    comment: params.description,
                    begin_date: params.date,
                    items: {
                        days:
                            [
                                {id: 1}, {id: 2}, {id: tz[2]['id']}, {id: tz[3]['id']}, {id: tz[4]['id']},
                                {id: tz[5]['id']}, {id: tz[6]['id']}, {id: tz[7]['id']}, {id: 1}, {id: 2},
                                {id: tz[2]['id']}, {id: tz[3]['id']}, {id: tz[4]['id']}, {id: tz[5]['id']},
                                {id: tz[6]['id']}, {id: tz[7]['id']}, {id: 1}, {id: 2}, {id: tz[2]['id']},
                                {id: tz[3]['id']}, {id: tz[4]['id']}, {id: tz[5]['id']}, {id: tz[6]['id']},
                                {id: tz[7]['id']}, {id: 1}, {id: 2}, {id: tz[2]['id']}, {id: tz[3]['id']},
                                {id: tz[4]['id']}, {id: tz[5]['id']}
                        ]
                    }
                };
                await dec.simple(api.putArraySTZ,
                    [[stz], cook.text],
                    api.putArrayWeek);
            })

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 10 строки', async () => await dec.simple(el.table.size,
                [10, entry.max],
                el.table));


            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Проверка столбца "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.description,
                el.table));

            it('Проверка столбца "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Скользящий посуточный график',
                el.table))
        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.description,
                    el.input));

                it('Проверка "Дата начала смены"', async () => await dec.simpleText(el.input.getValue,
                    ['Дата начала смены', '', entry.max],
                    params.date,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Скользящий посуточный график', entry.max],
                    'Скользящий посуточный график',
                    el.input))
            });

            describe('Проверка интервала День 1', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [1, entry.max],
                    'День 1',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временного блока', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала День 2', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [2, entry.max],
                        'Всегда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [2, entry.max],
                    'День 2',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [2, 1, entry.max],
                        '00:00',
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [2, 1, entry.max],
                        '23:59',
                        page.accessTemplateScheduleChangePage)
                })


            });

            describe('Проверка интервала День 3', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [3, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [3, entry.max],
                    'День 3',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [3, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [3, 1, entry.max],
                        params.tz1.intervals.start,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [3, 1, entry.max],
                        params.tz1.intervals.end,
                        page.accessTemplateScheduleChangePage)
                })


            });

            describe('Проверка интервала День 4', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [4, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [4, entry.max],
                    'День 4',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [4, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [4, 1, entry.max],
                        params.tz2.intervals.start,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [4, 1, entry.max],
                        params.tz2.intervals.end,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 5', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [5, entry.max],
                        params.tz3.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [5, entry.max],
                    'День 5',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [5, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [5, 1, entry.max],
                        params.tz3.intervals.start,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [5, 1, entry.max],
                        params.tz3.intervals.end,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 6', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [6, entry.max],
                        params.tz4.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [6, entry.max],
                    'День 6',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [6, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 1, entry.max],
                        params.tz4.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 1, entry.max],
                        params.tz4.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [6, 2, entry.max],
                        params.tz4.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [6, 2, entry.max],
                        params.tz4.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 7', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [7, entry.max],
                        params.tz5.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [7, entry.max],
                    'День 7',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [7, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 1, entry.max],
                        params.tz5.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 1, entry.max],
                        params.tz5.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 2, entry.max],
                        params.tz5.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 2, entry.max],
                        params.tz5.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [7, 3, entry.max],
                        params.tz5.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [7, 3, entry.max],
                        params.tz5.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 8', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [8, entry.max],
                        params.tz6.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [8, entry.max],
                    'День 8',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [8, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 1, entry.max],
                        params.tz6.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 1, entry.max],
                        params.tz6.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 2, entry.max],
                        params.tz6.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 2, entry.max],
                        params.tz6.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 3, entry.max],
                        params.tz6.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 3, entry.max],
                        params.tz6.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [8, 4, entry.max],
                        params.tz6.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [8, 4, entry.max],
                        params.tz6.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 9', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [9, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [9, entry.max],
                    'День 9',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временного блока', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [9, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала День 10', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [10, entry.max],
                        'Всегда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [10, entry.max],
                    'День 10',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [10, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [10, 1, entry.max],
                        '00:00',
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [10, 1, entry.max],
                        '23:59',
                        page.accessTemplateScheduleChangePage)
                })


            });

            describe('Проверка интервала День 11', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [11, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [11, entry.max],
                    'День 11',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [11, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [11, 1, entry.max],
                        params.tz1.intervals.start,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [11, 1, entry.max],
                        params.tz1.intervals.end,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 12', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [12, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [12, entry.max],
                    'День 12',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [12, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [12, 1, entry.max],
                        params.tz2.intervals.start,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [12, 1, entry.max],
                        params.tz2.intervals.end,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 13', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [13, entry.max],
                        params.tz3.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [13, entry.max],
                    'День 13',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [13, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [13, 1, entry.max],
                        params.tz3.intervals.start,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [13, 1, entry.max],
                        params.tz3.intervals.end,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 14', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [14, entry.max],
                        params.tz4.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [14, entry.max],
                    'День 14',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [14, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 1, entry.max],
                        params.tz4.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 1, entry.max],
                        params.tz4.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [14, 2, entry.max],
                        params.tz4.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [14, 2, entry.max],
                        params.tz4.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 15', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [15, entry.max],
                        params.tz5.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [15, entry.max],
                    'День 15',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [15, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 1, entry.max],
                        params.tz5.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 1, entry.max],
                        params.tz5.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 2, entry.max],
                        params.tz5.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 2, entry.max],
                        params.tz5.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [15, 3, entry.max],
                        params.tz5.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [15, 3, entry.max],
                        params.tz5.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 16', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [16, entry.max],
                        params.tz6.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [16, entry.max],
                    'День 16',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [16, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [16, 1, entry.max],
                        params.tz6.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [16, 1, entry.max],
                        params.tz6.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [16, 2, entry.max],
                        params.tz6.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [16, 2, entry.max],
                        params.tz6.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [16, 3, entry.max],
                        params.tz6.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [16, 3, entry.max],
                        params.tz6.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [16, 4, entry.max],
                        params.tz6.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [16, 4, entry.max],
                        params.tz6.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 17', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [17, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [17, entry.max],
                    'День 17',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [17, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временного блока', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [17, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала День 18', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [18, entry.max],
                        'Всегда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [18, entry.max],
                    'День 18',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [18, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [18, 1, entry.max],
                        '00:00',
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [18, 1, entry.max],
                        '23:59',
                        page.accessTemplateScheduleChangePage)
                })


            });

            describe('Проверка интервала День 19', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [19, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [19, entry.max],
                    'День 19',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [19, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [19, 1, entry.max],
                        params.tz1.intervals.start,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [19, 1, entry.max],
                        params.tz1.intervals.end,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 20', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [20, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [20, entry.max],
                    'День 20',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [20, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [20, 1, entry.max],
                        params.tz2.intervals.start,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [20, 1, entry.max],
                        params.tz2.intervals.end,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 21', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [21, entry.max],
                        params.tz3.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [21, entry.max],
                    'День 21',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [21, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [21, 1, entry.max],
                        params.tz3.intervals.start,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [21, 1, entry.max],
                        params.tz3.intervals.end,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 22', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [22, entry.max],
                        params.tz4.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [22, entry.max],
                    'День 22',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [22, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [22, 1, entry.max],
                        params.tz4.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [22, 1, entry.max],
                        params.tz4.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [22, 2, entry.max],
                        params.tz4.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [22, 2, entry.max],
                        params.tz4.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 23', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [23, entry.max],
                        params.tz5.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [23, entry.max],
                    'День 23',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [23, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [23, 1, entry.max],
                        params.tz5.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [23, 1, entry.max],
                        params.tz5.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [23, 2, entry.max],
                        params.tz5.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [23, 2, entry.max],
                        params.tz5.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [23, 3, entry.max],
                        params.tz5.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [23, 3, entry.max],
                        params.tz5.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 24', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [24, entry.max],
                        params.tz6.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [24, entry.max],
                    'День 24',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [24, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [24, 1, entry.max],
                        params.tz6.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [24, 1, entry.max],
                        params.tz6.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [24, 2, entry.max],
                        params.tz6.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [24, 2, entry.max],
                        params.tz6.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [24, 3, entry.max],
                        params.tz6.intervals.start3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 3', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [24, 3, entry.max],
                        params.tz6.intervals.end3,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [24, 4, entry.max],
                        params.tz6.intervals.start4,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 4', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [24, 4, entry.max],
                        params.tz6.intervals.end4,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 25', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [25, entry.max],
                        'Никогда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [25, entry.max],
                    'День 25',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [25, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Отсутствие временного блока', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [25, entry.max],
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала День 26', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [26, entry.max],
                        'Всегда',
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [26, entry.max],
                    'День 26',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [26, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [26, 1, entry.max],
                        '00:00',
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [26, 1, entry.max],
                        '23:59',
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала День 27', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [27, entry.max],
                        params.tz1.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [27, entry.max],
                    'День 27',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [27, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [27, 1, entry.max],
                        params.tz1.intervals.start,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [27, 1, entry.max],
                        params.tz1.intervals.end,
                        page.accessTemplateScheduleChangePage)
                })

            });

            describe('Проверка интервала День 28', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [28, entry.max],
                        params.tz2.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [28, entry.max],
                    'День 28',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [28, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [28, 1, entry.max],
                        params.tz2.intervals.start,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [28, 1, entry.max],
                        params.tz2.intervals.end,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 29', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [29, entry.max],
                        params.tz3.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [29, entry.max],
                    'День 29',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [29, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [29, 1, entry.max],
                        params.tz3.intervals.start,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [29, 1, entry.max],
                        params.tz3.intervals.end,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Проверка интервала День 30', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [30, entry.max],
                        params.tz4.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [30, entry.max],
                    'День 30',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [30, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [30, 1, entry.max],
                        params.tz4.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [30, 1, entry.max],
                        params.tz4.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [30, 2, entry.max],
                        params.tz4.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [30, 2, entry.max],
                        params.tz4.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                })
            })

        });

        describe('Редактирование', () => {

            bef();

            aft();

            describe('Редактирование общих параметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Удаление "Описание"', async () => await dec.simple(el.input.backSpace,
                    ['Описание', '', entry.max],
                    el.input));

            });

            describe('Удаление День 1', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 2', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 3', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 4', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 5', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 6', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 7', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 8', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 9', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 10', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 11', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 12', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 13', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 14', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 15', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 16', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 17', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 18', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 19', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 20', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 21', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 22', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 23', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 24', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 25', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 26', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 27', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 28', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Удаление День 29', () => {

                it('Нажатие по интервалу',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Интервал выделен',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Нажатие кнопки "Удалить"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.delete, entry.max],
                    el.butIcBefore));
            });

            describe('Сохранение изменений', () => {

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success));
            });
        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 10 строки', async () => await dec.simple(el.table.size,
                [10, entry.max],
                el.table));


            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.name,
                el.table));

            it('Проверка столбца "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                '',
                el.table));

            it('Проверка столбца "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Скользящий посуточный график',
                el.table))
        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    '',
                    el.input));

                it('Проверка "Дата начала смены"', async () => await dec.simpleText(el.input.getValue,
                    ['Дата начала смены', '', entry.max],
                    params.date,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Скользящий посуточный график', entry.max],
                    'Скользящий посуточный график',
                    el.input))
            });

            describe('Проверка интервала День 1', () => {

                it('Назавание', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                        [1, entry.max],
                        params.tz4.name,
                        page.accessTemplateScheduleChangePage)
                });

                it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                    [1, entry.max],
                    'День 1',
                    page.accessTemplateScheduleChangePage));

                it('Отображения интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.interval,
                        [1, entry.max],
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 1, entry.max],
                        params.tz4.intervals.start1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 1', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 1, entry.max],
                        params.tz4.intervals.end1,
                        page.accessTemplateScheduleChangePage)
                });

                it('Начало временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                        [1, 2, entry.max],
                        params.tz4.intervals.start2,
                        page.accessTemplateScheduleChangePage)
                });

                it('Окончание временного блока 2', async () => {
                    await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                        [1, 2, entry.max],
                        params.tz4.intervals.end2,
                        page.accessTemplateScheduleChangePage)
                })
            });

            describe('Отсутствие интервала День 2', () => {
                it('Отсутствие интервала', async () => {
                    await dec.simple(page.accessTemplateScheduleChangePage.noTimeInterval,
                        [2, entry.max],
                        page.accessTemplateScheduleChangePage)
                });
            });

        });

        describe('Удаление тестовых данных', () => {
            bef();
            aft();
            removeSTZ();
            removeTZ();
        });

    });

    // Редактирование всех параметров с максимальным количеством параметров.
    const STZEditALLParamsMaxParams = () => describe('Скользящий посуточный график. Редактирование. ' +
        'Редактирование всех параметров с максимальным количеством параметров.', () => {

        const params = {
            stz1: {
                name: 'STZEditALLParamsMaxParamsName',
                description: 'STZEditALLParamsMaxParamsDescription',
                date: '2022-01-01'
            },
            stz2: {
                name: 'STZEditALLParamsMaxParamsNameUpdate',
                description: 'STZEditALLParamsMaxParamsDescriptionUpdate',
                date: '2023-01-01'
            },
            tz1: {
                name: 'tz1',
                start: 0,
                end: 1800,
                intervals: {
                    start: '00:00',
                    end: '00:30',
                }
            },
            tz2: {
                name: 'tz2',
                start: 0,
                end: 86340,
                intervals: {
                    start: '00:00',
                    end: '23:59',
                }
            },
        };

        describe('API - добавление', () => {

            bef();

            aft();

            const tz1 = {
                name: params.tz1.name,
                items: [{
                    begin: params.tz1.start,
                    end: params.tz1.end
                }]
            };
            addTZ(tz1);

            const tz2 = {
                name: params.tz2.name,
                items: [{
                    begin: params.tz2.start,
                    end: params.tz2.end
                }]
            };
            addTZ(tz2);

            it('Добавление скользящего посуточного графика', async () => {
                const cook = await page.base.getCookie('token');
                const get = await api.getAccessSchedules({type: 1}, cook.text);
                const tz = JSON.parse(get.text).intervals;
                const stz = {
                    name: params.stz1.name,
                    comment: params.stz1.description,
                    begin_date: params.stz1.date,
                    items: {
                        days:
                            [
                                {id: tz[2]['id']}, {id: tz[2]['id']}, {id: tz[2]['id']}, {id: tz[2]['id']},
                                {id: tz[2]['id']}, {id: tz[2]['id']}, {id: tz[2]['id']}, {id: tz[2]['id']},
                                {id: tz[2]['id']}, {id: tz[2]['id']}, {id: tz[2]['id']}, {id: tz[2]['id']},
                                {id: tz[2]['id']}, {id: tz[2]['id']}, {id: tz[2]['id']}, {id: tz[2]['id']},
                                {id: tz[2]['id']}, {id: tz[2]['id']}, {id: tz[2]['id']}, {id: tz[2]['id']},
                                {id: tz[2]['id']}, {id: tz[2]['id']}, {id: tz[2]['id']}, {id: tz[2]['id']},
                                {id: tz[2]['id']}, {id: tz[2]['id']}, {id: tz[2]['id']}, {id:tz[2]['id']},
                                {id: tz[2]['id']}, {id: tz[2]['id']}
                            ]
                    }
                };
                await dec.simple(api.putArraySTZ,
                    [[stz], cook.text],
                    api.putArrayWeek);
            })

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 6 строк', async () => await dec.simple(el.table.size,
                [6, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.stz1.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.stz1.name,
                el.table));

            it('Проверка столбца "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.stz1.description,
                el.table));

            it('Проверка столбца "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Скользящий посуточный график',
                el.table))
        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.stz1.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.stz1.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.stz1.description,
                    el.input));

                it('Проверка "Дата начала смены"', async () => await dec.simpleText(el.input.getValue,
                    ['Дата начала смены', '', entry.max],
                    params.stz1.date,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Скользящий посуточный график', entry.max],
                    'Скользящий посуточный график',
                    el.input))
            });

            [...Array(30).keys()].forEach(item => {

                return(
                    describe(`Проверка интервала День ${item + 1}`, () => {

                        it('Назавание',
                            async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [`${item + 1}`, entry.max],
                                params.tz1.name,
                                page.accessTemplateScheduleChangePage));

                        it('Заглавие', async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [`${item + 1}`, entry.max],
                            `День ${item + 1}`,
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала', async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [`${item + 1}`, entry.max],
                            page.accessTemplateScheduleChangePage));

                        it('Начало временного блока',
                            async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [`${item + 1}`, 1, entry.max],
                                params.tz1.intervals.start,
                                page.accessTemplateScheduleChangePage));

                        it('Окончание временного блока',
                            async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [`${item + 1}`, 1, entry.max],
                                params.tz1.intervals.end,
                                page.accessTemplateScheduleChangePage));

                    })
                )
            });

        });

        describe('Редактирование', () => {

            bef();

            aft();

            describe('Редактирование общих параметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.stz1.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Удаление "Название"', async () => await dec.simple(el.input.backSpace,
                    ['Название', '', entry.max],
                    el.input));

                it('Ввод "Название"', async () => await dec.simple(el.input.sendKeys,
                    ['Название', '', params.stz2.name, entry.max],
                    el.input));

                it('Удаление "Описание"', async () => await dec.simple(el.input.backSpace,
                    ['Описание', '', entry.max],
                    el.input));

                it('Ввод "Описание"', async () => await dec.simple(el.input.sendKeys,
                    ['Описание', '', params.stz2.description, entry.max],
                    el.input));
            });

            [...Array(30).keys()].forEach(item => {

                return(
                    describe(`Редактирование интервала День ${item + 1}`, () => {

                        it('Нажатие по интервалу',
                            async () => await dec.simple(page.accessTemplateScheduleChangePage.handler,
                                [`${item + 1}`, entry.max],
                                page.accessTemplateScheduleChangePage));

                        it('Интервал выделен',
                            async () => await dec.simple(page.accessTemplateScheduleChangePage.intervalActive,
                                [entry.max],
                                page.accessTemplateScheduleChangePage));

                        it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                            [but.edit, entry.max],
                            el.butIcBefore));

                        it('Отображенение модального окна выборы временной зоны',
                            async () => await dec.simple(el.modal.timeZoneModalSelect.init,
                                [entry.max],
                                el.modal.timeZoneModalSelect));

                        it('Отображение интервала', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.interval,
                                [4, entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие по интервалу', async () =>
                            await dec.simple(el.modal.timeZoneModalSelect.intervalHandler,
                                [4, entry.max],
                                el.modal.timeZoneModalSelect));

                        it('Интервал выделен', async () => {
                            await dec.simple(el.modal.timeZoneModalSelect.intervalActive,
                                [entry.max],
                                el.modal.timeZoneModalSelect)
                        });

                        it('Нажатие кнопки "Применить"', async () => await dec.simple(el.button.handler,
                            ['Применить', entry.max],
                            el.button));

                        it('Отсутствие модального окна выборы временной зоны', async () =>
                            await dec.simple(el.modal.timeZoneModalSelect.initClose,
                                [entry.max],
                                el.modal.timeZoneModalSelect));
                    })
                )
            });

            describe('Сохранение изменений', () => {

                it('Нажатие кнопки "Сохранить изменения"', async () => await dec.simple(el.button.handler,
                    ['Сохранить изменения', entry.max],
                    el.button));

                it('Отображение уведомления "Сохранено успешно"', async () => await dec.simple(el.success.success,
                    ['Сохранено успешно', entry.max],
                    el.success));
            });

        });

        describe('Проверка таблицы', () => {

            bef();

            aft();

            it('Отображение в таблице 6 строк', async () => await dec.simple(el.table.size,
                [6, entry.max],
                el.table));

            it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                ['', 'Поиск...', params.stz2.name, entry.max],
                el.input));

            it('Отображение в таблице 1 строки', async () => await dec.simple(el.table.size,
                [1, entry.max],
                el.table));

            it('Проверка столбца "Название"', async () => await dec.simpleText(el.table.cellGetText,
                ['Название', 1, 1, entry.max],
                params.stz2.name,
                el.table));

            it('Проверка столбца "Описание"', async () => await dec.simpleText(el.table.cellGetText,
                ['Описание', 1, 2, entry.max],
                params.stz2.description,
                el.table));

            it('Проверка столбца "Тип"', async () => await dec.simpleText(el.table.cellGetText,
                ['Тип', 1, 3, entry.max],
                'Скользящий посуточный график',
                el.table))
        });

        describe('Проверка параметров', () => {

            bef();

            aft();

            describe('Проверка общих праметров', () => {

                it('Ввод в "Поиск..."', async () => await dec.simple(el.input.sendKeys,
                    ['', 'Поиск...', params.stz2.name, entry.max],
                    el.input));

                it('Отображение в таблице одной строки', async () => await dec.simple(el.table.singleSize,
                    [entry.max],
                    el.table));

                it('Нажатие по первой строке таблицы', async () => await dec.simple(el.table.strHandler,
                    [1, entry.max],
                    el.table));

                it('Нажатие кнопки "Редактировать"', async () => await dec.simple(el.butIcBefore.handler,
                    [but.edit, entry.max],
                    el.butIcBefore));

                it('Отображение "title", "url"',
                    async () => await dec.simple(page.accessTemplateScheduleChangePage.initEdit,
                        [entry.max],
                        page.accessTemplateScheduleChangePage));

                it('Проверка "Название"', async () => await dec.simpleText(el.input.getValue,
                    ['Название', '', entry.max],
                    params.stz1.name,
                    el.input));

                it('Проверка "Описание"', async () => await dec.simpleText(el.input.getValue,
                    ['Описание', '', entry.max],
                    params.stz2.description,
                    el.input));

                it('Проверка "Дата начала смены"', async () => await dec.simpleText(el.input.getValue,
                    ['Дата начала смены', '', entry.max],
                    params.stz2.date,
                    el.input));

                it('Проверка "Временной критерий"', async () => await dec.simpleText(el.select.getText,
                    ['Временной критерий', 'Скользящий посуточный график', entry.max],
                    'Скользящий посуточный график',
                    el.input))
            });

            [...Array(30).keys()].forEach(item => {

                return(
                    describe(`Проверка интервала День ${item + 1}`, () => {

                        it('Назавание',
                            async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalName,
                                [`${item + 1}`, entry.max],
                                params.tz2.name,
                                page.accessTemplateScheduleChangePage));

                        it('Заглавие',
                            async () => await dec.simpleText(page.accessTemplateScheduleChangePage.intervalTitle,
                            [`${item + 1}`, entry.max],
                            `День ${item + 1}`,
                            page.accessTemplateScheduleChangePage));

                        it('Отображения интервала',
                            async () => await dec.simple(page.accessTemplateScheduleChangePage.interval,
                            [`${item + 1}`, entry.max],
                            page.accessTemplateScheduleChangePage));

                        it('Начало временного блока',
                            async () => await dec.simpleText(page.accessTemplateScheduleChangePage.startTimeGetValue,
                                [`${item + 1}`, 1, entry.max],
                                params.tz2.intervals.start,
                                page.accessTemplateScheduleChangePage));

                        it('Окончание временного блока',
                            async () => await dec.simpleText(page.accessTemplateScheduleChangePage.endTimeGetValue,
                                [`${item + 1}`, 1, entry.max],
                                params.tz2.intervals.end,
                                page.accessTemplateScheduleChangePage));

                    })
                )
            });

        });

    });


    return {
        TZAddParamsMinParams,
        TZRemoveParamsMaxParams,
        TZEditAllMaxParams,
        TZRemoveAllMaxParams,
        TZRemoveName,
        TZRemoveInterval,
        TZDuplicateTZ,
        TZDuplicateWSTZSW,
        WAddParamsMinParams,
        WRemoveParamsMaxParams,
        WEditMaxParams,
        WRemoveMaxParams,
        WRemoveName,
        WDuplicateW,
        WDuplicateTZSTZSW,
        STZAddParamsMinParams,
        STZRemoveParamsMaxParams,
        STZEditALLParamsMaxParams,

    }

};



module.exports = {
    add: add(),
    edit: edit()
};